[[["0ba2450d-fca1-4194-b278-f0fcd06e7d03",{"pageContent":"//\n//  PaddingAdder.swift\n//\n//  Created by Fabrizio Duroni on 24/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol PaddingAdder {\n    func addTo(content: [UInt8], numberOfByte: Int) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/PaddingAdder.swift","loc":{"lines":{"from":1,"to":12}}}}],["2329cf8a-fcdc-4c7f-88e2-5c2cda432059",{"pageContent":"//\n//  PaddingAdderToEndOfContentUsingNullChar.swift\n//\n//  Created by Fabrizio Duroni on 24/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass PaddingAdderToEndOfContentUsingNullChar: PaddingAdder {\n    func addTo(content: [UInt8], numberOfByte: Int) -> [UInt8] {\n        var newContent = content\n        newContent.append(contentsOf: [UInt8](repeating: 0, count: numberOfByte))\n        return newContent\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/PaddingAdderToEndOfContentUsingNullChar.swift","loc":{"lines":{"from":1,"to":16}}}}],["8e303790-9b9f-4172-a489-b577d292bac4",{"pageContent":"//\n//  PaddingRemover.swift\n//\n//  Created by Fabrizio Duroni on 20/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol PaddingRemover {\n    func removeFrom(string: String) -> String\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/PaddingRemover.swift","loc":{"lines":{"from":1,"to":12}}}}],["260a5713-8773-43b3-a27d-7a4ed1928e5f",{"pageContent":"//\n//  PaddingRemoverUsingTrimming.swift\n//\n//  Created by Fabrizio Duroni on 20/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass PaddingRemoverUsingTrimming: PaddingRemover {\n    func removeFrom(string: String) -> String {\n        return string.trimmingCharacters(in: CharacterSet(charactersIn: \"\\0\"))\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/PaddingRemoverUsingTrimming.swift","loc":{"lines":{"from":1,"to":14}}}}],["c5cebdc1-72eb-45e5-acf4-d71f2f3c62ba",{"pageContent":"//\n//  SynchsafeEncoder.swift\n//\n//  Created by Fabrizio Duroni on 22/12/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol SynchsafeEncoder {\n    func encode(integer: UInt32) -> UInt32\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/SynchsafeEncoder.swift","loc":{"lines":{"from":1,"to":12}}}}],["f30c2509-95c1-4e3b-a873-3ec791cfd2c4",{"pageContent":"//\n//  SynchsafeIntegerDecoder.swift\n//\n//  Created by Fabrizio Duroni on 21/12/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n Synchsafe integer decoder\n \n - SeeAlso https://handwiki.org/wiki/Synchsafe\n */\nclass SynchsafeIntegerDecoder {\n    func decode(integer: UInt32) -> UInt32 {\n        var decodedInteger: UInt32 = 0\n        var mask: UInt32 = 0x7F000000\n\n        while mask != 0 {\n            decodedInteger = decodedInteger >> 1\n            decodedInteger = decodedInteger | integer & mask\n            mask >>= 8\n        }\n\n        return decodedInteger\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/SynchsafeIntegerDecoder.swift","loc":{"lines":{"from":1,"to":28}}}}],["9d3e0624-29a2-442a-a4fe-b8fe2ccf40ab",{"pageContent":"//\n//  SynchsafeIntegerEncoder.swift\n//\n//  Created by Fabrizio Duroni on 22/12/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n Synchsafe integer encoder\n \n - SeeAlso https://handwiki.org/wiki/Synchsafe\n */\nclass SynchsafeIntegerEncoder: SynchsafeEncoder {\n    func encode(integer: UInt32) -> UInt32 {\n        var encodedInteger: UInt32 = 0\n        var mask: UInt32 = 0x7F\n        var partiallyEncodedInteger = integer\n        while mask != 0x7FFFFFFF {\n            encodedInteger = partiallyEncodedInteger & ~mask\n            encodedInteger = encodedInteger << 1\n            encodedInteger = encodedInteger | partiallyEncodedInteger & mask\n            mask = ((mask + 1) << 8) - 1\n            partiallyEncodedInteger = encodedInteger\n        }\n        return encodedInteger\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/SynchsafeIntegerEncoder.swift","loc":{"lines":{"from":1,"to":29}}}}],["882817e0-717c-42f0-a537-2ca40920b76b",{"pageContent":"//\n//  UInt32ToByteArrayAdapter.swift\n//\n//  Created by Fabrizio Duroni on 19/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol UInt32ToByteArrayAdapter {\n    func adapt(uInt32: UInt32) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/UInt32ToByteArrayAdapter.swift","loc":{"lines":{"from":1,"to":12}}}}],["a7316f5f-1489-4aff-ad68-7294829e0060",{"pageContent":"//\n//  UInt32ToByteArrayAdapterUsingUnsafePointer.swift\n//\n//  Created by Fabrizio Duroni on 19/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass UInt32ToByteArrayAdapterUsingUnsafePointer: UInt32ToByteArrayAdapter {\n    func adapt(uInt32: UInt32) -> [UInt8] {\n        var currentUInt32 = uInt32\n        let bytes = withUnsafePointer(to: &currentUInt32) {\n            $0.withMemoryRebound(to: UInt8.self, capacity: MemoryLayout<UInt32>.size) {\n                Array(UnsafeBufferPointer(start: $0, count: MemoryLayout<UInt32>.size))\n            }\n        }\n        return bytes.reversed()\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Common/UInt32ToByteArrayAdapterUsingUnsafePointer.swift","loc":{"lines":{"from":1,"to":20}}}}],["cfc97da5-dd68-4510-92db-ce139debf66c",{"pageContent":"//\n//  FrameContentAdapter.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 12.11.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol FrameContentAdapter {\n    func createFrames(id3Tag: ID3Tag, frameName: FrameName, frameType: FrameType) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/FrameContentAdapter.swift","loc":{"lines":{"from":1,"to":13}}}}],["1829513b-118a-4b5d-8353-b36e9e0b1f34",{"pageContent":"//\n//  FrameContentSizeCalculator.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol FrameContentSizeCalculator {\n    func calculateSizeOf(content: [UInt8], version: ID3Version) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/FrameContentSizeCalculator.swift","loc":{"lines":{"from":1,"to":12}}}}],["c9d5598e-d4b0-4fd4-a8c5-2dd3cf27e891",{"pageContent":"//\n//  FrameFlagsCreator.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol FrameFlagsCreator {\n    func createFor(version: ID3Version) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/FrameFlagsCreator.swift","loc":{"lines":{"from":1,"to":12}}}}],["1dd8d013-3f8b-4380-a175-d3bbddc18254",{"pageContent":"//\n//  FrameFromIntegerContentAdapter.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 12.11.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass FrameFromIntegerContentAdapter: FrameContentAdapter {\n    private let frameCreator: FrameFromStringContentCreator\n\n    init(frameCreator: FrameFromStringContentCreator) {\n        self.frameCreator = frameCreator\n    }\n\n    func createFrames(id3Tag: ID3Tag, frameName: FrameName, frameType: FrameType) -> [UInt8] {\n        if let frame = id3Tag.frames[frameName] as? ID3FrameWithIntegerContent,\n            let value = frame.value {\n            return frameCreator.createFrame(\n                frameType: frameType,\n                version: id3Tag.properties.version,\n                content: String(value)\n            )\n        }\n        return []\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/FrameFromIntegerContentAdapter.swift","loc":{"lines":{"from":1,"to":29}}}}],["fe4d0bbb-ad1e-413f-93c7-1b8e2bd6fa4e",{"pageContent":"//\n//  FrameFromStringContentAdapter.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 12.11.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass FrameFromStringContentAdapter: FrameContentAdapter {\n    private let frameCreator: FrameFromStringContentCreator\n\n    init(frameCreator: FrameFromStringContentCreator) {\n        self.frameCreator = frameCreator\n    }\n\n    func createFrames(id3Tag: ID3Tag, frameName: FrameName, frameType: FrameType) -> [UInt8] {\n        if let frame = id3Tag.frames[frameName] as? ID3FrameWithStringContent {\n            return frameCreator.createFrame(\n                frameType: frameType,\n                version: id3Tag.properties.version,\n                content: frame.content\n            )\n        }\n        return []\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/FrameFromStringContentAdapter.swift","loc":{"lines":{"from":1,"to":28}}}}],["d1de7435-cb9d-4fd1-abfe-e6d663ebd985",{"pageContent":"//\n//  FrameFromStringContentCreator.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 27.10.20.\n//  2020 Fabrizio Duroni\n//\n\nimport Foundation\n\nprotocol FrameFromStringContentCreator {\n    func createFrame(frameType: FrameType, version: ID3Version, content: String) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/FrameFromStringContentCreator.swift","loc":{"lines":{"from":1,"to":13}}}}],["1b204199-3b5c-4ec4-b755-c9cc4d1337dc",{"pageContent":"//\n//  FrameHeaderCreator.swift\n//\n//  Created by Fabrizio Duroni on 14/10/20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol FrameHeaderCreator {\n    func createUsing(version: ID3Version, frameType: FrameType, frameBody: [UInt8]) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/FrameHeaderCreator.swift","loc":{"lines":{"from":1,"to":12}}}}],["0a62330d-1ab6-4256-ac3b-5ec82998dd30",{"pageContent":"//\n//  ID3AttachedPictureFrameCreator.swift\n//\n//  Created by Fabrizio Duroni on 12/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol AttachedPictureFrameCreator {\n    func createFrame(using attachedPicture: ID3FrameAttachedPicture, id3Tag: ID3Tag) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3AttachedPictureFrameCreator.swift","loc":{"lines":{"from":1,"to":12}}}}],["4fa976a5-a65c-4cfa-81d9-74483f241052",{"pageContent":"class ID3AttachedPictureFrameCreator: AttachedPictureFrameCreator {\n    private let id3FrameConfiguration: ID3FrameConfiguration\n    private let id3AttachedPictureFrameConfiguration: ID3AttachedPictureFrameConfiguration\n    private let frameHeaderCreator: FrameHeaderCreator\n\n    init(id3FrameConfiguration: ID3FrameConfiguration,\n         id3AttachedPictureFrameConfiguration: ID3AttachedPictureFrameConfiguration,\n         frameHeaderCreator: FrameHeaderCreator) {\n        self.id3FrameConfiguration = id3FrameConfiguration\n        self.id3AttachedPictureFrameConfiguration = id3AttachedPictureFrameConfiguration\n        self.frameHeaderCreator = frameHeaderCreator\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3AttachedPictureFrameCreator.swift","loc":{"lines":{"from":14,"to":25}}}}],["6932428b-6822-406b-baf6-d923ed4df87c",{"pageContent":"func createFrame(using attachedPicture: ID3FrameAttachedPicture, id3Tag: ID3Tag) -> [UInt8] {\n        let frameBody = getFrameBody(attachedPicture: attachedPicture, id3Tag: id3Tag)\n        let frameHeader = frameHeaderCreator.createUsing(\n            version: id3Tag.properties.version,\n            frameType: .attachedPicture,\n            frameBody: frameBody\n        )\n        return frameHeader + frameBody\n    }\n\n    private func getFrameBody(attachedPicture: ID3FrameAttachedPicture, id3Tag: ID3Tag) -> [UInt8] {\n        var frameBody: [UInt8] = [UInt8]()\n        frameBody.append(contentsOf: getAttachedPictureHeaderFor(\n                attachedPicture: attachedPicture,\n                version: id3Tag.properties.version,\n                format: attachedPicture.format\n        ))\n        frameBody.append(contentsOf: [UInt8](attachedPicture.picture))\n        return frameBody\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3AttachedPictureFrameCreator.swift","loc":{"lines":{"from":27,"to":46}}}}],["9918aa1a-3327-4f92-8935-d597ad84de68",{"pageContent":"private func getAttachedPictureHeaderFor(attachedPicture: ID3FrameAttachedPicture,\n                                             version: ID3Version,\n                                             format: ID3PictureFormat) -> [UInt8] {\n        var header = id3AttachedPictureFrameConfiguration.getHeaderMimeTypeFor(pictureFormat: format, version: version)\n        let coverTypeBytePosition = id3AttachedPictureFrameConfiguration.getPictureTypeBytePositionFor(\n                pictureFormat: format,\n                version: version\n        )\n        header[coverTypeBytePosition] = attachedPicture.type.rawValue\n        return header\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3AttachedPictureFrameCreator.swift","loc":{"lines":{"from":48,"to":59}}}}],["5b8693d0-0523-4f4c-a3b3-b9a3fd8a356c",{"pageContent":"//\n//  ID3AttachedPicturesFramesCreator.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3AttachedPicturesFramesCreator: ID3FrameCreator {\n    private let attachedPictureFrameCreator: AttachedPictureFrameCreator\n\n    init(attachedPictureFrameCreator: AttachedPictureFrameCreator) {\n        self.attachedPictureFrameCreator = attachedPictureFrameCreator\n    }\n\n    func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        var frames: [UInt8] = []\n        for pictureType in ID3PictureType.allCases {\n            if let attachedPictureFrame = id3Tag.frames[.attachedPicture(pictureType)] as? ID3FrameAttachedPicture {\n                let frame = attachedPictureFrameCreator.createFrame(using: attachedPictureFrame, id3Tag: id3Tag)\n                frames.append(contentsOf: frame)\n            }\n        }\n        return frames\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3AttachedPicturesFramesCreator.swift","loc":{"lines":{"from":1,"to":27}}}}],["ee904150-1b12-4352-99a3-64d79f12f638",{"pageContent":"//\n//  ID3AttachedPicturesFramesCreatorFactory.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 29.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3AttachedPicturesFramesCreatorFactory {\n    static func make() -> ID3AttachedPicturesFramesCreator {\n        let frameConfiguration = ID3FrameConfiguration()\n        return ID3AttachedPicturesFramesCreator(\n            attachedPictureFrameCreator: ID3AttachedPictureFrameCreator(\n                id3FrameConfiguration: frameConfiguration,\n                id3AttachedPictureFrameConfiguration: ID3AttachedPictureFrameConfiguration(),\n                frameHeaderCreator: ID3FrameHeaderCreatorFactory.make()\n            )\n        )\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3AttachedPicturesFramesCreatorFactory.swift","loc":{"lines":{"from":1,"to":22}}}}],["c7d5394e-a1e2-4daf-87f4-b720620c7d8a",{"pageContent":"//\n//  ID3DiscPositionCreator.swift\n//\n//  Created by Nolaine Crusher on 02/24/2020.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3DiscPositionFrameCreator.swift","loc":{"lines":{"from":1,"to":8}}}}],["d943c8dd-3e59-430c-98b4-74e6efb07f40",{"pageContent":"class ID3DiscPositionFrameCreator: ID3FrameCreator {\n    private let frameCreator: FrameFromStringContentCreator\n    private var id3FrameConfiguration: ID3FrameConfiguration\n\n    init(frameCreator: FrameFromStringContentCreator, id3FrameConfiguration: ID3FrameConfiguration) {\n        self.frameCreator = frameCreator\n        self.id3FrameConfiguration = id3FrameConfiguration\n    }\n\n    func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        if let discPositionFrame = id3Tag.frames[.discPosition] as? ID3FramePartOfTotal {\n            return frameCreator.createFrame(\n                    frameType: .discPosition,\n                    version: id3Tag.properties.version,\n                    content: adapt(discPosition: discPositionFrame)\n            )\n        }\n        return []\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3DiscPositionFrameCreator.swift","loc":{"lines":{"from":10,"to":28}}}}],["a9b32286-d5cd-4e78-9e96-c57abcf92454",{"pageContent":"private func adapt(discPosition: ID3FramePartOfTotal) -> String {\n        var discPositionString = String(discPosition.part)\n        if let validTotalDiscs = discPosition.total {\n            discPositionString += \"/\\(validTotalDiscs)\"\n        }\n        return discPositionString\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3DiscPositionFrameCreator.swift","loc":{"lines":{"from":30,"to":37}}}}],["f56f21b8-e7a1-4561-ac4b-25927bc3ba8c",{"pageContent":"//\n//  ID3FrameContentCreator.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 12.11.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameContentCreator: ID3FrameCreator {\n    private let frameContentAdapter: FrameContentAdapter\n    private let frameName: FrameName\n    private let frameType: FrameType\n\n    init(frameCreator: FrameContentAdapter, frameName: FrameName, frameType: FrameType) {\n        self.frameContentAdapter = frameCreator\n        self.frameName = frameName\n        self.frameType = frameType\n    }\n\n    func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        return frameContentAdapter.createFrames(id3Tag: id3Tag, frameName: frameName, frameType: frameType)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameContentCreator.swift","loc":{"lines":{"from":1,"to":25}}}}],["be2d58c1-6172-4fe9-94d5-26a02718ad52",{"pageContent":"//\n//  ID3FrameContentSizeCalculator.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameContentSizeCalculator.swift","loc":{"lines":{"from":1,"to":8}}}}],["fc6aab9a-ff2d-4c9d-b3cf-cc376b6bfd81",{"pageContent":"class ID3FrameContentSizeCalculator: FrameContentSizeCalculator {\n    private let uInt32ToByteArrayAdapter: UInt32ToByteArrayAdapter\n    private let synchsafeEncoder: SynchsafeEncoder\n\n    init(uInt32ToByteArrayAdapter: UInt32ToByteArrayAdapter, synchsafeEncoder: SynchsafeEncoder) {\n        self.uInt32ToByteArrayAdapter = uInt32ToByteArrayAdapter\n        self.synchsafeEncoder = synchsafeEncoder\n    }\n\n    func calculateSizeOf(content: [UInt8], version: ID3Version) -> [UInt8] {\n        let size = synchsafeEncodeIfVersion4(size: UInt32(content.count), version: version)\n        var sizeBytes = uInt32ToByteArrayAdapter.adapt(uInt32: size)\n        sizeBytes = removeFirstByteIfVersion2From(size: sizeBytes, version: version)\n        return sizeBytes\n    }\n\n    private func synchsafeEncodeIfVersion4(size: UInt32, version: ID3Version) -> UInt32 {\n        if version == .version4 {\n            return synchsafeEncoder.encode(integer: size)\n        }\n        return size\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameContentSizeCalculator.swift","loc":{"lines":{"from":10,"to":31}}}}],["f43fd7ee-0f56-413d-9dce-5aca4bd2027a",{"pageContent":"private func removeFirstByteIfVersion2From(size: [UInt8], version: ID3Version) -> [UInt8] {\n        var newSize = size\n        if version <= .version2 {\n            newSize.removeFirst()\n        }\n        return newSize\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameContentSizeCalculator.swift","loc":{"lines":{"from":33,"to":40}}}}],["c2d23681-e140-4946-833d-616afde18584",{"pageContent":"//\n//  ID3FrameCreator.swift\n//\n//  Created by Fabrizio Duroni on 26.02.18.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol ID3FrameCreator {\n    func createFrames(id3Tag: ID3Tag) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameCreator.swift","loc":{"lines":{"from":1,"to":12}}}}],["a70c50a6-a078-4854-9383-abf3dd1b0097",{"pageContent":"//\n//  ID3FrameCreatorsFactory.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\n// swiftlint:disable line_length\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameCreatorsFactory.swift","loc":{"lines":{"from":1,"to":10}}}}],["ff46c88d-ff3e-47c8-9b5b-9f5cc2d13924",{"pageContent":"class ID3FrameCreatorsFactory {\n    static func make() -> [ID3FrameCreator] {\n        let frameConfiguration = ID3FrameConfiguration()\n        let frameFromStringUTF16ContentCreator = ID3FrameFromStringContentCreatorWithUTF16EncodingFactory.make()\n        let frameFromStringISO88591ContentCreator = ID3FrameFromStringContentCreatorWithISO88591EncodingFactory.make()\n        let frameFromStringUTF16ContentAdapter = FrameFromStringContentAdapter(frameCreator: frameFromStringUTF16ContentCreator)\n        let frameFromIntegerContentAdapter = FrameFromIntegerContentAdapter(frameCreator: frameFromStringISO88591ContentCreator)","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameCreatorsFactory.swift","loc":{"lines":{"from":12,"to":18}}}}],["62febd34-f229-4a9b-92ae-94364a7f8fbe",{"pageContent":"return [\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .album, frameType: .album),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .albumArtist, frameType: .albumArtist),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .artist, frameType: .artist),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .title, frameType: .title),\n            ID3GenreFrameCreator(frameCreator: frameFromStringISO88591ContentCreator),\n            ID3TrackPositionFrameCreator(frameCreator: frameFromStringISO88591ContentCreator),\n            ID3AttachedPicturesFramesCreatorFactory.make(),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .composer, frameType: .composer),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameCreatorsFactory.swift","loc":{"lines":{"from":20,"to":28}}}}],["1bb4aabb-73a8-4f5b-804b-3651670b5523",{"pageContent":"ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .conductor, frameType: .conductor),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .contentGrouping, frameType: .contentGrouping),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .copyright, frameType: .copyright),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .encodedBy, frameType: .encodedBy),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .encoderSettings, frameType: .encoderSettings),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .fileOwner, frameType: .fileOwner),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .lyricist, frameType: .lyricist),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameCreatorsFactory.swift","loc":{"lines":{"from":29,"to":35}}}}],["6c4725db-91c4-421f-bf7f-b791b4c46f27",{"pageContent":"ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .mixArtist, frameType: .mixArtist),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .publisher, frameType: .publisher),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .subtitle, frameType: .subtitle),\n            ID3FrameContentCreator(frameCreator: frameFromIntegerContentAdapter, frameName: .beatsPerMinute, frameType: .beatsPerMinute),\n            ID3DiscPositionFrameCreator(frameCreator: frameFromStringISO88591ContentCreator, id3FrameConfiguration: frameConfiguration),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .originalFilename, frameType: .originalFilename),\n            ID3FrameContentCreator(frameCreator: frameFromIntegerContentAdapter, frameName: .lengthInMilliseconds, frameType: .lengthInMilliseconds),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameCreatorsFactory.swift","loc":{"lines":{"from":36,"to":42}}}}],["30a93076-1caa-47a5-b72c-eae599a710cb",{"pageContent":"ID3FrameContentCreator(frameCreator: frameFromIntegerContentAdapter, frameName: .sizeInBytes, frameType: .sizeInBytes),\n            ID3FramesWithLocalizedContentCreatorFactory.make()\n        ]\n        + ID3RecordingTimesFrameCreatorsFactory.make()\n        + ID3iTunesFrameCreatorsFactory.make()\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameCreatorsFactory.swift","loc":{"lines":{"from":43,"to":49}}}}],["b34c16f6-8cf0-44e5-9a2d-d49e74c6fb54",{"pageContent":"//\n//  ID3FrameFlagsCreator.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameFlagsCreator: FrameFlagsCreator {\n    func createFor(version: ID3Version) -> [UInt8] {\n        if version >= .version3 {\n            return [0x0, 0x0]\n        }\n        return []\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameFlagsCreator.swift","loc":{"lines":{"from":1,"to":17}}}}],["b81d437f-3c59-4577-8b69-dde47957c5a7",{"pageContent":"//\n//  ID3FrameFromStringContentCreator.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameFromStringContentCreator: FrameFromStringContentCreator {\n    private let frameHeaderCreator: FrameHeaderCreator\n    private let stringToBytesAdapter: StringToBytesAdapter\n\n    init(frameHeaderCreator: FrameHeaderCreator,\n         stringToBytesAdapter: StringToBytesAdapter) {\n        self.frameHeaderCreator = frameHeaderCreator\n        self.stringToBytesAdapter = stringToBytesAdapter\n    }\n\n    func createFrame(frameType: FrameType, version: ID3Version, content: String) -> [UInt8] {\n        let frameBody = stringToBytesAdapter.adapt(string: content, for: version)\n        let frameHeader = frameHeaderCreator.createUsing(version: version, frameType: frameType, frameBody: frameBody)\n        let frame = frameHeader + frameBody\n        return frame\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameFromStringContentCreator.swift","loc":{"lines":{"from":1,"to":26}}}}],["3bd604b1-8e9b-48e4-ad08-9f25a109609b",{"pageContent":"//\n//  ID3FrameFromStringContentCreatorWithISO88591EncodingFactory.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 27.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameFromStringContentCreatorWithISO88591EncodingFactory {\n    static func make() -> ID3FrameFromStringContentCreator {\n        let paddingAdder = PaddingAdderToEndOfContentUsingNullChar()\n        let frameConfiguration = ID3FrameConfiguration()\n        let frameHeaderCreator = ID3FrameHeaderCreatorFactory.make()\n        return ID3FrameFromStringContentCreator(\n            frameHeaderCreator: frameHeaderCreator,\n            stringToBytesAdapter: ID3ISO88591StringToByteAdapter(paddingAdder: paddingAdder,\n                                                                 frameConfiguration: frameConfiguration)\n        )\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameFromStringContentCreatorWithISO88591EncodingFactory.swift","loc":{"lines":{"from":1,"to":22}}}}],["0be213b5-7aca-4f45-9ce1-cdd53168a631",{"pageContent":"//\n//  ID3FrameFromStringContentCreatorWithUTF16EncodingFactory.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 27.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameFromStringContentCreatorWithUTF16EncodingFactory {\n    static func make() -> ID3FrameFromStringContentCreator {\n        let paddingAdder = PaddingAdderToEndOfContentUsingNullChar()\n        let frameConfiguration = ID3FrameConfiguration()\n        let frameHeaderCreator = ID3FrameHeaderCreatorFactory.make()\n        return ID3FrameFromStringContentCreator(\n            frameHeaderCreator: frameHeaderCreator,\n            stringToBytesAdapter: ID3UTF16StringToByteAdapter(paddingAdder: paddingAdder,\n                                                              frameConfiguration: frameConfiguration)\n        )\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameFromStringContentCreatorWithUTF16EncodingFactory.swift","loc":{"lines":{"from":1,"to":22}}}}],["8f7828db-dc89-41d7-b966-7d1dfabab266",{"pageContent":"//\n//  ID3FrameHeaderCreator.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 14/10/20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameHeaderCreator.swift","loc":{"lines":{"from":1,"to":9}}}}],["66082854-1aae-480f-8b06-d5b2ac492814",{"pageContent":"class ID3FrameHeaderCreator: FrameHeaderCreator {\n    private let id3FrameConfiguration: ID3FrameConfiguration\n    private let frameContentSizeCalculator: FrameContentSizeCalculator\n    private let frameFlagsCreator: FrameFlagsCreator\n\n    init(id3FrameConfiguration: ID3FrameConfiguration,\n         frameContentSizeCalculator: FrameContentSizeCalculator,\n         frameFlagsCreator: FrameFlagsCreator\n    ) {\n        self.id3FrameConfiguration = id3FrameConfiguration\n        self.frameContentSizeCalculator = frameContentSizeCalculator\n        self.frameFlagsCreator = frameFlagsCreator\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameHeaderCreator.swift","loc":{"lines":{"from":11,"to":23}}}}],["f749d131-56a0-4c75-a1d4-64b0b8b14443",{"pageContent":"func createUsing(version: ID3Version, frameType: FrameType, frameBody: [UInt8]) -> [UInt8] {\n        var frameHeader: [UInt8] = id3FrameConfiguration.identifierFor(\n                frameType: frameType,\n                version: version\n        )\n        frameHeader.append(contentsOf: frameContentSizeCalculator.calculateSizeOf(\n                content: frameBody,\n                version: version\n        ))\n        frameHeader.append(contentsOf: frameFlagsCreator.createFor(version: version))\n        return frameHeader\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameHeaderCreator.swift","loc":{"lines":{"from":25,"to":37}}}}],["4341e925-af54-4b92-a72a-dc2306ff034f",{"pageContent":"//\n//  ID3FrameHeaderCreatorChain.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 27.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameHeaderCreatorFactory {\n    static func make() -> ID3FrameHeaderCreator {\n        let frameConfiguration = ID3FrameConfiguration()\n        let frameContentSizeCalculator = ID3FrameContentSizeCalculator(\n            uInt32ToByteArrayAdapter: UInt32ToByteArrayAdapterUsingUnsafePointer(),\n            synchsafeEncoder: SynchsafeIntegerEncoder()\n        )\n        let frameFlagsCreator = ID3FrameFlagsCreator()\n        return ID3FrameHeaderCreator(\n            id3FrameConfiguration: frameConfiguration,\n            frameContentSizeCalculator: frameContentSizeCalculator,\n            frameFlagsCreator: frameFlagsCreator\n        )\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FrameHeaderCreatorFactory.swift","loc":{"lines":{"from":1,"to":25}}}}],["21f0856c-da57-46d9-839e-7507665f7894",{"pageContent":"//\n//  ID3FramesCreator.swift\n//\n//  Created by Fabrizio Duroni on 22/12/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FramesCreator {\n    private let id3FrameCreators: [ID3FrameCreator]\n\n    init(id3FrameCreators: [ID3FrameCreator]) {\n        self.id3FrameCreators = id3FrameCreators\n    }\n\n    func createFramesUsing(id3Tag: ID3Tag) throws -> [UInt8] {\n        var frames = id3FrameCreators.reduce([]) { (accumulator, frameCreator)  in\n            accumulator + frameCreator.createFrames(id3Tag: id3Tag)\n        }\n        if thereIsNotValidDataIn(frames: frames) {\n            throw ID3TagEditorError.invalidTagData\n        }\n        frames.append(contentsOf: createFramesEnd())\n        return frames\n    }\n\n    private func thereIsNotValidDataIn(frames: [UInt8]) -> Bool {\n        return frames.count == 0\n    }\n\n    private func createFramesEnd() -> [UInt8] {\n        return [UInt8](repeating: 0, count: 2048)\n    }\n\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FramesCreator.swift","loc":{"lines":{"from":1,"to":36}}}}],["54479258-d0b4-46be-bb54-5e408e682386",{"pageContent":"//\n//  ID3FramesWithLocalizedContentCreator.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 09.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FramesWithLocalizedContentCreator.swift","loc":{"lines":{"from":1,"to":9}}}}],["dfba8771-f48f-4327-9391-16426f0e0a61",{"pageContent":"class ID3FramesWithLocalizedContentCreator: ID3FrameCreator {\n    private let localizedFrameNames: [FrameType: [FrameName]]\n    private let localizedFrameCreator: LocalizedFrameCreator\n\n    init(localizedFrameNames: [FrameType: [FrameName]],\n         localizedFrameCreator: LocalizedFrameCreator) {\n        self.localizedFrameNames = localizedFrameNames\n        self.localizedFrameCreator = localizedFrameCreator\n    }\n\n    func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        let frames: [UInt8] = localizedFrameNames.reduce([]) { (accumulator, localizedFrameNameElement) in\n            return accumulator + generateFramesFor(\n                frameType: localizedFrameNameElement.key,\n                localizedFrameNames: localizedFrameNameElement.value,\n                id3Tag: id3Tag\n            )\n        }\n        return frames\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FramesWithLocalizedContentCreator.swift","loc":{"lines":{"from":11,"to":30}}}}],["306fa539-34b8-4feb-a60c-3def3a6ef91d",{"pageContent":"private func generateFramesFor(frameType: FrameType, localizedFrameNames: [FrameName], id3Tag: ID3Tag) -> [UInt8] {\n        return localizedFrameNames.reduce([], { accumulator, localizedFrameName in\n            if let frame = id3Tag.frames[localizedFrameName] as? ID3FrameWithLocalizedContent {\n                return accumulator + localizedFrameCreator.createFrame(\n                    using: frame,\n                    version: id3Tag.properties.version,\n                    frameType: frameType\n                )\n            }\n            return accumulator\n        })\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FramesWithLocalizedContentCreator.swift","loc":{"lines":{"from":32,"to":44}}}}],["c114d2df-c14e-43dd-8f25-5dc46fe5593c",{"pageContent":"//\n//  ID3FramesWithLocalizedContentCreatorFactory.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 29.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FramesWithLocalizedContentCreatorFactory {\n    static func make() -> ID3FramesWithLocalizedContentCreator {\n        let frameConfiguration = ID3FrameConfiguration()\n        let paddingAdder = PaddingAdderToEndOfContentUsingNullChar()\n\n        return ID3FramesWithLocalizedContentCreator(\n            localizedFrameNames: frameNamesWithLocalizedContent,\n            localizedFrameCreator: ID3LocalizedFrameCreator(\n                id3FrameConfiguration: frameConfiguration,\n                frameHeaderCreator: ID3FrameHeaderCreatorFactory.make(),\n                paddingAdder: paddingAdder\n            )\n        )\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3FramesWithLocalizedContentCreatorFactory.swift","loc":{"lines":{"from":1,"to":25}}}}],["430a5c27-cb78-4ed0-a8ab-ff4fe1392816",{"pageContent":"//\n//  ID3GenreFrameCreator.swift\n//\n//  Created by Fabrizio Duroni on 04/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3GenreFrameCreator: ID3FrameCreator {\n    private let frameCreator: FrameFromStringContentCreator\n\n    init(frameCreator: FrameFromStringContentCreator) {\n        self.frameCreator = frameCreator\n    }\n\n    func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        if let genreFrame = id3Tag.frames[.genre] as? ID3FrameGenre {\n           return frameCreator.createFrame(\n                    frameType: .genre,\n                    version: id3Tag.properties.version,\n                    content: adapt(genre: genreFrame)\n            )\n        }\n        return []\n    }\n\n    private func adapt(genre: ID3FrameGenre) -> String {\n        var genreString = \"\"\n        if let genreIdentifier = genre.identifier {\n            genreString = \"(\\(genreIdentifier.rawValue))\"\n        }\n        genreString += \"\\(genre.description ?? \"\")\"\n        return genreString\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3GenreFrameCreator.swift","loc":{"lines":{"from":1,"to":36}}}}],["40387cfe-e6b4-4a0b-bd06-4f98d186f887",{"pageContent":"//\n//  ID3ISO88591StringToByteAdapter.swift\n//\n//  Created by Fabrizio Duroni on 27/04/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3ISO88591StringToByteAdapter: StringToBytesAdapter {\n    private let paddingAdder: PaddingAdder\n    private let frameConfiguration: ID3FrameConfiguration\n\n    init(paddingAdder: PaddingAdder, frameConfiguration: ID3FrameConfiguration) {\n        self.paddingAdder = paddingAdder\n        self.frameConfiguration = frameConfiguration\n    }\n\n    func adapt(string: String, for version: ID3Version) -> [UInt8] {\n        return frameConfiguration.encodingByteFor(version: version, encoding: .ISO88591) +\n            paddingAdder.addTo(content: [UInt8](string.utf8), numberOfByte: 1)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3ISO88591StringToByteAdapter.swift","loc":{"lines":{"from":1,"to":23}}}}],["0b1be98b-1c9b-4552-a575-f02fb3b9d128",{"pageContent":"//\n//  ID3LocalizedFrameCreator.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 14/10/20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3LocalizedFrameCreator.swift","loc":{"lines":{"from":1,"to":9}}}}],["dbeca3b4-c5e6-4bb6-b68c-d0a036693ac2",{"pageContent":"class ID3LocalizedFrameCreator: LocalizedFrameCreator {\n    private let id3FrameConfiguration: ID3FrameConfiguration\n    private let frameHeaderCreator: FrameHeaderCreator\n    private let paddingAdder: PaddingAdder\n\n    init(id3FrameConfiguration: ID3FrameConfiguration,\n         frameHeaderCreator: FrameHeaderCreator,\n         paddingAdder: PaddingAdder\n    ) {\n        self.id3FrameConfiguration = id3FrameConfiguration\n        self.frameHeaderCreator = frameHeaderCreator\n        self.paddingAdder = paddingAdder\n    }\n\n    func createFrame(using frameContent: ID3FrameWithLocalizedContent,\n                     version: ID3Version,\n                     frameType: FrameType) -> [UInt8] {\n        let frameBody = createFrameBodyUsing(frameContent: frameContent, version: version)\n        let frameHeader = frameHeaderCreator.createUsing(\n            version: version,\n            frameType: frameType,\n            frameBody: frameBody\n        )\n        return frameHeader + frameBody\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3LocalizedFrameCreator.swift","loc":{"lines":{"from":11,"to":35}}}}],["25bf29e2-c251-4ef8-bd19-9111113c03b9",{"pageContent":"private func createFrameBodyUsing(frameContent: ID3FrameWithLocalizedContent,\n                                      version: ID3Version) -> [UInt8] {\n        return id3FrameConfiguration.encodingByteFor(version: version, encoding: .UTF16)\n            + [UInt8](frameContent.language.rawValue.data(using: .utf8)!)\n            + createFrameTextContentFrom(frameLocalized: frameContent)\n    }\n\n    private func createFrameTextContentFrom(frameLocalized: ID3FrameWithLocalizedContent) -> [UInt8] {\n        let contentDescriptor = paddingAdder.addTo(\n            content: [UInt8](frameLocalized.contentDescription.data(using: .utf16)!),\n            numberOfByte: 2\n        )\n        let content = frameLocalized.content.data(using: .utf16)!\n        return contentDescriptor + content\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3LocalizedFrameCreator.swift","loc":{"lines":{"from":37,"to":52}}}}],["2e7a9cdf-0fa0-47eb-850c-58dea8347d07",{"pageContent":"//\n//  ID3RecordingDateTimeFrameCreator.swift\n//\n//  Created by Fabrizio Duroni on 28/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingDateTimeFrameCreator.swift","loc":{"lines":{"from":1,"to":8}}}}],["1f43b52a-6ebe-427c-8521-dab6432ce39c",{"pageContent":"class ID3RecordingDateTimeFrameCreator: ID3FrameCreator {\n    private let timestampCreator: TimestampCreator\n    private let frameCreator: FrameFromStringContentCreator\n\n    init(frameCreator: FrameFromStringContentCreator,\n         timestampCreator: TimestampCreator) {\n        self.timestampCreator = timestampCreator\n        self.frameCreator = frameCreator\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingDateTimeFrameCreator.swift","loc":{"lines":{"from":10,"to":18}}}}],["b717841f-d01d-4166-9bec-dc8b61a3496d",{"pageContent":"func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        if let recordingDateTimeFrame = id3Tag.frames[.recordingDateTime] as? ID3FrameRecordingDateTime,\n           let recordingYear = recordingDateTimeFrame.recordingDateTime.date?.year {\n            /**\n             Fallback case:\n             Same as of parsing operation. A lot mp3 id3 tag app place just the year inside this field instead of the\n             timestamp reccomended in the id3 standard. To avoid incompatibility with other id3 parser/writer we use as\n             fallback case the year: if the timestamp creator doesn't return a valid timestamp we just save the year\n             in this field (because most of the time people just want to save the recording year in the field :).\n             */\n            let timestamp = timestampCreator\n                .createFrom(recordingDateTime: recordingDateTimeFrame.recordingDateTime) ?? String(recordingYear)\n            return frameCreator.createFrame(\n                frameType: .recordingDateTime,","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingDateTimeFrameCreator.swift","loc":{"lines":{"from":20,"to":33}}}}],["02596dc9-c45e-41eb-bdf7-e3d25bbe46b6",{"pageContent":"return frameCreator.createFrame(\n                frameType: .recordingDateTime,\n                version: id3Tag.properties.version,\n                content: timestamp\n            )\n        }\n        return []\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingDateTimeFrameCreator.swift","loc":{"lines":{"from":32,"to":40}}}}],["0698efbf-adb3-4f94-a46c-03fe79099a28",{"pageContent":"//\n//  ID3RecordingDayMonthFrameCreator.swift\n//\n//  Created by Fabrizio Duroni on 05/08/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3RecordingDayMonthFrameCreator: ID3FrameCreator {\n    private let frameCreator: FrameFromStringContentCreator\n\n    init(frameCreator: FrameFromStringContentCreator) {\n        self.frameCreator = frameCreator\n    }\n\n    func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        if let dayMonthFrame = id3Tag.frames[.recordingDayMonth] as? ID3FrameRecordingDayMonth,\n            let day = dayMonthFrame.day,\n            let month = dayMonthFrame.month {\n            let dayAsString = String(format: \"%02d\", day)\n            let monthAsString = String(format: \"%02d\", month)\n            let recordingDayMonth = dayAsString + monthAsString\n            return frameCreator.createFrame(\n                frameType: .recordingDayMonth,\n                version: id3Tag.properties.version,\n                content: recordingDayMonth\n            )\n        }\n        return []\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingDayMonthFrameCreator.swift","loc":{"lines":{"from":1,"to":32}}}}],["79d0b2ec-99d8-4458-af9e-3a0abb923015",{"pageContent":"//\n//  ID3RecordingHourMinuteFrameCreator.swift\n//\n//  Created by Fabrizio Duroni on 05/08/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingHourMinuteFrameCreator.swift","loc":{"lines":{"from":1,"to":8}}}}],["75bf3737-01f5-4d14-8bcb-12fe3ad0ad8d",{"pageContent":"class ID3RecordingHourMinuteFrameCreator: ID3FrameCreator {\n    private let frameCreator: FrameFromStringContentCreator\n\n    init(frameCreator: FrameFromStringContentCreator) {\n        self.frameCreator = frameCreator\n    }\n\n    func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        if let hourMinuteFrame = id3Tag.frames[.recordingHourMinute] as? ID3FrameRecordingHourMinute,\n            let hour = hourMinuteFrame.hour,\n            let minute = hourMinuteFrame.minute {\n            let hourAsString = String(format: \"%02d\", hour)\n            let minuteAsString = String(format: \"%02d\", minute)\n            let recordingHourMinute = hourAsString + minuteAsString\n            return frameCreator.createFrame(\n                frameType: .recordingHourMinute,\n                version: id3Tag.properties.version,\n                content: recordingHourMinute\n            )\n        }\n        return []\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingHourMinuteFrameCreator.swift","loc":{"lines":{"from":10,"to":32}}}}],["fc18ba19-2de3-457d-adf5-2385116856ca",{"pageContent":"//\n//  ID3RecordingTimesFrameCreatorsFactory.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 29.10.20.\n//  2020 Fabrizio Duroni.\n//\n\n// swiftlint:disable line_length\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingTimesFrameCreatorsFactory.swift","loc":{"lines":{"from":1,"to":11}}}}],["e95cf649-bff7-46d5-8c06-612726da986c",{"pageContent":"class ID3RecordingTimesFrameCreatorsFactory {\n    static func make() -> [ID3FrameCreator] {\n        let frameFromStringISO88591ContentCreator = ID3FrameFromStringContentCreatorWithISO88591EncodingFactory.make()\n        return [\n            ID3FrameContentCreator(\n                frameCreator: FrameFromIntegerContentAdapter(frameCreator: frameFromStringISO88591ContentCreator),\n                frameName: .recordingYear,\n                frameType: .recordingYear\n            ),\n            ID3RecordingDayMonthFrameCreator(frameCreator: frameFromStringISO88591ContentCreator),\n            ID3RecordingHourMinuteFrameCreator(frameCreator: frameFromStringISO88591ContentCreator),\n            ID3RecordingDateTimeFrameCreator(frameCreator: frameFromStringISO88591ContentCreator, timestampCreator: ID3TimestampCreator())\n        ]\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3RecordingTimesFrameCreatorsFactory.swift","loc":{"lines":{"from":13,"to":27}}}}],["7dc5d051-2cdb-4201-bd20-6e0f75eb0f95",{"pageContent":"//\n//  ID3TagCreator.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3TagCreator {\n    let id3FramesCreator: ID3FramesCreator\n    let id3TagHeaderCreator: ID3TagHeaderCreator\n\n    init(id3FramesCreator: ID3FramesCreator, id3TagHeaderCreator: ID3TagHeaderCreator) {\n        self.id3FramesCreator = id3FramesCreator\n        self.id3TagHeaderCreator = id3TagHeaderCreator\n    }\n\n    func create(id3Tag: ID3Tag) throws -> Data {\n        let frames = try id3FramesCreator.createFramesUsing(id3Tag: id3Tag)\n        let header = id3TagHeaderCreator.createTagHeader(contentSize: frames.count, id3Tag: id3Tag)\n        let tag = header + frames\n        if isTooBig(tag: tag) {\n            throw ID3TagEditorError.tagTooBig\n        }\n        return Data(tag)\n    }\n\n    private func isTooBig(tag: [UInt8]) -> Bool {\n        return tag.count > 0xFFFFFFF\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3TagCreator.swift","loc":{"lines":{"from":1,"to":32}}}}],["0c9447c5-3b7a-48c1-8bd8-9e5bb929f1d4",{"pageContent":"//\n//  ID3TagCreatorFactory.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3TagCreatorFactory {\n    static func make() -> ID3TagCreator {\n        let id3FramesCreator = ID3FramesCreator(id3FrameCreators: ID3FrameCreatorsFactory.make())\n        let id3TagHeaderCreator = ID3TagHeaderCreator(\n            uInt32ToByteArrayAdapter: UInt32ToByteArrayAdapterUsingUnsafePointer(),\n            id3TagConfiguration: ID3TagConfiguration())\n        let id3TagCreator = ID3TagCreator(id3FramesCreator: id3FramesCreator, id3TagHeaderCreator: id3TagHeaderCreator)\n        return id3TagCreator\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3TagCreatorFactory.swift","loc":{"lines":{"from":1,"to":19}}}}],["93786d57-9ae3-42bf-9877-28454f272742",{"pageContent":"//\n//  ID3TagHeaderCreator.swift\n//\n//  Created by Fabrizio Duroni on 22/12/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3TagHeaderCreator {\n    private let uInt32ToByteArrayAdapter: UInt32ToByteArrayAdapter\n    private let id3TagConfiguration: ID3TagConfiguration\n\n    init(uInt32ToByteArrayAdapter: UInt32ToByteArrayAdapter, id3TagConfiguration: ID3TagConfiguration) {\n        self.uInt32ToByteArrayAdapter = uInt32ToByteArrayAdapter\n        self.id3TagConfiguration = id3TagConfiguration\n    }\n\n    func createTagHeader(contentSize: Int, id3Tag: ID3Tag) -> [UInt8] {\n        id3Tag.properties.size = UInt32(contentSize)\n        let flags: [UInt8] = [0x00]\n        let header = id3TagConfiguration.headerFor(version: id3Tag.properties.version)\n            + flags\n            + uInt32ToByteArrayAdapter.adapt(uInt32: SynchsafeIntegerEncoder().encode(integer: id3Tag.properties.size))\n        return header\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3TagHeaderCreator.swift","loc":{"lines":{"from":1,"to":27}}}}],["cf7d88ec-874e-4b76-aae5-9ba79cc9d3e1",{"pageContent":"//\n//  ID3TimestampCreator.swift\n//\n//  Created by Fabrizio Duroni on 28/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3TimestampCreator.swift","loc":{"lines":{"from":1,"to":8}}}}],["26908bf4-1b3e-488f-99d3-02a9654bbb05",{"pageContent":"class ID3TimestampCreator: TimestampCreator {\n    func createFrom(recordingDateTime: RecordingDateTime) -> String? {\n        var calendar = Calendar(identifier: .gregorian)\n        calendar.timeZone = TimeZone(identifier: \"UTC\")!\n        if let day = recordingDateTime.date?.day,\n            let month = recordingDateTime.date?.month,\n            let year = recordingDateTime.date?.year,\n            let hour = recordingDateTime.time?.hour,\n            let minute = recordingDateTime.time?.minute {\n            let components = DateComponents(year: year,\n                                            month: month,\n                                            day: day,\n                                            hour: hour,\n                                            minute: minute,\n                                            second: 0)\n            let timestamp = String(format: \"%.0f\", calendar.date(from: components)!.timeIntervalSince1970)\n            return timestamp\n        }\n        return nil\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3TimestampCreator.swift","loc":{"lines":{"from":10,"to":30}}}}],["e48a0cf1-8e6a-4008-aafe-b3bbe15965a6",{"pageContent":"//\n//  ID3TrackPositionCreator.swift\n//\n//  Created by Fabrizio Duroni on 08/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3TrackPositionFrameCreator.swift","loc":{"lines":{"from":1,"to":8}}}}],["f7d52b0c-cc28-4482-8d0c-767e04e40ef0",{"pageContent":"class ID3TrackPositionFrameCreator: ID3FrameCreator {\n    private let frameCreator: FrameFromStringContentCreator\n\n    init(frameCreator: FrameFromStringContentCreator) {\n        self.frameCreator = frameCreator\n    }\n\n    func createFrames(id3Tag: ID3Tag) -> [UInt8] {\n        if let trackPositionFrame = id3Tag.frames[.trackPosition] as? ID3FramePartOfTotal {\n            return frameCreator.createFrame(\n                    frameType: .trackPosition,\n                    version: id3Tag.properties.version,\n                    content: adapt(trackPosition: trackPositionFrame)\n            )\n        }\n        return []\n    }\n\n    private func adapt(trackPosition: ID3FramePartOfTotal) -> String {\n        var trackPositionString = String(trackPosition.part)\n        if let validTotalTracks = trackPosition.total {\n            trackPositionString += \"/\\(validTotalTracks)\"\n        }\n        return trackPositionString\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3TrackPositionFrameCreator.swift","loc":{"lines":{"from":10,"to":35}}}}],["80435aaf-235b-4614-b383-d46475e79f48",{"pageContent":"//\n//  ID3UTF16StringToByteAdapter.swift\n//\n//  Created by Fabrizio Duroni on 27/04/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3UTF16StringToByteAdapter: StringToBytesAdapter {\n    private let paddingAdder: PaddingAdder\n    private let frameConfiguration: ID3FrameConfiguration\n\n    init(paddingAdder: PaddingAdder, frameConfiguration: ID3FrameConfiguration) {\n        self.paddingAdder = paddingAdder\n        self.frameConfiguration = frameConfiguration\n    }\n\n    func adapt(string: String, for version: ID3Version) -> [UInt8] {\n        return frameConfiguration.encodingByteFor(version: version, encoding: .UTF16) +\n            paddingAdder.addTo(content: [UInt8](string.data(using: .utf16) ?? Data()), numberOfByte: 2)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3UTF16StringToByteAdapter.swift","loc":{"lines":{"from":1,"to":23}}}}],["8934fa9e-a7f7-405b-988e-838719a70aee",{"pageContent":"//\n//  ID3iTunesFrameCreatorsFactory.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 29.10.20.\n//  2020 Fabrizio Duroni.\n//\n\n// swiftlint:disable line_length\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3iTunesFrameCreatorsFactory.swift","loc":{"lines":{"from":1,"to":11}}}}],["ff9ff470-dde5-4fda-b602-2c86eaeca38e",{"pageContent":"class ID3iTunesFrameCreatorsFactory {\n    static func make() -> [ID3FrameCreator] {\n        let frameFromStringISO88591ContentCreator = ID3FrameFromStringContentCreatorWithISO88591EncodingFactory.make()\n        let frameFromStringUTF16ContentCreator = ID3FrameFromStringContentCreatorWithUTF16EncodingFactory.make()\n        let frameFromIntegerContentAdapter = FrameFromIntegerContentAdapter(frameCreator: frameFromStringISO88591ContentCreator)\n        let frameFromStringUTF16ContentAdapter = FrameFromStringContentAdapter(frameCreator: frameFromStringUTF16ContentCreator)\n        return [\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .iTunesGrouping, frameType: .iTunesGrouping),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .iTunesMovementName, frameType: .iTunesMovementName),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3iTunesFrameCreatorsFactory.swift","loc":{"lines":{"from":13,"to":21}}}}],["32461f53-59df-470f-86be-53343e8f3012",{"pageContent":"ID3FrameContentCreator(frameCreator: frameFromIntegerContentAdapter, frameName: .iTunesMovementIndex, frameType: .iTunesMovementIndex),\n            ID3FrameContentCreator(frameCreator: frameFromIntegerContentAdapter, frameName: .iTunesMovementCount, frameType: .iTunesMovementCount),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .iTunesPodcastCategory, frameType: .iTunesPodcastCategory),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .iTunesPodcastDescription, frameType: .iTunesPodcastDescription),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .iTunesPodcastID, frameType: .iTunesPodcastID),\n            ID3FrameContentCreator(frameCreator: frameFromStringUTF16ContentAdapter, frameName: .iTunesPodcastKeywords, frameType: .iTunesPodcastKeywords)\n        ]\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/ID3iTunesFrameCreatorsFactory.swift","loc":{"lines":{"from":22,"to":30}}}}],["f06d8317-4e55-477b-a953-ac8bfa16439b",{"pageContent":"//\n//  LocalizedFrameCreator.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 29.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol LocalizedFrameCreator {\n    func createFrame(using frameContent: ID3FrameWithLocalizedContent,\n                     version: ID3Version,\n                     frameType: FrameType) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/LocalizedFrameCreator.swift","loc":{"lines":{"from":1,"to":15}}}}],["57f4d5d3-bdc8-4ac3-a608-19a9c61fdaac",{"pageContent":"//\n//  StringToBytesAdapter.swift\n//\n//  Created by Fabrizio Duroni on 27/04/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol StringToBytesAdapter {\n    func adapt(string: String, for version: ID3Version) -> [UInt8]\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/StringToBytesAdapter.swift","loc":{"lines":{"from":1,"to":12}}}}],["6bf3914a-06a7-4dab-a07a-840a9160dcb6",{"pageContent":"//\n//  TimestampCreator.swift\n//\n//  Created by Fabrizio Duroni on 28/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol TimestampCreator {\n    func createFrom(recordingDateTime: RecordingDateTime) -> String?\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Create/TimestampCreator.swift","loc":{"lines":{"from":1,"to":12}}}}],["73494cda-a641-4436-9ee7-2d9725681c03",{"pageContent":"//\n//  FrameName.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 02.10.19.\n//  2019 Fabrizio Duroni\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameName.swift","loc":{"lines":{"from":1,"to":9}}}}],["08bba9a0-2ad9-42b3-9158-db460bdfdb81",{"pageContent":"func enumerateLocalizedFrameName(frameName: (ID3FrameContentLanguage) -> FrameName) -> [FrameName] {\n    return ID3FrameContentLanguage.allCases.map({ frameName($0) })\n}\n\nlet frameNamesWithLocalizedContent = [\n    FrameType.unsyncronisedLyrics: enumerateLocalizedFrameName(frameName: FrameName.unsynchronizedLyrics),\n    FrameType.comment: enumerateLocalizedFrameName(frameName: FrameName.comment)\n]","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameName.swift","loc":{"lines":{"from":11,"to":18}}}}],["5fd4ecbb-e438-4a26-99dd-5015cf68d9e1",{"pageContent":"/// An enum used to identify the different types of frame parsed by the ID3TagEditor.\n/// This must be used to acces the frame data as identifier inside the dictionary\n/// of frame in the `ID3tag` `frames` properties.\npublic enum FrameName: Equatable, Hashable, CaseIterable {\n    public static var allCases: [FrameName] {\n        return [\n            .title,\n            .album,\n            .albumArtist,\n            .artist,\n            .composer,\n            .conductor,\n            .contentGrouping,\n            .copyright,\n            .encodedBy,\n            .encoderSettings,\n            .fileOwner,\n            .lyricist,\n            .mixArtist,\n            .publisher,\n            .subtitle,\n            .genre,\n            .discPosition,\n            .trackPosition,\n            .recordingDayMonth,\n            .recordingYear,\n            .recordingHourMinute,\n            .recordingDateTime,\n            .iTunesGrouping,\n            .iTunesMovementName,\n            .iTunesMovementIndex,","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameName.swift","loc":{"lines":{"from":20,"to":50}}}}],["6312b98e-f7c9-4237-905a-7880a94565aa",{"pageContent":".recordingDateTime,\n            .iTunesGrouping,\n            .iTunesMovementName,\n            .iTunesMovementIndex,\n            .iTunesMovementCount,\n            .iTunesPodcastCategory,\n            .iTunesPodcastDescription,\n            .iTunesPodcastID,\n            .iTunesPodcastKeywords\n        ]\n        + frameNamesWithLocalizedContent[FrameType.unsyncronisedLyrics]!\n        + frameNamesWithLocalizedContent[FrameType.comment]!\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameName.swift","loc":{"lines":{"from":47,"to":59}}}}],["31f81103-42a2-49f2-a150-adc1fb71fec7",{"pageContent":"/// Title frame name.\n    case title\n    /// Album frame name.\n    case album\n    /// AlbumArtist  frame name.\n    case albumArtist\n    /// Artist frame name.\n    case artist\n    /// Composer frame name.\n    case composer\n    /// Conductor frame name.\n    case conductor\n    /// ContentGrouping frame name.\n    case contentGrouping\n    /// Copyright frame name.\n    case copyright\n    /// EncodedBy frame name.\n    case encodedBy\n    /// EncoderSettings frame name.\n    case encoderSettings\n    /// File Owner frame name. Version 2.3 and 2.4 only.\n    case fileOwner\n    /// Lyricist frame name\n    case lyricist\n    /// Mix Artist frame name.\n    case mixArtist\n    /// Publisher frame name.\n    case publisher\n    /// Subtitle frame name\n    case subtitle\n    /// Beats per minute frame name.\n    case beatsPerMinute\n    /// Original filename.\n    case originalFilename\n    /// Length in milliseconds frame.\n    case lengthInMilliseconds\n    /// Size in bytes frame. Valid only for tag version 2.2 and 2.3.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameName.swift","loc":{"lines":{"from":61,"to":97}}}}],["72eb9b65-c7f2-4b87-9180-b1ffeb57975c",{"pageContent":"case lengthInMilliseconds\n    /// Size in bytes frame. Valid only for tag version 2.2 and 2.3.\n    case sizeInBytes\n    /// Genre frame name.\n    case genre\n    /// Disc Position frame name.\n    case discPosition\n    /// Track Position frame name.\n    case trackPosition\n    /// RecordingDayMonth frame name. Valid only for tag version 2.3 and 2.2. For version 2.4 use RecordingDateTime.\n    case recordingDayMonth\n    /// RecordingYear frame name. Valid only for tag version 2.3 and 2.2. For version 2.4 use RecordingDateTime.\n    case recordingYear\n    /// RecordingHourMinute frame name. Valid only for tag version 2.3 and 2.2. For version 2.4 use RecordingDateTime.\n    case recordingHourMinute\n    /// RecordingDateTime frame name. Valid only for tag version 2.4. For version 2.2 and 2.3 use RecordingDateTime.\n    case recordingDateTime\n    /// AttachedPicture frame name\n    /// - pictureType:\n    case attachedPicture(_ pictureType: ID3PictureType)\n    /// Unsynchronized lyrics frame name.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameName.swift","loc":{"lines":{"from":96,"to":116}}}}],["ee321473-e37f-4e0e-b4a0-ea1fa85fc8c2",{"pageContent":"/// - pictureType:\n    case attachedPicture(_ pictureType: ID3PictureType)\n    /// Unsynchronized lyrics frame name.\n    /// - language: language of the lyrics, according to the ISO-639-2 standard.\n    case unsynchronizedLyrics(_ language: ID3FrameContentLanguage)\n    /// Comment frame name.\n    /// - language: language of the comment, according to the ISO-639-2 standard.\n    case comment(_ language: ID3FrameContentLanguage)\n    /// Grouping frame name. Version 2.3 and 2.4 only.\n    case iTunesGrouping\n    /// Movement name frame name. Version 2.3 and 2.4 only.\n    case iTunesMovementName\n    /// Movement Index frame name. Version 2.3 and 2.4 only.\n    case iTunesMovementIndex\n    /// Movement Count frame name. Version 2.3 and 2.4 only\n    case iTunesMovementCount\n    /// Podcast category frame name. Version 2.3 and 2.4 only.\n    case iTunesPodcastCategory\n    /// Podcast Description frame name. Version 2.3 and 2.4 only.\n    case iTunesPodcastDescription","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameName.swift","loc":{"lines":{"from":114,"to":133}}}}],["59be1954-e0e7-41ec-a476-84a96ca15708",{"pageContent":"/// Podcast Description frame name. Version 2.3 and 2.4 only.\n    case iTunesPodcastDescription\n    /// Podcast ID frame name, Version 2.3 and 2.4 only.\n    case iTunesPodcastID\n    /// Podcast keywords frame name, Version 2.3 and 2.4 only.\n    case iTunesPodcastKeywords\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameName.swift","loc":{"lines":{"from":132,"to":138}}}}],["7207ce60-3ba7-433a-8a69-55540ebfb0e3",{"pageContent":"//\n//  ID3FrameConfiguration.swift\n//\n//  Created by Fabrizio Duroni on 20/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameType.swift","loc":{"lines":{"from":1,"to":8}}}}],["d4e44d04-0e0e-4a71-8f5d-3199f0401bf8",{"pageContent":"enum FrameType: String, Equatable {\n    case title = \"title\"\n    case artist = \"artist\"\n    case composer = \"composer\"\n    case conductor = \"conductor\"\n    case contentGrouping = \"contentGrouping\"\n    case copyright = \"copyright\"\n    case encodedBy = \"encodedBy\"\n    case encoderSettings = \"encoderSettings\"\n    case fileOwner = \"fileOwner\"\n    case lyricist = \"lyricist\"\n    case mixArtist = \"mixArtist\"\n    case publisher = \"publisher\"\n    case subtitle = \"subtitle\"\n    case album = \"album\"\n    case attachedPicture = \"artwork\"\n    case recordingDayMonth = \"recordingDayMonth\"\n    case recordingYear = \"recordingYear\"\n    case recordingHourMinute = \"recordingHourMinute\"\n    case recordingDateTime = \"recodingDateTime\"\n    case genre = \"genre\"\n    case trackPosition = \"trackPosition\"\n    case discPosition = \"discPosition\"\n    case albumArtist = \"albumArtist\"\n    case beatsPerMinute = \"beatsPerMinute\"\n    case originalFilename = \"originalFilename\"\n    case lengthInMilliseconds = \"lengthInMilliseconds\"","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameType.swift","loc":{"lines":{"from":10,"to":36}}}}],["ce95407d-4d6f-4e97-a602-64c728bd8e0f",{"pageContent":"case originalFilename = \"originalFilename\"\n    case lengthInMilliseconds = \"lengthInMilliseconds\"\n    case sizeInBytes = \"sizeInBytes\"\n    case unsyncronisedLyrics = \"unsyncronisedLyrics\"\n    case comment = \"comment\"\n    case iTunesGrouping = \"iTunesGrouping\"\n    case iTunesMovementName = \"iTunesMovementName\"\n    case iTunesMovementIndex = \"iTunesMovementIndex\"\n    case iTunesMovementCount = \"iTunesMovementCount\"\n    case iTunesPodcastCategory = \"iTunesPodcastCategory\"\n    case iTunesPodcastDescription = \"iTunesPodcastDescription\"\n    case iTunesPodcastID = \"iTunesPodcastID\"\n    case iTunesPodcastKeywords = \"iTunesPodcastKeywords\"\n    case invalid = \"\"","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameType.swift","loc":{"lines":{"from":35,"to":48}}}}],["532a46c4-c83e-4728-81c3-74d84f8b684f",{"pageContent":"static func == (lhs: FrameType, rhs: FrameType) -> Bool {\n        return lhs.rawValue == rhs.rawValue\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/FrameType.swift","loc":{"lines":{"from":50,"to":53}}}}],["81aad39b-1233-428a-8fa4-100f39e0ebdc",{"pageContent":"//\n//  ID3AttachedPictureFrameConfiguration.swift\n//\n//  Created by Fabrizio Duroni on 06/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3AttachedPictureFrameConfiguration.swift","loc":{"lines":{"from":1,"to":8}}}}],["df519fcd-1086-4c52-b8db-bb95084c8994",{"pageContent":"class ID3AttachedPictureFrameConfiguration {\n    private let commonFrameCoverTypeBytePosition: [ID3PictureFormat: Int] = [\n        .png: 11,\n        .jpeg: 12\n    ]\n    private var frameCoverTypeBytePosition: [ID3Version: [ID3PictureFormat: Int]] = [\n        .version2: [\n            .png: 4,\n            .jpeg: 4\n        ]\n    ]\n    private let commonFrameHeaderMimeTypeHeader: [ID3PictureFormat: [UInt8]] = [\n        .png: [0x00] + [UInt8](\"image/png\".utf8) + [0x00, 0x03, 0x00],\n        .jpeg: [0x00] + [UInt8](\"image/jpeg\".utf8) + [0x00, 0x03, 0x00]\n    ]\n    private var frameHeaderMimeTypeHeader: [ID3Version: [ID3PictureFormat: [UInt8]]] = [\n        .version2: [\n            .png: [0x00] + [UInt8](\"PNG\".utf8) + [0x03, 0x00],\n            .jpeg: [0x00] + [UInt8](\"JPG\".utf8) + [0x03, 0x00]\n        ]\n    ]","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3AttachedPictureFrameConfiguration.swift","loc":{"lines":{"from":10,"to":30}}}}],["1c556bc1-6fd6-433f-b534-cd6407257065",{"pageContent":"init() {\n        self.frameCoverTypeBytePosition[.version3] = commonFrameCoverTypeBytePosition\n        self.frameCoverTypeBytePosition[.version4] = commonFrameCoverTypeBytePosition\n        self.frameHeaderMimeTypeHeader[.version3] = commonFrameHeaderMimeTypeHeader\n        self.frameHeaderMimeTypeHeader[.version4] = commonFrameHeaderMimeTypeHeader\n    }\n\n    func getHeaderMimeTypeFor(pictureFormat: ID3PictureFormat, version: ID3Version) -> [UInt8] {\n        return frameHeaderMimeTypeHeader[version]![pictureFormat]!\n    }\n\n    func getPictureTypeBytePositionFor(pictureFormat: ID3PictureFormat, version: ID3Version) -> Int {\n        return frameCoverTypeBytePosition[version]![pictureFormat]!\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3AttachedPictureFrameConfiguration.swift","loc":{"lines":{"from":32,"to":46}}}}],["8276f3da-a9ed-4040-baf1-791b3de017b3",{"pageContent":"//\n//  ID3Frame.swift\n//\n//  Created by Fabrizio Duroni on 31/12/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A class that represent an ID3Tag frame. It contains the common information of all the ID3 frames.\n */\npublic class ID3Frame {\n    /// The ID3 frame identifier as specified in the ID3 tag standard.\n    public internal(set) var id3Identifier: String?\n    /// The ID3 frame size as specified in the ID3 tag standard.\n    public internal(set) var size: Int?\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3Frame.swift","loc":{"lines":{"from":1,"to":18}}}}],["419c174b-cb5c-42f5-8168-ecb04214d1bd",{"pageContent":"//\n//  ID3FrameAttachedPicture.swift\n//\n//  Created by Fabrizio Duroni on 05/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A class used to represent an ID3 attached picture frame to be used in the ID3 tag.\n */\npublic class ID3FrameAttachedPicture: ID3Frame, Equatable, CustomDebugStringConvertible {\n    /// The image bytes as `Data`.\n    public let picture: Data\n    /// The ID3 type of the image (see `ID3PictureType`).\n    public let type: ID3PictureType\n    /// The file format. Only Jpeg and Png are supported by the standard (cross compatibility).\n    public let format: ID3PictureFormat\n    /// ID3FrameAttachedPicture debug description.\n    public var debugDescription: String {\n        return \"\\(type) \\(format)\"\n    }\n\n    /**\n     Init an ID3 attached picture frame.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameAttachedPicture.swift","loc":{"lines":{"from":1,"to":26}}}}],["2e1e55cf-a6f5-4bee-98cf-0b05837b2c6a",{"pageContent":"/**\n     Init an ID3 attached picture frame.\n\n     - parameter picture: the image bytes as `Data`.\n     - parameter type: the ID3 type of the attached picture. See `ID3PictureType`\n     for a complete list of the available picture types.\n     - parameter format: the format of the image. See `ID3PictureFormat`.\n     types.\n     */\n    public init(picture: Data, type: ID3PictureType, format: ID3PictureFormat) {\n        self.picture = picture\n        self.type = type\n        self.format = format\n    }\n\n    /**\n     Compare two AttachedPicture.\n\n     - parameter lhs: left side of compare operation.\n     - parameter rhs: right side of compare operation.\n\n     - returns: true if the attached pictures values are the same, else false.\n     */\n    public static func == (lhs: ID3FrameAttachedPicture, rhs: ID3FrameAttachedPicture) -> Bool {\n        return lhs.picture == rhs.picture && lhs.format == rhs.format && lhs.type == rhs.type\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameAttachedPicture.swift","loc":{"lines":{"from":25,"to":51}}}}],["09b2509b-0762-4576-a9a7-0be260c05968",{"pageContent":"//\n//  ID3FrameConfiguration.swift\n//\n//  Created by Fabrizio Duroni on 20/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":1,"to":8}}}}],["d5f0118e-0f55-4020-a326-511df88d992c",{"pageContent":"class ID3FrameConfiguration {\n    private let headerSizesInBytes: [ID3Version: Int] = [\n        .version2: 6,\n        .version3: 10,\n        .version4: 10\n    ]\n    private let sizeOffsetInBytes: [ID3Version: Int] = [\n        .version2: 2,\n        .version3: 4,\n        .version4: 4\n    ]\n    private let sizeMask: [ID3Version: UInt32] = [\n        .version2: 0x00FFFFFF,\n        .version3: 0xFFFFFFFF,\n        .version4: 0xFFFFFFFF\n    ]\n    private let identifierSizeInBytes: [ID3Version: Int] = [\n        .version2: 3,\n        .version3: 4,\n        .version4: 4\n    ]\n    private let commonFourLetterIdentifiers: [FrameType: [UInt8]] = [\n        .artist: [UInt8](\"TPE1\".utf8),\n        .composer: [UInt8](\"TCOM\".utf8),\n        .conductor: [UInt8](\"TPE3\".utf8),\n        .contentGrouping: [UInt8](\"TIT1\".utf8),\n        .copyright: [UInt8](\"TCOP\".utf8),\n        .encodedBy: [UInt8](\"TENC\".utf8),\n        .encoderSettings: [UInt8](\"TSSE\".utf8),\n        .fileOwner: [UInt8](\"TOWN\".utf8),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":10,"to":39}}}}],["5e4878e4-5d89-406d-8590-6bb601f9bf0c",{"pageContent":".encoderSettings: [UInt8](\"TSSE\".utf8),\n        .fileOwner: [UInt8](\"TOWN\".utf8),\n        .iTunesGrouping: [UInt8](\"GRP1\".utf8),\n        .lyricist: [UInt8](\"TEXT\".utf8),\n        .mixArtist: [UInt8](\"TPE4\".utf8),\n        .publisher: [UInt8](\"TPUB\".utf8),\n        .subtitle: [UInt8](\"TIT3\".utf8),\n        .albumArtist: [UInt8](\"TPE2\".utf8),\n        .title: [UInt8](\"TIT2\".utf8),\n        .album: [UInt8](\"TALB\".utf8),\n        .attachedPicture: [UInt8](\"APIC\".utf8),\n        .genre: [UInt8](\"TCON\".utf8),\n        .trackPosition: [UInt8](\"TRCK\".utf8),\n        .discPosition: [UInt8](\"TPOS\".utf8),\n        .beatsPerMinute: [UInt8](\"TBPM\".utf8),\n        .originalFilename: [UInt8](\"TOFN\".utf8),\n        .lengthInMilliseconds: [UInt8](\"TLEN\".utf8),\n        .unsyncronisedLyrics: [UInt8](\"USLT\".utf8),\n        .comment: [UInt8](\"COMM\".utf8),\n        .iTunesMovementName: [UInt8](\"MVNM\".utf8),\n        .iTunesMovementIndex: [UInt8](\"MVIN\".utf8),\n        .iTunesMovementCount: [UInt8](\"MVCN\".utf8),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":38,"to":59}}}}],["d272a43b-665c-4081-89a9-e129bf8bdbeb",{"pageContent":".iTunesMovementIndex: [UInt8](\"MVIN\".utf8),\n        .iTunesMovementCount: [UInt8](\"MVCN\".utf8),\n        .iTunesPodcastCategory: [UInt8](\"TCAT\".utf8),\n        .iTunesPodcastDescription: [UInt8](\"TDES\".utf8),\n        .iTunesPodcastID: [UInt8](\"TGID\".utf8),\n        .iTunesPodcastKeywords: [UInt8](\"TKWD\".utf8)\n    ]\n    private var identifiers: [ID3Version: [FrameType: [UInt8]]] = [\n        .version2: [\n            .artist: [UInt8](\"TP1\".utf8),\n            .composer: [UInt8](\"TCM\".utf8),\n            .conductor: [UInt8](\"TP3\".utf8),\n            .contentGrouping: [UInt8](\"TT1\".utf8),\n            .copyright: [UInt8](\"TCR\".utf8),\n            .encodedBy: [UInt8](\"TEN\".utf8),\n            .encoderSettings: [UInt8](\"TSS\".utf8),\n            .lyricist: [UInt8](\"TXT\".utf8),\n            .mixArtist: [UInt8](\"TP4\".utf8),\n            .publisher: [UInt8](\"TPB\".utf8),\n            .subtitle: [UInt8](\"TT3\".utf8),\n            .albumArtist: [UInt8](\"TP2\".utf8),\n            .title: [UInt8](\"TT2\".utf8),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":58,"to":79}}}}],["d46196e4-aff2-4188-b7c4-beaf2ee2409d",{"pageContent":".albumArtist: [UInt8](\"TP2\".utf8),\n            .title: [UInt8](\"TT2\".utf8),\n            .album: [UInt8](\"TAL\".utf8),\n            .attachedPicture: [UInt8](\"PIC\".utf8),\n            .recordingDayMonth: [UInt8](\"TDA\".utf8),\n            .recordingYear: [UInt8](\"TYE\".utf8),\n            .recordingHourMinute: [UInt8](\"TIM\".utf8),\n            .genre: [UInt8](\"TCO\".utf8),\n            .trackPosition: [UInt8](\"TRK\".utf8),\n            .discPosition: [UInt8](\"TPA\".utf8),\n            .beatsPerMinute: [UInt8](\"TBP\".utf8),\n            .originalFilename: [UInt8](\"TOF\".utf8),\n            .lengthInMilliseconds: [UInt8](\"TLE\".utf8),\n            .sizeInBytes: [UInt8](\"TSI\".utf8),\n            .unsyncronisedLyrics: [UInt8](\"ULT\".utf8),\n            .comment: [UInt8](\"COM\".utf8)\n        ],\n        .version3: [\n            .recordingDayMonth: [UInt8](\"TDAT\".utf8),\n            .recordingYear: [UInt8](\"TYER\".utf8),\n            .recordingHourMinute: [UInt8](\"TIME\".utf8),\n            .sizeInBytes: [UInt8](\"TSIZ\".utf8)","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":78,"to":99}}}}],["ef0fdcb7-f746-442e-9e0e-aeb219a5c986",{"pageContent":".recordingHourMinute: [UInt8](\"TIME\".utf8),\n            .sizeInBytes: [UInt8](\"TSIZ\".utf8)\n        ],\n        .version4: [\n            .recordingDateTime: [UInt8](\"TDRC\".utf8)\n        ]\n    ]\n    private let commonNamesForIdentifiers: [String: FrameType] = [\n        \"TPE1\": .artist,\n        \"TCOM\": .composer,\n        \"TPE3\": .conductor,\n        \"TIT1\": .contentGrouping,\n        \"TCOP\": .copyright,\n        \"TENC\": .encodedBy,\n        \"TSSE\": .encoderSettings,\n        \"TOWN\": .fileOwner,\n        \"GRP1\": .iTunesGrouping,\n        \"TEXT\": .lyricist,\n        \"TPE4\": .mixArtist,\n        \"TPUB\": .publisher,\n        \"TIT3\": .subtitle,\n        \"TPE2\": .albumArtist,\n        \"TIT2\": .title,\n        \"TALB\": .album,\n        \"APIC\": .attachedPicture,\n        \"TCON\": .genre,\n        \"TRCK\": .trackPosition,\n        \"TPOS\": .discPosition,\n        \"MVNM\": .iTunesMovementName,\n        \"MVIN\": .iTunesMovementIndex,\n        \"MVCN\": .iTunesMovementCount,\n        \"TCAT\": .iTunesPodcastCategory,","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":98,"to":129}}}}],["2f8e31b9-9321-40aa-ad13-6dc27c9cda86",{"pageContent":"\"MVIN\": .iTunesMovementIndex,\n        \"MVCN\": .iTunesMovementCount,\n        \"TCAT\": .iTunesPodcastCategory,\n        \"TDES\": .iTunesPodcastDescription,\n        \"TGID\": .iTunesPodcastID,\n        \"TKWD\": .iTunesPodcastKeywords,\n        \"USLT\": .unsyncronisedLyrics,\n        \"COMM\": .comment,\n        \"TBPM\": .beatsPerMinute,\n        \"TOFN\": .originalFilename,\n        \"TLEN\": .lengthInMilliseconds\n    ]\n    private var nameForIdentifier: [ID3Version: [String: FrameType]] = [\n        .version2: [\n            \"TP1\": .artist,\n            \"TCM\": .composer,\n            \"TP3\": .conductor,\n            \"TT1\": .contentGrouping,\n            \"TCR\": .copyright,\n            \"TEN\": .encodedBy,\n            \"TSS\": .encoderSettings,\n            \"TXT\": .lyricist,\n            \"TP4\": .mixArtist,\n            \"TPB\": .publisher,\n            \"TT3\": .subtitle,\n            \"TP2\": .albumArtist,\n            \"TT2\": .title,\n            \"TAL\": .album,\n            \"PIC\": .attachedPicture,\n            \"TDA\": .recordingDayMonth,","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":127,"to":156}}}}],["987f9135-fa7b-4680-b28f-265c63cfbf99",{"pageContent":"\"TAL\": .album,\n            \"PIC\": .attachedPicture,\n            \"TDA\": .recordingDayMonth,\n            \"TYE\": .recordingYear,\n            \"TIM\": .recordingHourMinute,\n            \"TCO\": .genre,\n            \"TRK\": .trackPosition,\n            \"TPA\": .discPosition,\n            \"ULT\": .unsyncronisedLyrics,\n            \"COM\": .comment,\n            \"TBP\": .beatsPerMinute,\n            \"TOF\": .originalFilename,\n            \"TLE\": .lengthInMilliseconds,\n            \"TSI\": .sizeInBytes\n        ],\n        .version3: [\n            \"TDAT\": .recordingDayMonth,\n            \"TYER\": .recordingYear,\n            \"TIME\": .recordingHourMinute,\n            \"TSIZ\": .sizeInBytes\n        ],\n        .version4: [\n            \"TDRC\": .recordingDateTime\n        ]\n    ]\n    private let encodingPositionInBytes: [ID3Version: Int] = [\n        .version2: 6,\n        .version3: 10,\n        .version4: 10\n    ]\n    private let encodingSizeInBytes: Int = 1\n    private let encodingByte: [ID3Version: [ID3StringEncoding: [UInt8]]] = [","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":154,"to":185}}}}],["356581c1-fc83-42e1-ab14-40430c3391fd",{"pageContent":"]\n    private let encodingSizeInBytes: Int = 1\n    private let encodingByte: [ID3Version: [ID3StringEncoding: [UInt8]]] = [\n        .version2: [\n            .ISO88591: [0x00],\n            .UTF16: [0x01]\n        ],\n        .version3: [\n            .ISO88591: [0x00],\n            .UTF16: [0x01]\n        ],\n        .version4: [\n            .ISO88591: [0x00],\n            .UTF16: [0x01],\n            .UTF8: [0x03]\n        ]\n    ]","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":183,"to":199}}}}],["e489a55d-73cf-47e7-b4ad-b2b35456179f",{"pageContent":"init() {\n        self.identifiers[.version3] = self.identifiers[.version3]?.merging(commonFourLetterIdentifiers) { $1 }\n        self.identifiers[.version4] = self.identifiers[.version4]?.merging(commonFourLetterIdentifiers) { $1 }\n        self.nameForIdentifier[.version3] = self.nameForIdentifier[.version3]?.merging(commonNamesForIdentifiers) { $1 }\n        self.nameForIdentifier[.version4] = self.nameForIdentifier[.version4]?.merging(commonNamesForIdentifiers) { $1 }\n    }\n\n    func headerSizeFor(version: ID3Version) -> Int {\n        return headerSizesInBytes[version]!\n    }\n\n    func sizeOffsetFor(version: ID3Version) -> Int {\n        return sizeOffsetInBytes[version]!\n    }\n\n    func sizeMaskFor(version: ID3Version) -> UInt32 {\n        return sizeMask[version]!\n    }\n\n    func identifierSizeFor(version: ID3Version) -> Int {\n        return identifierSizeInBytes[version]!\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":201,"to":222}}}}],["3a92013d-7a09-4dee-845d-864c7defa1da",{"pageContent":"func identifierSizeFor(version: ID3Version) -> Int {\n        return identifierSizeInBytes[version]!\n    }\n\n    func identifierFor(frameType: FrameType, version: ID3Version) -> [UInt8] {\n        return identifiers[version]![frameType]!\n    }\n\n    func frameTypeFor(identifier: String, version: ID3Version) -> FrameType {\n        return nameForIdentifier[version]![identifier] ?? .invalid\n    }\n\n    func encodingSize() -> Int {\n        return encodingSizeInBytes\n    }\n\n    func encodingPositionFor(version: ID3Version) -> Int {\n        return encodingPositionInBytes[version]!\n    }\n\n    func encodingByteFor(version: ID3Version, encoding: ID3StringEncoding) -> [UInt8] {\n        return encodingByte[version]![encoding]!\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameConfiguration.swift","loc":{"lines":{"from":220,"to":243}}}}],["994061ad-f9f5-4bd7-9a55-89ab0c21e2f0",{"pageContent":"//\n//  ID3FrameGenre.swift\n//\n//  Created by Fabrizio Duroni on 05/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A class used to represent an ID3 genre frame to be used in the ID3 tag.\n */\npublic class ID3FrameGenre: ID3Frame, Equatable, CustomDebugStringConvertible {\n    /// The genre identifier specified as an ID3 v1 Genre (see ID3Genre).\n    public var identifier: ID3Genre?\n    /// A generic genre description. Useful to build your own genres.\n    public var description: String?\n    /// ID3FrameGenre description, useful for debug.\n    public var debugDescription: String {\n        return \"\\(String(describing: identifier)) - \\(String(describing: description))\"\n    }\n\n    /**\n     Init a ID3 genre frame.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameGenre.swift","loc":{"lines":{"from":1,"to":24}}}}],["cc59c45b-d392-4164-85e6-4e4bd3b000cc",{"pageContent":"/**\n     Init a ID3 genre frame.\n\n     - parameter genre: an ID3Genre to be setted in the ID3 tag.\n     - parameter description: a generic genre description. Useful to build your own genres.\n     */\n    public init(genre: ID3Genre?, description: String?) {\n        self.identifier = genre\n        self.description = description\n    }\n\n    /**\n     Compare two Genre.\n\n     - parameter lhs: left side of compare operation.\n     - parameter rhs: right side of compare operation.\n\n     - returns: true if the genre values are the same, else false.\n     */\n    public static func == (lhs: ID3FrameGenre, rhs: ID3FrameGenre) -> Bool {\n        return lhs.description == rhs.description && lhs.identifier == rhs.identifier\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameGenre.swift","loc":{"lines":{"from":23,"to":45}}}}],["1e987e9e-d49b-4901-804e-7edffc31a519",{"pageContent":"//\n//  ID3FramePartOfTotal.swift\n//\n//  Created by Fabrizio Duroni on 07/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A class used to represent an ID3 track/disc position in the original recordings frame  in the ID3 tag.\n */\npublic class ID3FramePartOfTotal: ID3Frame, Equatable, CustomDebugStringConvertible {\n    /// The position of the track/disc.\n    public var part: Int\n    /// The total number of tracks/discs in recordings.\n    public var total: Int?\n    /// TrackPositionInSet description, useful for debug.\n    public var debugDescription: String {\n        return \"\\(part) of \\(total != nil ? String(total!) : \"-\")\"\n    }\n\n    /**\n     Init an ID3 track position frame.\n\n     - parameter part: the index of the track/disc.\n     - parameter total: the total tracks/discs of the recordings.\n     */\n    public init(part: Int, total: Int?) {\n        self.part = part\n        self.total = total\n    }\n\n    /**\n     Compare two TrackPositionInSet.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FramePartofTotal.swift","loc":{"lines":{"from":1,"to":35}}}}],["d00ee2a4-584a-43db-a97a-aa0fda5d6db5",{"pageContent":"/**\n     Compare two TrackPositionInSet.\n\n     - parameter lhs: left side of compare operation.\n     - parameter rhs: right side of compare operation.\n\n     - returns: true if the track positions values are the same, else false.\n     */\n    public static func == (lhs: ID3FramePartOfTotal, rhs: ID3FramePartOfTotal) -> Bool {\n        return lhs.part == rhs.part && lhs.total == rhs.total\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FramePartofTotal.swift","loc":{"lines":{"from":34,"to":45}}}}],["2e95335f-9b3d-4c94-9c3c-28ab031832d2",{"pageContent":"//\n//  RecordingDateTime.swift\n//\n//  Created by Fabrizio Duroni on 26/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A struct used to represent the recording date for the ID3 recording date time frame.\n */\npublic struct RecordingDate: CustomDebugStringConvertible {\n    /// Recording day of the song.\n    public var day: Int?\n    /// Recording month of the song.\n    public var month: Int?\n    /// Recording year of the song.\n    public var year: Int?\n    /// RecordingDate description, useful for debug.\n    public var debugDescription: String {\n        return \"\\(day ?? 0) \\(month ?? 0) \\(year ?? 0)\"\n    }\n\n    /**\n     Init a recording date.\n     \n     - parameter day: the recording day of the song.\n     - parameter month: the recording month of the song.\n     - parameter year: the recording year of the song.\n     */\n    public init(day: Int?, month: Int?, year: Int?) {\n        self.day = day\n        self.month = month\n        self.year = year\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameRecordingDateTime.swift","loc":{"lines":{"from":1,"to":37}}}}],["d4b3e52b-c9c6-4846-8e7e-601d4272ddc2",{"pageContent":"/**\n A struct used to represent the recording time for the ID3 recording date time frame.\n */\npublic struct RecordingTime: CustomDebugStringConvertible {\n    /// Recording hour of the song.\n    public var hour: Int?\n    /// Recording seconds of the song.\n    public var minute: Int?\n    /// RecordingTime description, useful for debug.\n    public var debugDescription: String {\n        return \"\\(hour ?? 0) \\(minute ?? 0)\"\n    }\n\n    /**\n     Init a recording time.\n     \n     - parameter hour: the recording hour of the song.\n     - parameter minute: the recording minute of the song.\n     */\n    public init(hour: Int?, minute: Int?) {\n        self.hour = hour\n        self.minute = minute\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameRecordingDateTime.swift","loc":{"lines":{"from":39,"to":62}}}}],["b607da85-6288-43e6-b83b-c83c608e3ffe",{"pageContent":"/**\n A struct used to represent the recording date and time for the ID3 recording date time frame.\n */\npublic struct RecordingDateTime: CustomDebugStringConvertible {\n    /// Recording date of the song.\n    public var date: RecordingDate?\n    /// Recording time of the song.\n    public var time: RecordingTime?\n    /// RecordingDateTime description, useful for debug.\n    public var debugDescription: String {\n        return \"Date: (\\(date?.debugDescription ?? \"-\") - Time: (\\(time?.debugDescription ?? \"-\"))\"\n    }\n\n    /**\n     Init a recording date time.\n     \n     - parameter date: the recording date of the song.\n     - parameter time: the recording time of the song.\n     */\n    public init(date: RecordingDate?, time: RecordingTime?) {\n        self.date = date\n        self.time = time\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameRecordingDateTime.swift","loc":{"lines":{"from":64,"to":87}}}}],["22cb2eee-71ee-496a-b885-5a43c025aae2",{"pageContent":"/**\n A class used to represent an ID3 recording date time frame to be used in the ID3 tag.\n Valid only for ID3 tag version 2.4.\n */\npublic class ID3FrameRecordingDateTime: ID3Frame {\n    /// The recordin date time information. This field contains date and time of the recording.\n    public let recordingDateTime: RecordingDateTime\n\n    /**\n     Init an ID3 recording date time frame.\n     \n     - parameter recordingDateTime: a RecordingDateTime struct.\n     */\n    public init(recordingDateTime: RecordingDateTime) {\n        self.recordingDateTime = recordingDateTime\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameRecordingDateTime.swift","loc":{"lines":{"from":89,"to":105}}}}],["f5efce72-b3a0-428a-a6d6-c878bb00e680",{"pageContent":"//\n//  ID3FrameRecordingDayMonth.swift\n//\n//  Created by Fabrizio Duroni on 02/01/2019.\n//  2019 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A class used to represent an ID3 recording day month frame to be used in the ID3 tag.\n Valid only for ID3 tag version 2.3 and 2.2.\n */\npublic class ID3FrameRecordingDayMonth: ID3Frame, CustomDebugStringConvertible {\n    /// Recording day of the song.\n    public let day: Int?\n    /// Recording month of the song.\n    public let month: Int?\n    /// ID3FrameRecordingDayMonth description, useful for debug.\n    public var debugDescription: String {\n        return \"\\(day ?? 0) \\(month ?? 0)\"\n    }\n\n    /**\n     Init an ID3 recording day month  frame.\n     \n     - parameter day: a day as int.\n     - parameter month: a month as int.\n     */\n    public init(day: Int?, month: Int?) {\n        self.day = day\n        self.month = month\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameRecordingDayMonth.swift","loc":{"lines":{"from":1,"to":34}}}}],["7d095acd-6fe3-4d9e-b771-06eb13d70a64",{"pageContent":"//\n//  ID3FrameRecordingHourMinute.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 02.01.19.\n//  Copyright © 2019 Fabrizio Duroni. All rights reserved.\n//\n\nimport Foundation\n\n/**\n A class used to represent an ID3 recording hour minute frame to be used in the ID3 tag.\n Valid only for ID3 tag version 2.3 and 2.2.\n */\npublic class ID3FrameRecordingHourMinute: ID3Frame, CustomDebugStringConvertible {\n    /// Recording hour of the song.\n    public let hour: Int?\n    /// Recording seconds of the song.\n    public let minute: Int?\n    /// ID3FrameRecordingHourMinute description, useful for debug.\n    public var debugDescription: String {\n        return \"\\(hour ?? 0) \\(minute ?? 0)\"\n    }\n\n    /**\n     Init an ID3 recording hour minute frame.\n     \n     - parameter hour: the recording hour of the song.\n     - parameter minute: the recording minute of the song.\n     */\n    public init(hour: Int?, minute: Int?) {\n        self.hour = hour\n        self.minute = minute\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameRecordingHourMinute.swift","loc":{"lines":{"from":1,"to":35}}}}],["e35878cf-e0a0-4dad-a36f-63777181f967",{"pageContent":"//\n//  ID3FrameWithIntegerContent.swift\n//  ID3TagEditor\n//\n//  Created by Nolaine Crusher on 3/2/20.\n//  Copyright © 2020 Fabrizio Duroni. All rights reserved.\n//\n\nimport Foundation\n\n/**\n A class used to represent an ID3 frame with an integer value.\n */\npublic class ID3FrameWithIntegerContent: ID3Frame, CustomDebugStringConvertible {\n    /// the value being returned.\n    public let value: Int?\n    /// ID3FrameWithIntegerContent description, useful for debug.\n    public var debugDescription: String {\n        return \"\\(value ?? 0)\"\n    }\n\n    /**\n     Init an ID3 recording integer frame.\n     \n     - parameter value: the value as int.\n     */\n    public init(value: Int?) {\n        self.value = value\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameWithIntegerContent.swift","loc":{"lines":{"from":1,"to":30}}}}],["2d3e9485-0d3e-4fae-8c2a-3bcc04283dbb",{"pageContent":"//\n//  ID3FrameWithLocalizedContent.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 09.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameWithLocalizedContent.swift","loc":{"lines":{"from":1,"to":9}}}}],["dffeec34-bca6-48b0-9d70-0829ddb57a0b",{"pageContent":"import Foundation\n\n/**\n A class used to represent an ID3 frame that contains localized content to be used in the ID3 tag.\n Only a subset of the ID3 frames support localized content. See the various ID3 tag builders to\n understand which frames admit a locallized content.\n See the official id3 documentation for a full list of frame with localized content.\n */\npublic class ID3FrameWithLocalizedContent: ID3FrameWithStringContent, CustomDebugStringConvertible {\n    /// The language of the lyrics contained in the frame\n    public let language: ID3FrameContentLanguage\n    /// A short description of the lyrics contained in the frame\n    public let contentDescription: String\n    /// ID3FrameAttachedPicture debug description.\n    public var debugDescription: String {\n        return \"\"\"\n            language: \\(language)\n            contentDescription: \\(contentDescription)\n            content: \\(content)\n            \"\"\"\n    }\n\n    /**\n     Init an ID3 localized string content frame.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameWithLocalizedContent.swift","loc":{"lines":{"from":9,"to":32}}}}],["f8d46444-0b8a-4357-8889-76bc328d2630",{"pageContent":"/**\n     Init an ID3 localized string content frame.\n\n     - parameter language: the language of the content. See `ID3PictureType`\n     for a complete list of the available languages.\n     - parameter contentDescription: a description of the content of the frame as string.\n     - parameter content: the content.of the frame (see ID3FrameContentLanguage).\n     types.\n     */\n    public init(language: ID3FrameContentLanguage, contentDescription: String, content: String) {\n        self.language = language\n        self.contentDescription = contentDescription\n        super.init(content: content)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameWithLocalizedContent.swift","loc":{"lines":{"from":31,"to":45}}}}],["aab36029-f216-454e-9fef-c0b2ecafb675",{"pageContent":"//\n//  ID3FrameWithStringContent.swift\n//\n//  Created by Fabrizio Duroni on 31/12/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A class used to represent an ID3  frame with generic string data  in the ID3 tag.\n This class is used to represent all the ID3 frames that contains plain string as data (e.g. Artist, Album, Title).\n*/\npublic class ID3FrameWithStringContent: ID3Frame {\n    /// The content as string.\n    public let content: String\n\n    /**\n     Init an ID3 frame with string content.\n\n     - parameter content: the content of the ID3 frame.\n     */\n    public init(content: String) {\n        self.content = content\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3FrameWithStringContent.swift","loc":{"lines":{"from":1,"to":26}}}}],["1a37e33c-77e0-43b9-af13-239554aa9189",{"pageContent":"//\n//  ID3Genre.swift\n//\n//  Created by Fabrizio Duroni on 04/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3Genre.swift","loc":{"lines":{"from":1,"to":8}}}}],["9d32ab23-feb1-4bb5-9518-3afd7d6e0781",{"pageContent":"/**\n An enum that contains the genres supported by the ID3 standard using specific identifiers.\n */\npublic enum ID3Genre: Int, Equatable, Hashable, CaseIterable {\n    /// Blues genre.\n    case blues = 0\n    /// Classic rock genre.\n    case classicRock = 1\n    /// Country genre.\n    case country = 2\n    /// Dance genre.\n    case dance = 3\n    /// Disco genre.\n    case disco = 4\n    /// Funk genre.\n    case funk = 5\n    /// Grunge genre.\n    case grunge = 6\n    /// Hip hop genre.\n    case hipHop = 7\n    /// Jazz genre.\n    case jazz = 8\n    /// Metal genre.\n    case metal = 9\n    /// New age genre.\n    case newAge = 10\n    /// Oldies genre.\n    case oldies = 11\n    /// Other genre.\n    case other = 12\n    /// Pop genre.\n    case pop = 13\n    /// R&B genre.\n    case rAndB = 14\n    /// Rap genre.\n    case rap = 15\n    /// Reggae genre.\n    case reggae = 16\n    /// Rock genre.\n    case rock = 17\n    /// Techno genre.\n    case techno = 18\n    /// Industrial genre.\n    case industrial = 19","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3Genre.swift","loc":{"lines":{"from":10,"to":53}}}}],["8c6edd5c-2fe6-484a-94f8-37a981a1543b",{"pageContent":"case rock = 17\n    /// Techno genre.\n    case techno = 18\n    /// Industrial genre.\n    case industrial = 19\n    /// Alternative genre.\n    case alternative = 20\n    /// Ska genre.\n    case ska = 21\n    /// Death metal genre.\n    case deathMetal = 22\n    /// Pranks genre.\n    case pranks = 23\n    /// Soundtrack genre.\n    case soundtrack = 24\n    /// Euro techno genre.\n    case euroTechno = 25\n    /// Ambient genre.\n    case ambient = 26\n    /// Tip hop genre.\n    case tripHop = 27\n    /// vocal genre.\n    case vocal = 28\n    /// Jazz funk genre.\n    case jazzFunk = 29\n    /// Fusion genre.\n    case fusion = 30\n    /// Trance genre.\n    case trance = 31\n    /// Classical genre.\n    case classical = 32\n    /// Instrumental genre.\n    case instrumental = 33\n    /// Acid genre.\n    case acid = 34\n    /// House genre.\n    case house = 35\n    /// Game genre.\n    case game = 36\n    /// Soundclip genre.\n    case soundClip = 37\n    /// Gospel genre.\n    case gospel = 38\n    /// Noise genre.\n    case noise = 39","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3Genre.swift","loc":{"lines":{"from":49,"to":93}}}}],["e7e2205a-63d9-40f7-ab46-ae0945429bf0",{"pageContent":"case soundClip = 37\n    /// Gospel genre.\n    case gospel = 38\n    /// Noise genre.\n    case noise = 39\n    /// Altern rock genre.\n    case alternRock = 40\n    /// Bass genre.\n    case bass = 41\n    /// Soul genre.\n    case soul = 42\n    /// Punk genre.\n    case punk = 43\n    /// Space genre.\n    case space = 44\n    /// Meditative genre.\n    case meditative = 45\n    /// Instrumental pop genre.\n    case instrumentalPop = 46\n    /// Instrumental rock genre.\n    case instrumentalRock = 47\n    /// Ethnic genre.\n    case ethnic = 48\n    /// Gothic genre.\n    case gothic = 49\n    /// Darkwave genre.\n    case darkwave = 50\n    /// TechnoIndustrial genre.\n    case technoIndustrial = 51\n    /// Electronic genre.\n    case electronic = 52\n    /// Pop folk genre.\n    case popFolk = 53\n    /// Eurodance genre.\n    case eurodance = 54\n    /// Dream genre.\n    case dream = 55\n    /// Souther rock genre.\n    case southernRock = 56\n    /// Comedy genre.\n    case comedy = 57\n    /// Cult genre.\n    case cult = 58","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3Genre.swift","loc":{"lines":{"from":89,"to":131}}}}],["4b9d2003-0248-4b4f-a3d3-8e549b4cee6e",{"pageContent":"case southernRock = 56\n    /// Comedy genre.\n    case comedy = 57\n    /// Cult genre.\n    case cult = 58\n    /// Gangsta genre.\n    case gangsta = 59\n    /// Top 40 genre.\n    case top40 = 60\n    /// Christian rap genre.\n    case christianRap = 61\n    /// Pop funk genre.\n    case popFunk = 62\n    /// Jungle genre.\n    case jungle = 63\n    /// Native american genre.\n    case nativeAmerican = 64\n    /// Cabaret genre.\n    case cabaret = 65\n    /// New wave genre.\n    case newWave = 66\n    /// Psychadelic genre.\n    case psychadelic = 67\n    /// Rave genre.\n    case rave = 68\n    /// Showtunes genre.\n    case showtunes = 69\n    /// Trailer genre.\n    case trailer = 70\n    /// Lofi genre.\n    case loFi = 71\n    /// Tribal genre.\n    case tribal = 72\n    /// Acid punk genre.\n    case acidPunk = 73\n    /// Acid jazz genre.\n    case acidJazz = 74\n    /// Polka genre.\n    case polka = 75\n    /// Retro genre.\n    case retro = 76\n    /// Musical genre.\n    case musical = 77\n    /// Rock and roll genre.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3Genre.swift","loc":{"lines":{"from":127,"to":170}}}}],["3ef50559-2d3a-4c6f-8395-442cfd5e50e3",{"pageContent":"/// Retro genre.\n    case retro = 76\n    /// Musical genre.\n    case musical = 77\n    /// Rock and roll genre.\n    case rockAndRoll = 78\n    /// Hard rock genre.\n    case hardRock = 79\n    /// Remix genre.\n    case remix = 80\n    /// Cover genre.\n    case cover = 81\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3Genre.swift","loc":{"lines":{"from":166,"to":178}}}}],["2fe6ddd1-09b3-4fa3-85a6-6759ed0db4a5",{"pageContent":"//\n//  ID3PictureFormat.swift\n//\n//  Created by Fabrizio Duroni on 09/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n The attached picture format supported by the ID3 tag.\n */\npublic enum ID3PictureFormat: Equatable, Hashable, CaseIterable {\n    /// Jpeg image.\n    case jpeg\n    /// Png image.\n    case png\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3PictureFormat.swift","loc":{"lines":{"from":1,"to":18}}}}],["f72f4722-455d-4c27-8528-503cbbc6c509",{"pageContent":"//\n//  ID3PictureType.swift\n//\n//  Created by Fabrizio Duroni on 04/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3PictureType.swift","loc":{"lines":{"from":1,"to":8}}}}],["bdd69200-1337-4971-b586-327dc68aacf2",{"pageContent":"/**\n An enum that describes the ID3 picture type supported.\n */\npublic enum ID3PictureType: UInt8, Equatable, Hashable, CaseIterable {\n    /// Other image.\n    case other = 0x00\n    /// File icon image.\n    case fileIcon = 0x01\n    /// Other file icon image.\n    case otherFileIcon = 0x02\n    /// Front cover image.\n    case frontCover = 0x03\n    /// Back cover image.\n    case backCover = 0x04\n    /// LeafketPage image.\n    case leafletPage = 0x05\n    /// Media image.\n    case media = 0x06\n    /// Lead artist image image.\n    case leadArtistLeadPerformerSoloist = 0x07\n    /// Artist image image.\n    case artistPerformer = 0x08\n    /// Conductor image.\n    case conductor = 0x09\n    /// Orchestra/band image.\n    case bandOrchestra = 0x0A\n    /// Composer image.\n    case composer = 0x0B\n    /// Lyricist Text Writer image.\n    case lyricistTextWriter = 0x0C\n    /// Recording location image.\n    case recordingLocation = 0x0D\n    /// During recording image.\n    case duringRecording = 0x0E\n    /// Performance image.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3PictureType.swift","loc":{"lines":{"from":10,"to":44}}}}],["53ba7c00-ec80-4dd0-bc13-6de588d1eb73",{"pageContent":"case recordingLocation = 0x0D\n    /// During recording image.\n    case duringRecording = 0x0E\n    /// Performance image.\n    case duringPerformance = 0x0F\n    /// Movie image.\n    case movieVideoScreenCapture = 0x10\n    /// ABrightColouredFish image.\n    case aBrightColouredFish = 0x11\n    /// Illustration image.\n    case illustration = 0x12\n    /// Band logo image.\n    case bandArtistLogotype = 0x13\n    /// Publisher logo image.\n    case publisherStudioLogotype = 0x14\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Frame/ID3PictureType.swift","loc":{"lines":{"from":41,"to":56}}}}],["89411026-4680-4ee4-95eb-9e9b8aa8585e",{"pageContent":"//\n//  ID3TagEditor.swift\n//\n//  Created by Fabrizio Duroni on 19/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A class to edit the ID3 tag of an mp3 file.\n */\npublic class ID3TagEditor {\n    private let id3TagParser: ID3TagParser\n    private let mp3FileReader: Mp3FileReader\n    private let mp3FileWriter: Mp3FileWriter\n    private let mp3WithID3TagBuilder: Mp3WithID3TagBuilder\n\n    /**\n     Init the ID3TagEditor.\n     */\n    public init() {\n        self.id3TagParser = ID3TagParserFactory.make()\n        self.mp3FileReader = Mp3FileReaderFactory.make()\n        self.mp3FileWriter = Mp3FileWriter()\n        self.mp3WithID3TagBuilder = Mp3WithID3TagBuilder(id3TagCreator: ID3TagCreatorFactory.make(),\n                                                         id3TagConfiguration: ID3TagConfiguration())\n    }\n\n    /**\n     Read the ID3 tag contained in the mp3 file.\n\n     - parameter path: path of the mp3 file to be parsed.","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/ID3TagEditor.swift","loc":{"lines":{"from":1,"to":33}}}}],["932c3e83-bc55-4d23-83a2-720f41045c8f",{"pageContent":"/**\n     Read the ID3 tag contained in the mp3 file.\n\n     - parameter path: path of the mp3 file to be parsed.\n\n     - returns: an ID3 tag or nil, if a tag doesn't exists in the file.\n     \n     - throws: Could throw `InvalidFileFormat` if an mp3 file doesn't exists at the specified path.\n     Could throw `CorruptedFile` if the file is corrupted.\n     */\n    public func read(from path: String) throws -> ID3Tag? {\n        let mp3 = try mp3FileReader.readID3TagFrom(path: path)\n        return try self.id3TagParser.parse(mp3: mp3)\n    }\n\n    /**\n     Read the ID3 tag contained in the mp3 file passed as `Data`.\n     \n     - parameter mp3: mp3 file opened as Data.\n     \n     - returns: an ID3 tag or nil, if a tag doesn't exists in the file.\n     \n     - throws: Could throw `CorruptedFile` if the file is corrupted.\n     */\n    public func read(mp3: Data) throws -> ID3Tag? {\n        return try self.id3TagParser.parse(mp3: mp3)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/ID3TagEditor.swift","loc":{"lines":{"from":30,"to":56}}}}],["b76d70a1-24c7-4b4b-be87-4879b76e6ae6",{"pageContent":"/**\n     Writes the mp3 to a new file or overwrite it with the new ID3 tag.\n\n     - parameter tag: the ID3 tag to be written in the mp3 file.\n     - parameter path: path of the mp3 file to which the id3 tag will be added.\n     - parameter newPath: path where the mp3 file with the new tag will be written.\n     **If nil, the mp3 file will be overwritten**.\n     If nothing is passed, the file will be overwritten at its current location.\n\n     - throws: Could throw `TagTooBig` (tag size > 256 MB) or `InvalidTagData` (no data set to be written in the\n     ID3 tag).\n     */\n    public func write(tag: ID3Tag, to path: String, andSaveTo newPath: String? = nil) throws {\n        let mp3 = try mp3FileReader.readFileFrom(path: path)\n        let currentTag = try self.id3TagParser.parse(mp3: mp3)\n        let mp3WithId3Tag = try mp3WithID3TagBuilder.build(mp3: mp3, newId3Tag: tag, currentId3Tag: currentTag)\n        try mp3FileWriter.write(mp3: mp3WithId3Tag, path: newPath ?? path)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/ID3TagEditor.swift","loc":{"lines":{"from":58,"to":75}}}}],["b4efdc15-acfe-4477-992c-42670363742e",{"pageContent":"/**\n     Write the ID3 tag passed as parameter to the mp3 file passed as `Data`.\n     \n     - parameter tag: the ID3 tag to be written in the mp3.\n     - parameter mp3: the mp3 on which we want to write the new tag.\n     \n     - returns: a new `Data` object that contains the mp3 data with the new tag.\n     \n     - throws: Could throw `TagTooBig` (tag size > 256 MB) or `InvalidTagData` (no data set to be written in the\n     ID3 tag).\n     */\n    public func write(tag: ID3Tag, mp3: Data) throws -> Data {\n        let currentTag = try self.id3TagParser.parse(mp3: mp3)\n        let mp3WithId3Tag = try mp3WithID3TagBuilder.build(mp3: mp3, newId3Tag: tag, currentId3Tag: currentTag)\n        return mp3WithId3Tag\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/ID3TagEditor.swift","loc":{"lines":{"from":77,"to":93}}}}],["32b304b2-c02c-4f24-adbb-d381df8a7109",{"pageContent":"//\n//  ID3TagEditorError.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\n/**\n ID3TagEditor errors.\n */\npublic enum ID3TagEditorError: Error {\n    /// Error generated when an invalid file format is passed to the ID3TagEditor.\n    case invalidFileFormat\n    /// Error generated when the tag size exceed 256 MB.\n    case tagTooBig\n    /// Error generated when there's not valid data in the tag.\n    case invalidTagData\n    /// Error generated when the file is corrupted.\n    case corruptedFile\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/ID3TagEditorError.swift","loc":{"lines":{"from":1,"to":20}}}}],["70880731-7ed6-43a7-8b74-381aaad42433",{"pageContent":"//\n//  ID3Version.swift\n//\n//  Created by Fabrizio Duroni on 27/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n Enum that contains the version supported by ID3TagEditor.\n */\npublic enum ID3Version: UInt8, Comparable, Equatable, Hashable, CaseIterable {\n    /// ID3 2.2 version.\n    case version2 = 2\n    /// ID3 2.3 version.\n    case version3 = 3\n    /// ID3 2.4 version.\n    case version4 = 4\n\n    /**\n     Compare two version values.\n     \n     - parameter lhs: left side of compare operation.\n     - parameter rhs: right side of compare operation.\n     \n     - returns: true if the version value are the same, else false.\n     */\n    public static func < (lhs: ID3Version, rhs: ID3Version) -> Bool {\n        return lhs.rawValue < rhs.rawValue\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/ID3Version.swift","loc":{"lines":{"from":1,"to":32}}}}],["f96cd126-9b72-4835-b860-f7abf7b31de6",{"pageContent":"//\n//  Mp3FileReader.swift\n//\n//  Created by Fabrizio Duroni on 19/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Mp3/Mp3FileReader.swift","loc":{"lines":{"from":1,"to":8}}}}],["862443bb-092b-4f44-9d23-b980e09a71cc",{"pageContent":"class Mp3FileReader {\n    private let tagSizeParser: TagSizeParser\n    private let id3TagConfiguration: ID3TagConfiguration\n\n    init(tagSizeParser: TagSizeParser,\n         id3TagConfiguration: ID3TagConfiguration) {\n        self.tagSizeParser = tagSizeParser\n        self.id3TagConfiguration = id3TagConfiguration\n    }\n\n    /**\n      Read the entire mp3 file at path\n\n      - parameter path: the path to the mp3 file\n\n      - returns: mp3 data of the file\n\n      - throws: Could throw `InvalidFileFormat` if an mp3 file doesn't exists at the specified path.\n     */\n    func readFileFrom(path: String) throws -> Data {\n        let validPath = URL(fileURLWithPath: path)\n        guard validPath.pathExtension.caseInsensitiveCompare(\"mp3\") == ComparisonResult.orderedSame else {\n            throw ID3TagEditorError.invalidFileFormat\n        }\n\n        let mp3 = try Data(contentsOf: validPath)\n        return mp3\n    }\n\n    /**\n      Read only the ID3 header of the mp3 file at path","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Mp3/Mp3FileReader.swift","loc":{"lines":{"from":10,"to":40}}}}],["315304d5-47ab-4d52-98e4-a8996b4c83b8",{"pageContent":"/**\n      Read only the ID3 header of the mp3 file at path\n\n      - parameter path: the path to the mp3 file\n\n      - returns: ID3 header data of the file\n\n      - throws: Could throw `InvalidFileFormat` if an mp3 file doesn't exists at the specified path, or if the file\n     does not contain the entire ID3 header\n     */\n    func readID3TagFrom(path: String) throws -> Data {\n        let validPath = URL(fileURLWithPath: path)\n        guard validPath.pathExtension.caseInsensitiveCompare(\"mp3\") == ComparisonResult.orderedSame else {\n            throw ID3TagEditorError.invalidFileFormat\n        }\n\n        guard let inputStream = InputStream(fileAtPath: path) else {\n            throw ID3TagEditorError.corruptedFile\n        }\n\n        inputStream.open()\n\n        let headerSize = id3TagConfiguration.headerSize()\n        let header = try read(bytesCount: headerSize, fromStream: inputStream)\n        let headerData = Data(header) as NSData","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Mp3/Mp3FileReader.swift","loc":{"lines":{"from":39,"to":63}}}}],["649f6252-18b1-4ce8-a72e-9458c3cf97ce",{"pageContent":"let frameSize = tagSizeParser.parse(data: headerData)\n        let frame = try read(bytesCount: Int(frameSize), fromStream: inputStream)\n\n        let mp3 = header + frame\n        return Data(mp3)\n    }\n\n    private func read(bytesCount: Int, fromStream stream: InputStream) throws -> [UInt8] {\n        var buffer = [UInt8](repeating: 0, count: bytesCount)\n        let result = stream.read(&buffer, maxLength: bytesCount)\n        if result < bytesCount {\n            throw ID3TagEditorError.corruptedFile\n        }\n        return buffer\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Mp3/Mp3FileReader.swift","loc":{"lines":{"from":65,"to":80}}}}],["6829d198-4132-4f09-b1b9-9693515e3eb9",{"pageContent":"//\n//  Mp3FileReaderFactory.swift\n//  ID3TagEditor\n//\n//  Created by Zsolt Kovacs on 09.01.23.\n//  Copyright © 2023 Fabrizio Duroni. All rights reserved.\n//\n\nimport Foundation\n\nclass Mp3FileReaderFactory {\n    static func make() -> Mp3FileReader {\n        let tagSizeParser = ID3TagSizeParser()\n        let id3TagConfiguration = ID3TagConfiguration()\n        let fileReader = Mp3FileReader(tagSizeParser: tagSizeParser,\n                                       id3TagConfiguration: id3TagConfiguration)\n\n        return fileReader\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Mp3/Mp3FileReaderFactory.swift","loc":{"lines":{"from":1,"to":20}}}}],["f7f7654d-48e1-4c20-959b-0bf8f03926d0",{"pageContent":"//\n//  Mp3FileWriter.swift\n//\n//  Created by Fabrizio Duroni on 19/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass Mp3FileWriter {\n    func write(mp3: Data, path: String) throws {\n        try eventuallyCreateIntermediatesDirectoriesFor(path: path)\n        try mp3.write(to: URL(fileURLWithPath: path))\n    }\n\n    private func eventuallyCreateIntermediatesDirectoriesFor(path: String) throws {\n        let fileUrl = URL(fileURLWithPath: NSString(string: path).deletingLastPathComponent)\n        var isDirectory: ObjCBool = false\n        if !FileManager.default.fileExists(atPath: path, isDirectory: &isDirectory) ||\n            !isDirectory.boolValue {\n            try FileManager.default.createDirectory(at: fileUrl, withIntermediateDirectories: true)\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Mp3/Mp3FileWriter.swift","loc":{"lines":{"from":1,"to":24}}}}],["cf5dc0b2-eeba-44eb-b372-866d8775d41f",{"pageContent":"//\n//  Mp3WithID3TagBuilder.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass Mp3WithID3TagBuilder {\n    private let id3TagCreator: ID3TagCreator\n    private let id3TagConfiguration: ID3TagConfiguration\n\n    init(id3TagCreator: ID3TagCreator, id3TagConfiguration: ID3TagConfiguration) {\n        self.id3TagCreator = id3TagCreator\n        self.id3TagConfiguration = id3TagConfiguration\n    }\n\n    func build(mp3: Data, newId3Tag: ID3Tag, currentId3Tag: ID3Tag?) throws -> Data {\n        var tagSizeWithHeader = 0\n        if let validCurrentId3Tag = currentId3Tag {\n            tagSizeWithHeader = Int(validCurrentId3Tag.properties.size) + ID3TagConfiguration().headerSize()\n        }\n        var mp3WithTag = try id3TagCreator.create(id3Tag: newId3Tag)\n        mp3WithTag.append(mp3.subdata(in: tagSizeWithHeader..<mp3.count))\n        return mp3WithTag\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Mp3/Mp3WithID3TagBuilder.swift","loc":{"lines":{"from":1,"to":28}}}}],["72e38d0f-b0b2-4057-86e6-47149ea1725b",{"pageContent":"//\n//  FrameContentParser.swift\n//\n//  Created by Fabrizio Duroni on 23/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol FrameContentParser {\n    func parse(frame: Data, id3Tag: ID3Tag)\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/FrameContentParser.swift","loc":{"lines":{"from":1,"to":12}}}}],["03d42b62-dcc5-4ade-99a1-61fd16c8fa16",{"pageContent":"//\n//  FrameContentParsingOperation.swift\n//\n//  Created by Fabrizio Duroni on 20/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol FrameContentParsingOperation {\n    func parse(frame: Data, version: ID3Version, completed: (FrameName, ID3Frame) -> Void)\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/FrameContentParsingOperation.swift","loc":{"lines":{"from":1,"to":12}}}}],["09ddfea3-5b77-47e5-b9f5-845e50cf8748",{"pageContent":"//\n//  FrameContentSizeParser.swift\n//\n//  Created by Fabrizio Duroni on 23/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol FrameContentSizeParser {\n    func parse(mp3: NSData, framePosition: Int, version: ID3Version) -> Int\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/FrameContentSizeParser.swift","loc":{"lines":{"from":1,"to":12}}}}],["8bfde33a-5660-40d4-8951-0eb44ba49aec",{"pageContent":"//\n//  FrameSizeParser.swift\n//\n//  Created by Fabrizio Duroni on 23/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol FrameSizeParser {\n    func parse(mp3: NSData, framePosition: Int, version: ID3Version) -> Int\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/FrameSizeParser.swift","loc":{"lines":{"from":1,"to":12}}}}],["317664e5-d815-4647-960a-48d492c93fdc",{"pageContent":"//\n//  ID3AttachedPictureFrameContentParsingOperation.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3AttachedPictureFrameContentParsingOperation.swift","loc":{"lines":{"from":1,"to":8}}}}],["f50ebd74-380b-4d31-9a57-0c3dbc4c1add",{"pageContent":"class ID3AttachedPictureFrameContentParsingOperation: FrameContentParsingOperation {\n    private let jpegMagicNumber: Data = Data([0xFF, 0xD8, 0xFF, 0xE0])\n    private let pngMagicNumber: Data =  Data([0x89, 0x50, 0x4E, 0x47])\n    private let id3FrameConfiguration: ID3FrameConfiguration\n    private let pictureTypeAdapter: PictureTypeAdapter\n\n    init(id3FrameConfiguration: ID3FrameConfiguration, pictureTypeAdapter: PictureTypeAdapter) {\n        self.id3FrameConfiguration = id3FrameConfiguration\n        self.pictureTypeAdapter = pictureTypeAdapter\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3AttachedPictureFrameContentParsingOperation.swift","loc":{"lines":{"from":10,"to":19}}}}],["4ff4edb1-5d2c-4ee9-b9b4-9d265b7ac9ae",{"pageContent":"func parse(frame: Data, version: ID3Version, completed: (FrameName, ID3Frame) -> Void) {\n        parseToCheckIfThereIsAnImageUsing(magicNumber: jpegMagicNumber,\n                                          format: .jpeg,\n                                          frame: frame,\n                                          version: version,\n                                          completed: completed)\n        parseToCheckIfThereIsAnImageUsing(magicNumber: pngMagicNumber,\n                                          format: .png,\n                                          frame: frame,\n                                          version: version,\n                                          completed: completed)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3AttachedPictureFrameContentParsingOperation.swift","loc":{"lines":{"from":21,"to":32}}}}],["831a78a9-86a6-4734-9e7d-144553359b65",{"pageContent":"private func parseToCheckIfThereIsAnImageUsing(magicNumber: Data,\n                                                   format: ID3PictureFormat,\n                                                   frame: Data,\n                                                   version: ID3Version,\n                                                   completed: (FrameName, ID3Frame) -> Void) {\n        if let magicNumberRange = frame.range(of: magicNumber) {\n            let pictureType = pictureTypeAdapter.adapt(frame: frame, format: format, version: version)\n            let attachedPictureFrame = ID3FrameAttachedPicture(\n                picture: frame.subdata(in: magicNumberRange.lowerBound..<frame.count),\n                type: pictureType,\n                format: format\n            )\n            completed(.attachedPicture(pictureType), attachedPictureFrame)\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3AttachedPictureFrameContentParsingOperation.swift","loc":{"lines":{"from":34,"to":49}}}}],["c14fd3e7-7549-46b8-92de-6a5c30b744a5",{"pageContent":"//\n//  ID3AttachedPictureFrameContentParsingOperationFactory.swift\n//\n//  Created by Fabrizio Duroni on 27/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3AttachedPictureFrameContentParsingOperationFactory {\n    static func make() -> ID3AttachedPictureFrameContentParsingOperation {\n        return ID3AttachedPictureFrameContentParsingOperation(\n            id3FrameConfiguration: ID3FrameConfiguration(),\n            pictureTypeAdapter: ID3PictureTypeAdapter(\n                id3FrameConfiguration: ID3FrameConfiguration(),\n                id3AttachedPictureFrameConfiguration: ID3AttachedPictureFrameConfiguration()\n            )\n        )\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3AttachedPictureFrameContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":20}}}}],["81634183-0315-42ff-8a3c-6daefa27214b",{"pageContent":"//\n//  ID3CoupleOfNumbersAdapter.swift\n//\n//  Created by Fabrizio Duroni on 05/08/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\ntypealias CoupleOfNumbers = (Int?, Int?)\n\nclass ID3CoupleOfNumbersAdapter {\n    func adapt(coupleOfNumbers: String) -> CoupleOfNumbers {\n        let day = Int(coupleOfNumbers.prefix(coupleOfNumbers.count / 2))\n        let month = Int(coupleOfNumbers.suffix(coupleOfNumbers.count / 2))\n        return (day, month)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3CoupleOfNumbersAdapter.swift","loc":{"lines":{"from":1,"to":18}}}}],["51dfea4c-fb06-4239-86dd-be2652d6f2fb",{"pageContent":"//\n//  ID3DiscPositionContentParsingOperationFactory.swift\n//\n//  Created by Nolaine Crusher on 02/24/2020.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3DiscPositionFrameContentParsingOperationFactory {\n    static func make() -> ID3FrameStringContentParsingOperation {\n        return ID3FrameStringContentParsingOperationFactory.make { (content: String) in\n            return (.discPosition, ID3PartOfTotalStringAdapter().adapt(partOfTotal: content))\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3DiscPositionFrameContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":16}}}}],["c36d3b77-1ec0-49da-b67a-bd2114a43763",{"pageContent":"//\n//  ID3FrameContentParsingOperationFactory.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\n// swiftlint:disable line_length\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":10}}}}],["7e2c7169-41a9-4c15-a76f-efb1abf0e890",{"pageContent":"class ID3FrameContentParsingOperationFactory {\n    static func make() -> [FrameType: FrameContentParsingOperation] {\n        return [\n            .artist: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .artist),\n            .albumArtist: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .albumArtist),\n            .album: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .album),\n            .composer: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .composer),\n            .conductor: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .conductor),\n            .contentGrouping: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .contentGrouping),\n            .copyright: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .copyright),\n            .discPosition: ID3DiscPositionFrameContentParsingOperationFactory.make(),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentParsingOperationFactory.swift","loc":{"lines":{"from":12,"to":22}}}}],["43da7db4-227e-44a5-adee-ad789a4ed9e5",{"pageContent":".discPosition: ID3DiscPositionFrameContentParsingOperationFactory.make(),\n            .encodedBy: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .encodedBy),\n            .encoderSettings: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .encoderSettings),\n            .fileOwner: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .fileOwner),\n            .lyricist: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .lyricist),\n            .mixArtist: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .mixArtist),\n            .iTunesPodcastCategory: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .iTunesPodcastCategory),\n            .iTunesPodcastDescription: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .iTunesPodcastDescription),\n            .iTunesPodcastID: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .iTunesPodcastID),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentParsingOperationFactory.swift","loc":{"lines":{"from":22,"to":30}}}}],["f6bc26cd-81c4-4314-8666-fa4f64aa3471",{"pageContent":".iTunesPodcastID: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .iTunesPodcastID),\n            .iTunesPodcastKeywords: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .iTunesPodcastKeywords),\n            .publisher: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .publisher),\n            .subtitle: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .subtitle),\n            .title: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .title),\n            .attachedPicture: ID3AttachedPictureFrameContentParsingOperationFactory.make(),\n            .recordingDayMonth: ID3RecordingDayMonthFrameContentParsingOperationFactory.make(),\n            .recordingYear: ID3ParsingOperationForID3FrameWithIntegerFactory.make(frameName: .recordingYear),\n            .recordingHourMinute: ID3RecordingHourMinuteFrameContentParsingOperationFactory.make(),\n            .recordingDateTime: ID3RecordingTimeFrameContentParsingOperationFactory.make(),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentParsingOperationFactory.swift","loc":{"lines":{"from":30,"to":39}}}}],["ed28ac03-e6e2-4210-ac06-ecb9ce466c4f",{"pageContent":".recordingDateTime: ID3RecordingTimeFrameContentParsingOperationFactory.make(),\n            .genre: ID3GenreFrameContentParsingOperationFactory.make(),\n            .trackPosition: ID3TrackPositionFrameContentParsingOperationFactory.make(),\n            .beatsPerMinute: ID3ParsingOperationForID3FrameWithIntegerFactory.make(frameName: .beatsPerMinute),\n            .originalFilename: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .originalFilename),\n            .lengthInMilliseconds: ID3ParsingOperationForID3FrameWithIntegerFactory.make(frameName: .lengthInMilliseconds),\n            .sizeInBytes: ID3ParsingOperationForID3FrameWithIntegerFactory.make(frameName: .sizeInBytes),\n            .unsyncronisedLyrics: ID3LocalizedFrameContentParsingOperationFactory.make(frameName: FrameName.unsynchronizedLyrics),\n            .comment: ID3LocalizedFrameContentParsingOperationFactory.make(frameName: FrameName.comment),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentParsingOperationFactory.swift","loc":{"lines":{"from":39,"to":47}}}}],["bbb986fa-3701-4c89-a177-a27a2547fa42",{"pageContent":".comment: ID3LocalizedFrameContentParsingOperationFactory.make(frameName: FrameName.comment),\n            .iTunesGrouping: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .iTunesGrouping),\n            .iTunesMovementIndex: ID3ParsingOperationForID3FrameWithIntegerFactory.make(frameName: .iTunesMovementIndex),\n            .iTunesMovementCount: ID3ParsingOperationForID3FrameWithIntegerFactory.make(frameName: .iTunesMovementCount),\n            .iTunesMovementName: ID3ParsingOperationForID3FrameWithStringFactory.make(frameName: .iTunesMovementName)\n        ]\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentParsingOperationFactory.swift","loc":{"lines":{"from":47,"to":54}}}}],["ab364f7f-9509-40ab-9b51-270318ff9c7a",{"pageContent":"//\n//  ID3FrameContentSizeParser.swift\n//\n//  Created by Fabrizio Duroni on 23/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentSizeParser.swift","loc":{"lines":{"from":1,"to":8}}}}],["58ccca65-5e15-4870-a1c5-1831f588924a",{"pageContent":"class ID3FrameContentSizeParser: FrameContentSizeParser {\n    private let id3FrameConfiguration: ID3FrameConfiguration\n    private let synchsafeIntegerDecoder: SynchsafeIntegerDecoder\n\n    init(id3FrameConfiguration: ID3FrameConfiguration, synchsafeIntegerDecoder: SynchsafeIntegerDecoder) {\n        self.id3FrameConfiguration = id3FrameConfiguration\n        self.synchsafeIntegerDecoder = synchsafeIntegerDecoder\n    }\n\n    func parse(mp3: NSData, framePosition: Int, version: ID3Version) -> Int {\n        var frameSize: UInt32 = getFrameSizeFrom(mp3: mp3, framePosition: framePosition, version: version)\n        frameSize = decodeIfIsASynchsafeInteger(frameSize: frameSize, for: version)\n        return Int(frameSize)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentSizeParser.swift","loc":{"lines":{"from":10,"to":23}}}}],["9c2576b9-c2d3-4636-befd-d097f1758500",{"pageContent":"private func getFrameSizeFrom(mp3: NSData, framePosition: Int, version: ID3Version) -> UInt32 {\n        let frameSizePosition = framePosition + id3FrameConfiguration.sizeOffsetFor(version: version)\n        var frameSize: UInt32 = 0\n        mp3.getBytes(&frameSize, range: NSRange(location: frameSizePosition, length: 4))\n        frameSize = frameSize.bigEndian & id3FrameConfiguration.sizeMaskFor(version: version)\n        return frameSize\n    }\n\n    private func decodeIfIsASynchsafeInteger(frameSize: UInt32, for version: ID3Version) -> UInt32 {\n        var newFrameSize = frameSize\n        if version == .version4 {\n            newFrameSize = synchsafeIntegerDecoder.decode(integer: frameSize)\n        }\n        return newFrameSize\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameContentSizeParser.swift","loc":{"lines":{"from":25,"to":40}}}}],["a70f6562-c72d-482e-b5df-c154215d4807",{"pageContent":"//\n//  ID3FrameContentParser.swift\n//\n//  Created by Fabrizio Duroni on 23/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameParser.swift","loc":{"lines":{"from":1,"to":8}}}}],["8bed4476-1b3f-4c82-8ef4-2724cc79c938",{"pageContent":"class ID3FrameParser {\n    private let frameContentParsingOperations: [FrameType: FrameContentParsingOperation]\n    private var id3FrameConfiguration: ID3FrameConfiguration\n\n    init(frameContentParsingOperations: [FrameType: FrameContentParsingOperation],\n         id3FrameConfiguration: ID3FrameConfiguration) {\n        self.frameContentParsingOperations = frameContentParsingOperations\n        self.id3FrameConfiguration = id3FrameConfiguration\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameParser.swift","loc":{"lines":{"from":10,"to":18}}}}],["324204a8-198a-4d6a-a4fa-ec1b2bc7e874",{"pageContent":"func parse(frame: Data, frameSize: Int, id3Tag: ID3Tag) {\n        let frameIdentifier = getFrameIdentifier(frame: frame, version: id3Tag.properties.version)\n        let frameType = id3FrameConfiguration.frameTypeFor(identifier: frameIdentifier,\n                                                           version: id3Tag.properties.version)\n        if isAValid(frameType: frameType) {\n            frameContentParsingOperations[frameType]?.parse(frame: frame,\n                                                            version: id3Tag.properties.version,\n                                                            completed: { frameName, frame in\n                frame.id3Identifier = frameIdentifier\n                frame.size = frameSize\n                id3Tag.frames[frameName] = frame\n            })\n        }\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameParser.swift","loc":{"lines":{"from":20,"to":33}}}}],["13e3deaa-2e98-46d2-bec8-cc676ebd8c35",{"pageContent":"private func getFrameIdentifier(frame: Data, version: ID3Version) -> String {\n        let frameIdentifierSize = id3FrameConfiguration.identifierSizeFor(version: version)\n        let frameIdentifierData = [UInt8](frame.subdata(in: Range(0...frameIdentifierSize - 1)))\n        let frameIdentifier = toString(frameIdentifier: frameIdentifierData)\n        return frameIdentifier\n    }\n\n    private func isAValid(frameType: FrameType) -> Bool {\n        return frameType != .invalid\n    }\n\n    private func toString(frameIdentifier: [UInt8]) -> String {\n        return frameIdentifier.reduce(\"\") { (convertedString, byte) -> String in\n            return convertedString + String(Character(UnicodeScalar(byte)))\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameParser.swift","loc":{"lines":{"from":35,"to":51}}}}],["448eb028-9901-48c7-a1f2-1cc18afa1479",{"pageContent":"//\n//  ID3FrameSizeParser.swift\n//\n//  Created by Fabrizio Duroni on 23/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameSizeParser: FrameSizeParser {\n    private let frameContentSizeParser: FrameContentSizeParser\n    private var id3FrameConfiguration: ID3FrameConfiguration\n\n    init(frameContentSizeParser: FrameContentSizeParser, id3FrameConfiguration: ID3FrameConfiguration) {\n        self.frameContentSizeParser = frameContentSizeParser\n        self.id3FrameConfiguration = id3FrameConfiguration\n    }\n\n    func parse(mp3: NSData, framePosition: Int, version: ID3Version) -> Int {\n        return frameContentSizeParser\n            .parse(\n                mp3: mp3,\n                framePosition: framePosition,\n                version: version\n            ) + id3FrameConfiguration.headerSizeFor(version: version)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameSizeParser.swift","loc":{"lines":{"from":1,"to":27}}}}],["9d40f417-b527-42e1-be42-ad76d5ec2176",{"pageContent":"//\n//  ID3FrameStringContentParser.swift\n//\n//  Created by Fabrizio Duroni on 27/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameStringContentParser.swift","loc":{"lines":{"from":1,"to":8}}}}],["000289c3-368a-451e-994a-9382fdddf99a",{"pageContent":"class ID3FrameStringContentParser {\n    private let stringEncodingDetector: ID3FrameStringEncodingDetector\n    private let paddingRemover: PaddingRemover\n    private let id3FrameConfiguration: ID3FrameConfiguration\n\n    init(stringEncodingDetector: ID3FrameStringEncodingDetector,\n         paddingRemover: PaddingRemover,\n         id3FrameConfiguration: ID3FrameConfiguration) {\n        self.stringEncodingDetector = stringEncodingDetector\n        self.paddingRemover = paddingRemover\n        self.id3FrameConfiguration = id3FrameConfiguration\n    }\n\n    func parse(frame: Data, version: ID3Version) -> String? {\n        let headerSize = id3FrameConfiguration.headerSizeFor(version: version)\n        let frameContentRangeStart = headerSize + id3FrameConfiguration.encodingSize()\n\n        guard frameContentRangeStart < frame.count else { return nil }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameStringContentParser.swift","loc":{"lines":{"from":10,"to":27}}}}],["24109187-e3d5-40fa-8480-0ebb1c0b660d",{"pageContent":"guard frameContentRangeStart < frame.count else { return nil }\n\n        let frameContent = frame.subdata(in: frameContentRangeStart..<frame.count)\n        let encoding = stringEncodingDetector.detect(frame: frame, version: version)\n        if let frameContentAsString = String(data: frameContent, encoding: encoding) {\n            return paddingRemover.removeFrom(string: frameContentAsString)\n        } else {\n            return nil\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameStringContentParser.swift","loc":{"lines":{"from":27,"to":37}}}}],["9809dfbb-c252-4349-b757-a7c92b1700f2",{"pageContent":"//\n//  ID3FrameStringContentParser.swift\n//\n//  Created by Fabrizio Duroni on 27/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameStringContentParserFactory {\n    static func make() -> ID3FrameStringContentParser {\n        let id3FrameConfiguration = ID3FrameConfiguration()\n        let paddingRemover = PaddingRemoverUsingTrimming()\n        let stringEncodingDetector = ID3FrameStringEncodingDetector(\n            id3FrameConfiguration: id3FrameConfiguration,\n            id3StringEncodingConverter: ID3StringEncodingConverter()\n        )\n        let stringContentParser = ID3FrameStringContentParser(\n            stringEncodingDetector: stringEncodingDetector,\n            paddingRemover: paddingRemover,\n            id3FrameConfiguration: id3FrameConfiguration\n        )\n        return stringContentParser\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameStringContentParserFactory.swift","loc":{"lines":{"from":1,"to":25}}}}],["27ca128b-bc7f-45c9-a3f5-c92cd313e551",{"pageContent":"//\n//  ID3FrameStringContentParsingOperation.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\ntypealias CreateFrameOperation = (String) -> ((FrameName, ID3Frame))\n\nclass ID3FrameStringContentParsingOperation: FrameContentParsingOperation {\n    private var stringContentParser: ID3FrameStringContentParser\n    private var createFrameOperation: CreateFrameOperation\n\n    init(stringContentParser: ID3FrameStringContentParser,\n         assignToTagOperation: @escaping CreateFrameOperation) {\n        self.stringContentParser = stringContentParser\n        self.createFrameOperation = assignToTagOperation\n    }\n\n    func parse(frame: Data, version: ID3Version, completed: (FrameName, ID3Frame) -> Void) {\n        if let frameContent = stringContentParser.parse(frame: frame, version: version) {\n            let frameNameAndFrame = createFrameOperation(frameContent)\n            completed(frameNameAndFrame.0, frameNameAndFrame.1)\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameStringContentParsingOperation.swift","loc":{"lines":{"from":1,"to":28}}}}],["884e2314-2be6-4da3-8792-ab1150b64ca2",{"pageContent":"//\n//  ID3FrameStringContentParsingOperationFactory.swift\n//\n//  Created by Fabrizio Duroni on 27/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameStringContentParsingOperationFactory {\n    static func make(operation: @escaping CreateFrameOperation) -> ID3FrameStringContentParsingOperation {\n        let stringContentParser = ID3FrameStringContentParserFactory.make()\n        return ID3FrameStringContentParsingOperation(stringContentParser: stringContentParser,\n                                                     assignToTagOperation: operation)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameStringContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":16}}}}],["fced4d77-dcb8-42a5-b53d-007934e19356",{"pageContent":"//\n//  ID3FrameStringEncodingDetector.swift\n//\n//  Created by Fabrizio Duroni on 24/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3FrameStringEncodingDetector {\n    private let id3FrameConfiguration: ID3FrameConfiguration\n    private let id3StringEncodingConverter: ID3StringEncodingConverter\n\n    init(id3FrameConfiguration: ID3FrameConfiguration,\n         id3StringEncodingConverter: ID3StringEncodingConverter) {\n        self.id3FrameConfiguration = id3FrameConfiguration\n        self.id3StringEncodingConverter = id3StringEncodingConverter\n    }\n\n    func detect(frame: Data, version: ID3Version) -> String.Encoding {\n        let encodingBytePosition = id3FrameConfiguration.encodingPositionFor(version: version)\n        let encoding = id3StringEncodingConverter.convert(\n            id3Encoding: ID3StringEncoding(rawValue: frame[encodingBytePosition]),\n            version: version\n        )\n        return encoding\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FrameStringEncodingDetector.swift","loc":{"lines":{"from":1,"to":28}}}}],["2810f9d2-e4a9-4e1a-8acc-667c98861d5b",{"pageContent":"//\n//  ID3FramesParser.swift\n//\n//  Created by Fabrizio Duroni on 20/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FramesParser.swift","loc":{"lines":{"from":1,"to":8}}}}],["3be1da6d-fbf8-4cc8-af15-d094fcf0f655",{"pageContent":"class ID3FramesParser {\n    private let frameSizeParser: FrameSizeParser\n    private let id3FrameParser: ID3FrameParser\n    private var id3TagConfiguration: ID3TagConfiguration\n\n    init(frameSizeParser: FrameSizeParser, id3FrameParser: ID3FrameParser, id3TagConfiguration: ID3TagConfiguration) {\n        self.frameSizeParser = frameSizeParser\n        self.id3FrameParser = id3FrameParser\n        self.id3TagConfiguration = id3TagConfiguration\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FramesParser.swift","loc":{"lines":{"from":10,"to":19}}}}],["4b94234f-5682-4c45-ac25-b8f0ac14f737",{"pageContent":"func parse(mp3: NSData, id3Tag: ID3Tag) {\n        var currentFramePosition = id3TagConfiguration.headerSize()\n        while currentFramePosition < id3Tag.properties.size {\n            let frameSize = frameSizeParser.parse(\n                mp3: mp3,\n                framePosition: currentFramePosition,\n                version: id3Tag.properties.version\n            )\n            /*\n                Fallback added in order to avoid crashing with non standard tag that doesn't support synchsafe size.\n                See https://github.com/chicio/ID3TagEditor/issues/88\n             */\n            if frameSize < id3Tag.properties.size {\n                let frame = mp3.subdata(with: NSRange(location: currentFramePosition, length: frameSize))\n                id3FrameParser.parse(frame: frame, frameSize: frameSize, id3Tag: id3Tag)\n                currentFramePosition += frame.count\n            } else {\n                currentFramePosition = Int(id3Tag.properties.size)\n            }\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3FramesParser.swift","loc":{"lines":{"from":21,"to":42}}}}],["9c59c523-7589-4f49-bb86-5025d6e5b3ef",{"pageContent":"//\n//  ID3GenreFrameContentParsingOperationFactory.swift\n//\n//  Created by Fabrizio Duroni on 27/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3GenreFrameContentParsingOperationFactory {\n    static func make() -> ID3FrameStringContentParsingOperation {\n        return ID3FrameStringContentParsingOperationFactory.make { (content: String) in\n            return (.genre, ID3GenreStringAdapter().adapt(genre: content))\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3GenreFrameContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":16}}}}],["6de6c177-591b-452b-9eec-c8cc02ad166a",{"pageContent":"//\n//  ID3GenreStringAdapter.swift\n//\n//  Created by Fabrizio Duroni on 05/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3GenreStringAdapter.swift","loc":{"lines":{"from":1,"to":8}}}}],["7d5a7396-bf64-47df-9931-5941d8088194",{"pageContent":"class ID3GenreStringAdapter {\n    func adapt(genre: String) -> ID3FrameGenre {\n        let genreStringRange = NSRange(location: 0, length: genre.count)\n        guard let expression = try? NSRegularExpression(pattern: \"(\\\\()\\\\w*\\\\d*(\\\\))\"),\n              let genreWithParenthesisRange = Range(\n                expression.rangeOfFirstMatch(in: genre, options: [], range: genreStringRange), in: genre) else {\n            return ID3FrameGenre(genre: nil, description: genre)\n        }\n        let genreWithParenthesis = String(genre[genreWithParenthesisRange])\n        let genreIdentifier = adaptGenreIdentifierFrom(genreWithParenthesis: genreWithParenthesis)\n        let genreDescription = adaptGenreDescriptionFrom(\n                genreDescriptionExtracted: String(genre[genreWithParenthesisRange.upperBound..<genre.endIndex]),\n                genreIdentifier: genreIdentifier,\n                genreWithParenthesis: genreWithParenthesis\n        )","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3GenreStringAdapter.swift","loc":{"lines":{"from":10,"to":24}}}}],["c0ef92f9-ff4b-4012-bc98-f58f1a5765b0",{"pageContent":"genreIdentifier: genreIdentifier,\n                genreWithParenthesis: genreWithParenthesis\n        )\n        return ID3FrameGenre(genre: genreIdentifier, description: genreDescription)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3GenreStringAdapter.swift","loc":{"lines":{"from":22,"to":26}}}}],["7457398c-7dbb-49db-87e1-433861e9c55c",{"pageContent":"private func adaptGenreDescriptionFrom(genreDescriptionExtracted: String,\n                                           genreIdentifier: ID3Genre?,\n                                           genreWithParenthesis: String) -> String? {\n        var genreDescription: String? = genreDescriptionExtracted\n        if let validGenreDescription = genreDescription, validGenreDescription.isEmpty {\n            genreDescription = nil\n        }\n        if notAValid(genreIdentifier: genreIdentifier, from: genreWithParenthesis) {\n            genreDescription = genreWithParenthesis + (genreDescription ?? \"\")\n        }\n        return genreDescription\n    }\n\n    private func notAValid(genreIdentifier: ID3Genre?, from genreWithParenthesis: String) -> Bool {\n        return genreIdentifier == nil && !genreWithParenthesis.isEmpty\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3GenreStringAdapter.swift","loc":{"lines":{"from":28,"to":43}}}}],["453bd01f-0d31-42b7-9df0-10302d467a79",{"pageContent":"private func adaptGenreIdentifierFrom(genreWithParenthesis: String) -> ID3Genre? {\n        let genreIdentifierStartIndex = genreWithParenthesis.index(after: genreWithParenthesis.startIndex)\n        let genreIdentifierEndIndex = genreWithParenthesis.index(before: genreWithParenthesis.endIndex)\n        let genreIdentifierRange = genreIdentifierStartIndex..<genreIdentifierEndIndex\n        let genreWithoutParenthesis = genreWithParenthesis[genreIdentifierRange]\n        if let genreIdentifier = Int(genreWithoutParenthesis),\n           let validGenre = ID3Genre(rawValue: genreIdentifier) {\n            return validGenre\n        }\n        if genreWithoutParenthesis == \"RX\" {\n            return .remix\n        }\n        if genreWithoutParenthesis == \"CR\" {\n            return .cover\n        }\n        return nil\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3GenreStringAdapter.swift","loc":{"lines":{"from":45,"to":62}}}}],["d1e24501-aba2-4798-b291-5948dd41c4af",{"pageContent":"//\n//  ID3LocalizedFrameParsingOperation.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 14.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3LocalizedFrameContentParsingOperation.swift","loc":{"lines":{"from":1,"to":9}}}}],["49d1cc6e-65bb-4a42-8417-263b51ce2d63",{"pageContent":"class ID3LocalizedFrameContentParsingOperation: FrameContentParsingOperation {\n    typealias Body = (contentDescriptor: String, content: String)\n    private let id3FrameConfiguration: ID3FrameConfiguration\n    private let stringEncodingDetector: ID3FrameStringEncodingDetector\n    private let paddingRemover: PaddingRemover\n    private let frameName: (ID3FrameContentLanguage) -> FrameName\n\n    init(id3FrameConfiguration: ID3FrameConfiguration,\n         paddingRemover: PaddingRemover,\n         stringEncodingDetector: ID3FrameStringEncodingDetector,\n         frameName: @escaping (ID3FrameContentLanguage) -> FrameName) {\n        self.id3FrameConfiguration = id3FrameConfiguration\n        self.stringEncodingDetector = stringEncodingDetector\n        self.paddingRemover = paddingRemover\n        self.frameName = frameName\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3LocalizedFrameContentParsingOperation.swift","loc":{"lines":{"from":11,"to":26}}}}],["8c0b6141-a315-4911-a7bb-75b65f3d71dd",{"pageContent":"func parse(frame: Data, version: ID3Version, completed: (FrameName, ID3Frame) -> Void) {\n        let headerSize = id3FrameConfiguration.headerSizeFor(version: version)\n        let encoding = stringEncodingDetector.detect(frame: frame, version: version)\n        let body = parseBodyFrom(frame: frame, using: headerSize, and: encoding)\n        let language = parseLanguageFrom(frame: frame, using: headerSize)\n        let frame = ID3FrameWithLocalizedContent(language: language,\n                                                 contentDescription: body.contentDescriptor,\n                                                 content: body.content)\n        completed(frameName(language), frame)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3LocalizedFrameContentParsingOperation.swift","loc":{"lines":{"from":28,"to":37}}}}],["09503939-e1d9-46ab-9202-6ad576009ce8",{"pageContent":"private func parseBodyFrom(frame: Data, using headerSize: Int, and encoding: String.Encoding) -> Body {\n        let allContent = frame.subdata(in: headerSize + 4..<frame.count)\n        let separatorRange = calculateSeparatorRange(allContent: allContent, encoding: encoding)\n        let contentDescriptor = String(\n            bytes: allContent.subdata(in: 0..<separatorRange.startIndex),\n            encoding: encoding\n        ) ?? \"Invalid content\"\n        let content = String(\n            bytes: allContent.subdata(in: contentStartIndexFrom(separatorRange: separatorRange)..<allContent.count),\n            encoding: encoding\n        ) ?? \"Invalid content\"\n\n        return (contentDescriptor: contentDescriptor, content: paddingRemover.removeFrom(string: content))\n    }\n\n    private func calculateSeparatorRange(allContent: Data, encoding: String.Encoding) -> Range<Data.Index> {\n        return allContent.range(of: Data(getSeparatorUsing(encoding: encoding)), options: .backwards) ?? Range(0...0)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3LocalizedFrameContentParsingOperation.swift","loc":{"lines":{"from":39,"to":56}}}}],["059bcae3-00ca-495a-b5d8-ed02273c3db1",{"pageContent":"private func getSeparatorUsing(encoding: String.Encoding) -> [UInt8] {\n        return encoding == String.Encoding.utf16 ? [0x00, 0x00, 0xFF, 0xFE] : [0x00, 0x00]\n    }\n\n    private func contentStartIndexFrom(separatorRange: Range<Int>) -> Int {\n        return separatorRange.endIndex >= 2 ? separatorRange.endIndex - 2 : 0\n    }\n\n    private func parseLanguageFrom(frame: Data, using headerSize: Int) -> ID3FrameContentLanguage {\n        if let language = String(data: frame.subdata(in: headerSize + 1 ..< headerSize + 4), encoding: .utf8),\n           let id3Language = ID3FrameContentLanguage(rawValue: language) {\n            return id3Language\n        }\n\n        return .unknown\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3LocalizedFrameContentParsingOperation.swift","loc":{"lines":{"from":58,"to":74}}}}],["43b2dafe-f117-4f8e-a99e-3f7e24c938e4",{"pageContent":"//\n//  ID3LocalizedFrameContentParsingOperationFactory.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 12.10.20.\n//  Copyright © 2020 Fabrizio Duroni. All rights reserved.\n//\n\nimport Foundation\n\nclass ID3LocalizedFrameContentParsingOperationFactory {\n    static func make(\n        frameName: @escaping (ID3FrameContentLanguage) -> FrameName\n    ) -> ID3LocalizedFrameContentParsingOperation {\n        let id3FrameConfiguration = ID3FrameConfiguration()\n        return ID3LocalizedFrameContentParsingOperation(\n            id3FrameConfiguration: id3FrameConfiguration,\n            paddingRemover: PaddingRemoverUsingTrimming(),\n            stringEncodingDetector: ID3FrameStringEncodingDetector(\n                id3FrameConfiguration: id3FrameConfiguration,\n                id3StringEncodingConverter: ID3StringEncodingConverter()\n            ),\n            frameName: frameName\n        )\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3LocalizedFrameContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":26}}}}],["9091a1cb-935f-4cd2-bccd-1070938b6207",{"pageContent":"//\n//  ParsingOperationForID3FrameWithIntegerContentFactory.swift\n//\n//  Created by Fabrizio Duroni on 12.01.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3ParsingOperationForID3FrameWithIntegerFactory {\n    static func make(frameName: FrameName) -> ID3FrameStringContentParsingOperation {\n        return ID3FrameStringContentParsingOperationFactory.make { (content: String) in\n            return (frameName, ID3FrameWithIntegerContent(value: Int(content)))\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3ParsingOperationForID3FrameWithIntegerFactory.swift","loc":{"lines":{"from":1,"to":16}}}}],["c241a900-07ee-4d9a-89ab-b876509a7556",{"pageContent":"//\n//  ID3ParsingOperationForID3FrameWithStringFactory.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 12.11.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3ParsingOperationForID3FrameWithStringFactory {\n    static func make(frameName: FrameName) -> ID3FrameStringContentParsingOperation {\n        return ID3FrameStringContentParsingOperationFactory.make { (content: String) in\n            return (frameName, ID3FrameWithStringContent(content: content))\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3ParsingOperationForID3FrameWithStringFactory.swift","loc":{"lines":{"from":1,"to":17}}}}],["c5d6421a-1191-4c63-a24e-a6d5687806ec",{"pageContent":"//\n//  ID3TrackPositionStringAdapter.swift\n//\n//  Created by Fabrizio Duroni on 08/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3PartOfTotalStringAdapter: PartOfTotalStringAdapter {\n    func adapt(partOfTotal: String) -> ID3FramePartOfTotal {\n        let partOfTotalComponents = partOfTotal.components(separatedBy: \"/\")\n        let partOfTotal = getPartOfTotalFrom(partOfTotalComponents: partOfTotalComponents)\n        let totalParts = getTotalPartsFrom(partOfTotalComponents: partOfTotalComponents)\n        return ID3FramePartOfTotal(part: partOfTotal, total: totalParts)\n    }\n\n    private func getPartOfTotalFrom(partOfTotalComponents: [String]) -> Int {\n        return Int(partOfTotalComponents[0]) ?? 0\n    }\n\n    private func getTotalPartsFrom(partOfTotalComponents: [String]) -> Int? {\n        return partOfTotalComponents.count > 1 ? Int(partOfTotalComponents[1]) : nil\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3PartOfTotalStringAdapter.swift","loc":{"lines":{"from":1,"to":25}}}}],["15e96c50-ca98-4c4d-8e8e-18f015b92e2a",{"pageContent":"//\n//  ID3PictureTypeAdapter.swift\n//\n//  Created by Fabrizio Duroni on 06/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3PictureTypeAdapter.swift","loc":{"lines":{"from":1,"to":8}}}}],["e9e40de6-3a1b-4cfa-b81d-43cf5d8c36ea",{"pageContent":"class ID3PictureTypeAdapter: PictureTypeAdapter {\n    private let id3FrameConfiguration: ID3FrameConfiguration\n    private let id3AttachedPictureFrameConfiguration: ID3AttachedPictureFrameConfiguration\n\n    init(id3FrameConfiguration: ID3FrameConfiguration,\n         id3AttachedPictureFrameConfiguration: ID3AttachedPictureFrameConfiguration) {\n        self.id3FrameConfiguration = id3FrameConfiguration\n        self.id3AttachedPictureFrameConfiguration = id3AttachedPictureFrameConfiguration\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3PictureTypeAdapter.swift","loc":{"lines":{"from":10,"to":18}}}}],["0321ae71-9250-4454-8031-c9470add333e",{"pageContent":"func adapt(frame: Data, format: ID3PictureFormat, version: ID3Version) -> ID3PictureType {\n        let pictureTypeBytePosition = id3FrameConfiguration.headerSizeFor(version: version) +\n                id3AttachedPictureFrameConfiguration.getPictureTypeBytePositionFor(\n                        pictureFormat: format,\n                        version: version\n                )\n        let pictureTypeByte = [UInt8](frame.subdata(in: pictureTypeBytePosition..<pictureTypeBytePosition + 1))\n        if pictureTypeByte.count > 0,\n           let pictureType = ID3PictureType(rawValue: pictureTypeByte[0]) {\n            return pictureType\n        }\n        return .other\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3PictureTypeAdapter.swift","loc":{"lines":{"from":20,"to":33}}}}],["5f4e0116-b467-451c-a993-2d4bb5ddc274",{"pageContent":"//\n//  ID3RecordingDayMonthFrameContentParsingOperationFactory.swift\n//\n//  Created by Fabrizio Duroni on 05/08/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3RecordingDayMonthFrameContentParsingOperationFactory {\n    static func make() -> ID3FrameStringContentParsingOperation {\n        return ID3FrameStringContentParsingOperationFactory.make { (content: String) in\n            let dayMonth = ID3CoupleOfNumbersAdapter().adapt(coupleOfNumbers: content)\n            return (.recordingDayMonth, ID3FrameRecordingDayMonth(day: dayMonth.0, month: dayMonth.1))\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3RecordingDayMonthContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":17}}}}],["22dc70e0-a68d-4530-ae42-d89643d347d7",{"pageContent":"//\n//  ID3RecordingHourMinuteFrameContentParsingOperationFactory.swift\n//\n//  Created by Fabrizio Duroni on 05/08/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3RecordingHourMinuteFrameContentParsingOperationFactory {\n    static func make() -> ID3FrameStringContentParsingOperation {\n        return ID3FrameStringContentParsingOperationFactory.make { (content: String) in\n            let hourMinute = ID3CoupleOfNumbersAdapter().adapt(coupleOfNumbers: content)\n            return (.recordingHourMinute, ID3FrameRecordingHourMinute(hour: hourMinute.0, minute: hourMinute.1))\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3RecordingHourMinuteFrameContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":17}}}}],["21e8a172-c0d7-4e6a-a8d3-83491cae26e6",{"pageContent":"//\n//  ID3RecordingTimeFrameContentParsingOperation.swift\n//\n//  Created by Fabrizio Duroni on 27/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3RecordingTimeFrameContentParsingOperation.swift","loc":{"lines":{"from":1,"to":8}}}}],["a256a490-c613-4f59-ab0c-c93bd579bf09",{"pageContent":"class ID3RecordingTimeFrameContentParsingOperation: FrameContentParsingOperation {\n    private let stringContentParser: ID3FrameStringContentParser\n\n    init(stringContentParser: ID3FrameStringContentParser) {\n        self.stringContentParser = stringContentParser\n    }\n\n    func parse(frame: Data, version: ID3Version, completed: (FrameName, ID3Frame) -> Void) {\n        if let frameContent = stringContentParser.parse(frame: frame, version: version) {\n            parse(content: frameContent, completed: completed)\n        }\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3RecordingTimeFrameContentParsingOperation.swift","loc":{"lines":{"from":10,"to":21}}}}],["35da8e27-f96c-4d54-b999-0856325f7f26",{"pageContent":"private func parse(content: String, completed: (FrameName, ID3Frame) -> Void) {\n        var recordingDateTime: RecordingDateTime = RecordingDateTime(\n            date: RecordingDate(day: nil, month: nil, year: nil),\n            time: RecordingTime(hour: nil, minute: nil)\n        )\n        if let frameContentAsDouble = Double(content), frameContentAsDouble > 9999 {\n            let date = Date(timeIntervalSince1970: frameContentAsDouble)\n            var calendar = Calendar(identifier: .gregorian)\n            calendar.timeZone = TimeZone(identifier: \"UTC\")!\n            recordingDateTime.date?.day = calendar.component(.day, from: date)\n            recordingDateTime.date?.month = calendar.component(.month, from: date)\n            recordingDateTime.date?.year = calendar.component(.year, from: date)\n            recordingDateTime.time?.hour = calendar.component(.hour, from: date)\n            recordingDateTime.time?.minute = calendar.component(.minute, from: date)\n        } else {\n            /*","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3RecordingTimeFrameContentParsingOperation.swift","loc":{"lines":{"from":23,"to":38}}}}],["4be3bd26-7d57-4ea9-809c-63c27d2b7f3b",{"pageContent":"recordingDateTime.time?.minute = calendar.component(.minute, from: date)\n        } else {\n            /*\n             Fallback case:\n             A lot mp3 that have a id3 tag version 2.4 use the recording time frame (\"TRDC\") in a wrong way.\n             Instead of a valid timestamp they have a 4 digit number that is equivalent to the year that was\n             previously stored inside the year of recoding frame (\"TYE\" v2.2 and \"TYER\" v2.3). So as a fallback and\n             to keep general compatibility with the mp3 taggers available we check that the content of the\n             frame is a number major than 9999: if not this is a YEAR saved inside a field with a timestamp :).\n             */\n            recordingDateTime.date?.year = Int(content)\n        }\n        completed(.recordingDateTime, ID3FrameRecordingDateTime(recordingDateTime: recordingDateTime))\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3RecordingTimeFrameContentParsingOperation.swift","loc":{"lines":{"from":36,"to":50}}}}],["61527cc7-a59f-4880-ae59-b6e57bcb987a",{"pageContent":"//\n//  ID3RecordingTimeFrameContentParsingOperationFactory.swift\n//\n//  Created by Fabrizio Duroni on 27/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3RecordingTimeFrameContentParsingOperationFactory {\n    static func make() -> ID3RecordingTimeFrameContentParsingOperation {\n        let stringContentParser = ID3FrameStringContentParserFactory.make()\n        return ID3RecordingTimeFrameContentParsingOperation(stringContentParser: stringContentParser)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3RecordingTimeFrameContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":15}}}}],["e70883cd-27c3-49d7-99e0-773968f3ed3b",{"pageContent":"//\n//  ID3StringEncoding.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 27/04/18.\n//\n\nimport Foundation\n\nenum ID3StringEncoding: UInt8 {\n    case ISO88591 = 0x00\n    case UTF16 = 0x01\n    case UTF8 = 0x03\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3StringEncoding.swift","loc":{"lines":{"from":1,"to":14}}}}],["ce555104-1d0e-44ae-bf53-b4efeb60d19e",{"pageContent":"//\n//  ID3StringEncodingConverter.swift\n//\n//  Created by Fabrizio Duroni on 24/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3StringEncodingConverter {\n    private let encodingForVersion: [ID3Version: [ID3StringEncoding: String.Encoding]] = [\n        .version2: [\n            .ISO88591: .isoLatin1,\n            .UTF16: .utf16\n        ],\n        .version3: [\n            .ISO88591: .isoLatin1,\n            .UTF16: .utf16\n        ],\n        .version4: [\n            .ISO88591: .isoLatin1,\n            .UTF16: .utf16,\n            .UTF8: .utf8\n        ]\n    ]\n\n    func convert(id3Encoding: ID3StringEncoding?, version: ID3Version) -> String.Encoding {\n        if let validId3Encoding = id3Encoding,\n            let validEncodingForVersion = encodingForVersion[version],\n            let validEncoding = validEncodingForVersion[validId3Encoding] {\n            return validEncoding\n        }\n        return .isoLatin1\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3StringEncodingConverter.swift","loc":{"lines":{"from":1,"to":35}}}}],["241a4a14-66eb-464f-9121-8f85b53b7d44",{"pageContent":"//\n//  ID3TagParser.swift\n//\n//  Created by Fabrizio Duroni on 20/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TagParser.swift","loc":{"lines":{"from":1,"to":8}}}}],["4212963e-d5dc-4203-918a-f8ad5e0dc8dd",{"pageContent":"class ID3TagParser {\n    private let tagSizeParser: TagSizeParser\n    private let id3TagConfiguration: ID3TagConfiguration\n    private let tagVersionParser: TagVersionParser\n    private let tagPresence: TagPresence\n    private let framesParser: ID3FramesParser\n\n    init(tagVersionParser: TagVersionParser,\n         tagPresence: TagPresence,\n         tagSizeParser: TagSizeParser,\n         id3TagConfiguration: ID3TagConfiguration,\n         frameParser: ID3FramesParser) {\n        self.tagVersionParser = tagVersionParser\n        self.tagPresence = tagPresence\n        self.tagSizeParser = tagSizeParser\n        self.framesParser = frameParser\n        self.id3TagConfiguration = id3TagConfiguration\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TagParser.swift","loc":{"lines":{"from":10,"to":27}}}}],["2db932bc-783b-484f-9dbc-bf945db85029",{"pageContent":"func parse(mp3: Data) throws -> ID3Tag? {\n        let version = tagVersionParser.parse(mp3: mp3 as Data)\n        if tagPresence.isTagPresentIn(mp3: mp3 as Data, version: version) {\n            let id3Tag = ID3Tag(version: version, frames: [:])\n            parseTagSizeFor(mp3: mp3 as NSData, andSaveInId3Tag: id3Tag)\n            try validate(tagSize: id3Tag.properties.size, mp3: mp3)\n            framesParser.parse(mp3: mp3 as NSData, id3Tag: id3Tag)\n            return id3Tag\n        }\n        return nil\n    }\n\n    private func parseTagSizeFor(mp3: NSData, andSaveInId3Tag id3Tag: ID3Tag) {\n        id3Tag.properties.size = tagSizeParser.parse(data: mp3)\n    }\n\n    func validate(tagSize: UInt32, mp3: Data) throws {\n        if mp3.count < (Int(tagSize) + id3TagConfiguration.headerSize()) {\n            throw ID3TagEditorError.corruptedFile\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TagParser.swift","loc":{"lines":{"from":29,"to":50}}}}],["21ca7bdf-a806-4ee0-8b0a-24574c764ebc",{"pageContent":"//\n//  ID3TagParserFactory.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TagParserFactory.swift","loc":{"lines":{"from":1,"to":8}}}}],["aceed1b2-e2fb-413a-814d-869cfcd9499d",{"pageContent":"class ID3TagParserFactory {\n    static func make() -> ID3TagParser {\n        let id3FrameConfiguration = ID3FrameConfiguration()\n        let id3TagConfiguration = ID3TagConfiguration()\n        let id3TagParser = ID3TagParser(\n            tagVersionParser: ID3TagVersionParser(),\n            tagPresence: ID3TagPresence(id3TagConfiguration: id3TagConfiguration),\n            tagSizeParser: ID3TagSizeParser(),\n            id3TagConfiguration: id3TagConfiguration,\n            frameParser: ID3FramesParser(\n                frameSizeParser: ID3FrameSizeParser(\n                    frameContentSizeParser: ID3FrameContentSizeParser(\n                        id3FrameConfiguration: id3FrameConfiguration,\n                        synchsafeIntegerDecoder: SynchsafeIntegerDecoder()),\n                    id3FrameConfiguration: id3FrameConfiguration\n                ),\n                id3FrameParser: ID3FrameParser(\n                    frameContentParsingOperations: ID3FrameContentParsingOperationFactory.make(),","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TagParserFactory.swift","loc":{"lines":{"from":10,"to":27}}}}],["81773f86-a03e-4a22-8b1a-183d27337419",{"pageContent":"frameContentParsingOperations: ID3FrameContentParsingOperationFactory.make(),\n                    id3FrameConfiguration: id3FrameConfiguration\n                ),\n                id3TagConfiguration: id3TagConfiguration\n            )\n        )\n        return id3TagParser\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TagParserFactory.swift","loc":{"lines":{"from":27,"to":35}}}}],["6d797368-544c-4fe7-a2f5-9b0de7bc3d11",{"pageContent":"//\n//  ID3TagSizeParser.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3TagSizeParser: TagSizeParser {\n    private let tagBytesOffset = 6\n\n    func parse(data: NSData) -> UInt32 {\n        let tagSize = (data.bytes + tagBytesOffset).assumingMemoryBound(to: UInt32.self).pointee.bigEndian\n        let decodedTagSize = SynchsafeIntegerDecoder().decode(integer: tagSize)\n        return decodedTagSize\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TagSizeParser.swift","loc":{"lines":{"from":1,"to":18}}}}],["f48ff79a-d208-4720-b786-ea70d7e3d312",{"pageContent":"//\n//  ID3TagVersionParser.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3TagVersionParser: TagVersionParser {\n    private let versionBytesOffset = 3\n\n    func parse(mp3: Data) -> ID3Version {\n        let version = ID3Version.version3\n        if let validVersion = tryToGetVersionFrom(mp3: mp3) {\n            return validVersion\n        }\n        return version\n    }\n\n    private func tryToGetVersionFrom(mp3: Data) -> ID3Version? {\n        guard mp3.count > versionBytesOffset else { return nil }\n\n        let version = [UInt8](mp3)[versionBytesOffset]\n        return ID3Version(rawValue: version)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TagVersionParser.swift","loc":{"lines":{"from":1,"to":27}}}}],["c98da04b-0e2c-4801-ade9-da2f3d3768fa",{"pageContent":"//\n//  ID3TrackPositionContentParsingOperationFactory.swift\n//\n//  Created by Fabrizio Duroni on 27/07/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3TrackPositionFrameContentParsingOperationFactory {\n    static func make() -> ID3FrameStringContentParsingOperation {\n        return ID3FrameStringContentParsingOperationFactory.make { (content: String) in\n            return (.trackPosition, ID3PartOfTotalStringAdapter().adapt(partOfTotal: content))\n        }\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/ID3TrackPositionFrameContentParsingOperationFactory.swift","loc":{"lines":{"from":1,"to":16}}}}],["241ec75a-b34b-4528-b701-54951fab8b4b",{"pageContent":"//\n//  TrackPositionStringAdapter.swift\n//\n//  Created by Fabrizio Duroni on 08/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol PartOfTotalStringAdapter {\n    func adapt(partOfTotal: String) -> ID3FramePartOfTotal\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/PartOfTotalStringAdapter.swift","loc":{"lines":{"from":1,"to":12}}}}],["ce14fe90-6760-4009-bc1a-930f5d48fa29",{"pageContent":"//\n//  PictureTypeAdapter.swift\n//\n//  Created by Fabrizio Duroni on 06/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol PictureTypeAdapter {\n    func adapt(frame: Data, format: ID3PictureFormat, version: ID3Version) -> ID3PictureType\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/PictureTypeAdapter.swift","loc":{"lines":{"from":1,"to":12}}}}],["758b9aba-f0e7-44b7-8231-d11ec8c7ac6a",{"pageContent":"//\n//  TagSizeParser.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol TagSizeParser {\n    func parse(data: NSData) -> UInt32\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/TagSizeParser.swift","loc":{"lines":{"from":1,"to":12}}}}],["fa6b4eda-deb3-4d40-82c0-c60eba964cec",{"pageContent":"//\n//  TagVersionParser.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol TagVersionParser {\n    func parse(mp3: Data) -> ID3Version\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Parse/TagVersionParser.swift","loc":{"lines":{"from":1,"to":12}}}}],["0dd5b96d-fd47-40f7-91cd-0d099272ab8c",{"pageContent":"//\n//  ID32v2TagBuilder.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 24.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n Builder used to create a ID32v2 tag.\n It let the user set all the frames included in ID32TagCommonStringFramesBuilder,\n ID32TagCommonCompositeFramesBuilder and RecordingHourMinuteDayMonthYearFramesBuilder.\n */\npublic class ID32v2TagBuilder: TagBuilder {\n    var frames: [FrameName: ID3Frame] = [:]\n\n    /**\n     Init a ID32v2TagBuilder instance.\n     */\n    public init() {}\n\n    /**\n      Set the title frame to be written by ID3TagEditor.\n     \n      - parameter frame: the title frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func title(frame: ID3FrameWithStringContent) -> Self {\n        frames[.title] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":1,"to":34}}}}],["28f5a083-e048-477d-b635-71b1ac698914",{"pageContent":"/**\n      Set the album frame to be written by ID3TagEditor.\n     \n      - parameter frame: the album frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func album(frame: ID3FrameWithStringContent) -> Self {\n        frames[.album] = frame\n        return self\n    }\n\n    /**\n      Set the albumArtist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the albumArtist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func albumArtist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.albumArtist] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":36,"to":58}}}}],["1595b766-0372-4b25-abf7-49e4ab99e0bb",{"pageContent":"/**\n      Set the artist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the artist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func artist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.artist] = frame\n        return self\n    }\n\n    /**\n      Set the composer frame to be written by ID3TagEditor.\n     \n      - parameter frame: the composer frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func composer(frame: ID3FrameWithStringContent) -> Self {\n        frames[.composer] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":60,"to":82}}}}],["2a7ee390-0ebc-4197-9c0e-e8cc351cd11d",{"pageContent":"/**\n      Set the conductor frame to be written by ID3TagEditor.\n     \n      - parameter frame: the conductor frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func conductor(frame: ID3FrameWithStringContent) -> Self {\n        frames[.conductor] = frame\n        return self\n    }\n\n    /**\n      Set the content grouping frame to be written by ID3TagEditor.\n     \n      - parameter frame: the contentGrouping frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func contentGrouping(frame: ID3FrameWithStringContent) -> Self {\n        frames[.contentGrouping] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":84,"to":106}}}}],["e2e994f7-b407-49e6-b3f3-5863b534f644",{"pageContent":"/**\n      Set the copyright frame to be written by ID3TagEditor.\n     \n      - parameter frame: the copyright frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func copyright(frame: ID3FrameWithStringContent) -> Self {\n        frames[.copyright] = frame\n        return self\n    }\n\n    /**\n      Set the encoded by frame to be written by ID3TagEditor.\n     \n      - parameter frame: the encodedBy frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func encodedBy(frame: ID3FrameWithStringContent) -> Self {\n        frames[.encodedBy] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":108,"to":130}}}}],["56e78783-d5fe-41be-9f31-2a2cca6a1a39",{"pageContent":"/**\n      Set the encoder settings frame to be written by ID3TagEditor.\n     \n      - parameter frame: the encoderSettings frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func encoderSettings(frame: ID3FrameWithStringContent) -> Self {\n        frames[.encoderSettings] = frame\n        return self\n    }\n\n    /**\n      Set the lyricist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the lyricist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func lyricist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.lyricist] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":132,"to":154}}}}],["e8886d46-7aa0-4c7c-8ebe-c167307d8da1",{"pageContent":"/**\n      Set the mix artist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the mixArtist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func mixArtist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.mixArtist] = frame\n        return self\n    }\n\n    /**\n      Set the publisher frame to be written by ID3TagEditor.\n     \n      - parameter frame: the publisher frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func publisher(frame: ID3FrameWithStringContent) -> Self {\n        frames[.publisher] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":156,"to":178}}}}],["3e97101d-176b-40c9-b5c1-3814de655deb",{"pageContent":"/**\n      Set the subtitle frame to be written by ID3TagEditor.\n     \n      - parameter frame: the subtitle frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func subtitle(frame: ID3FrameWithStringContent) -> Self {\n        frames[.subtitle] = frame\n        return self\n    }\n\n    /**\n      Set the beats per minute frame to be written by ID3TagEditor.\n     \n      - parameter frame: the beats per minute frame as a ID3FrameWithIntegerContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func beatsPerMinute(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.beatsPerMinute] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":180,"to":202}}}}],["eb382b63-2782-47f4-ab58-6435ee6f84f2",{"pageContent":"/**\n      Set the original filename frame to be written by ID3TagEditor.\n     \n      - parameter frame: the original filename frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func originalFilename(frame: ID3FrameWithStringContent) -> Self {\n        frames[.originalFilename] = frame\n        return self\n    }\n\n    /**\n      Set the length in milliseconds frame to be written by ID3TagEditor.\n     \n      - parameter frame: the length in milliseconds  frame as a ID3FrameWithIntegerContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func lengthInMilliseconds(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.lengthInMilliseconds] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":204,"to":226}}}}],["72c85aec-e1c1-462d-a43c-11bc8bd944b1",{"pageContent":"/**\n      Set the size in bytes frame to be written by ID3TagEditor.\n     \n      - parameter frame: the size in byes  frame as a ID3FrameWithIntegerContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func sizeInBytes(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.sizeInBytes] = frame\n        return self\n    }\n\n    /**\n      Set the genre frame to be written by ID3TagEditor.\n     \n      - parameter frame: the genre frame as a ID3FrameGenre instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func genre(frame: ID3FrameGenre) -> Self {\n        frames[.genre] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":228,"to":250}}}}],["56fcf63b-8e25-4be0-a7ed-74912bc6ed61",{"pageContent":"/**\n      Set the disc position frame to be written by ID3TagEditor.\n     \n      - parameter frame: the discPosition frame as a ID3FramePartOfTotal instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func discPosition(frame: ID3FramePartOfTotal) -> Self {\n        frames[.discPosition] = frame\n        return self\n    }\n\n    /**\n      Set the trackPosition frame to be written by ID3TagEditor.\n     \n      - parameter frame: the trackPosition frame as a ID3FramePartOfTotal instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func trackPosition(frame: ID3FramePartOfTotal) -> Self {\n        frames[.trackPosition] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":252,"to":274}}}}],["1e1ce874-1e28-4e0b-aeca-da46e0f8a27d",{"pageContent":"/**\n     Set an attached picture frame to be written by ID3TagEditor. You can set multiple\n     attached picture frames per tag, one for each of the picture types contained in ID3PictureType.\n     \n      - parameter pictureType: the ID3PictureType associated to the attachedPicture frame to be set.\n      - parameter frame: the attachedPicture frame as a ID3FrameAttachedPicture instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func attachedPicture(pictureType: ID3PictureType, frame: ID3FrameAttachedPicture) -> Self {\n        frames[.attachedPicture(pictureType)] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":276,"to":288}}}}],["7e6a1471-d4f0-4765-94c9-983891ef158f",{"pageContent":"/**\n     Set an unsynchronised lyrics frame to be written by ID3TagEditor. You can set multiple\n     unsynchronised lyrics frames per tag, one for each of the languages contained in ID3FrameContentLanguage.\n     \n      - parameter language: the ID3FrameContentLanguage associated to the unsynchronisedLyrics frame to be set.\n      - parameter frame: the unsynchronisedLyrics frame as a ID3FrameWithLocalizedContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func unsynchronisedLyrics(language: ID3FrameContentLanguage,\n                                     frame: ID3FrameWithLocalizedContent) -> Self {\n        frames[.unsynchronizedLyrics(language)] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":290,"to":303}}}}],["77353e8d-c0f5-4b97-9c0f-e8d1a8612a70",{"pageContent":"/**\n     Set a comment frame to be written by ID3TagEditor. You can set multiple\n     comment frames per tag, one for each of the languages contained in ID3FrameContentLanguage.\n     \n      - parameter language: the ID3FrameContentLanguage associated to the comment frame to be set.\n      - parameter frame: the comment frame as a ID3FrameWithLocalizedContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func comment(language: ID3FrameContentLanguage,\n                        frame: ID3FrameWithLocalizedContent) -> Self {\n        frames[.comment(language)] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":305,"to":318}}}}],["94a27210-c051-4267-a080-ff2e5b34fb23",{"pageContent":"/**\n      Set the recording day and month frame to be written by ID3TagEditor.\n     \n      - parameter frame: the recordingDayMonth frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func recordingDayMonth(frame: ID3FrameRecordingDayMonth) -> Self {\n        frames[.recordingDayMonth] = frame\n        return self\n    }\n\n    /**\n      Set the recording hour minute frame to be written by ID3TagEditor.\n     \n      - parameter frame: the recordingHourMinute frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func recordingHourMinute(frame: ID3FrameRecordingHourMinute) -> Self {\n        frames[.recordingHourMinute] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":320,"to":342}}}}],["2e43fe24-b698-4f0e-8142-711e248936c2",{"pageContent":"/**\n      Set the recording year frame to be written by ID3TagEditor.\n     \n      - parameter frame: the recordingYear frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func recordingYear(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.recordingYear] = frame\n        return self\n    }\n\n    /**\n     Build and ID3Tag version 2.\n     \n      - returns: an ID3Tag version 2 instance to use with the write function of ID3TagEditor.\n     */\n    public func build() -> ID3Tag {\n        return ID3Tag(version: .version2, frames: frames)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v2TagBuilder.swift","loc":{"lines":{"from":344,"to":364}}}}],["2a202ecb-e340-4c77-9fb5-94ea4b1d0162",{"pageContent":"//\n//  ID32v3TagBuilder.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 24.10.20.\n//  2020 Fabrizio Duroni.\n//\n\n// swiftlint:disable file_length\n\nimport Foundation\n\n/**\n Builder used to create a ID32v3 tag.\n It let the user set all the frames included in ID32TagCommonStringFramesBuilder, ID32TagCommonCompositeFramesBuilder,\n RecordingHourMinuteDayMonthYearFramesBuilder, FileOwnerFrameBuilder and ITunesFramesBuilder.\n */\npublic class ID32v3TagBuilder: TagBuilder {\n    var frames: [FrameName: ID3Frame] = [:]\n\n    /**\n     Init a ID32v3TagBuilder instance.\n     */\n    public init() {}\n\n    /**\n      Set the title frame to be written by ID3TagEditor.\n     \n      - parameter frame: the title frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func title(frame: ID3FrameWithStringContent) -> Self {\n        frames[.title] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":1,"to":36}}}}],["3d75073d-e5e8-4bd3-b776-272f12697237",{"pageContent":"/**\n      Set the album frame to be written by ID3TagEditor.\n     \n      - parameter frame: the album frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func album(frame: ID3FrameWithStringContent) -> Self {\n        frames[.album] = frame\n        return self\n    }\n\n    /**\n      Set the albumArtist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the albumArtist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func albumArtist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.albumArtist] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":38,"to":60}}}}],["1980b232-f60a-463d-b158-6e55bc85d993",{"pageContent":"/**\n      Set the artist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the artist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func artist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.artist] = frame\n        return self\n    }\n\n    /**\n      Set the composer frame to be written by ID3TagEditor.\n     \n      - parameter frame: the composer frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func composer(frame: ID3FrameWithStringContent) -> Self {\n        frames[.composer] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":62,"to":84}}}}],["726cee4d-5fbb-4008-8eb5-138a7a72a0c7",{"pageContent":"/**\n      Set the conductor frame to be written by ID3TagEditor.\n     \n      - parameter frame: the conductor frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func conductor(frame: ID3FrameWithStringContent) -> Self {\n        frames[.conductor] = frame\n        return self\n    }\n\n    /**\n      Set the content grouping frame to be written by ID3TagEditor.\n     \n      - parameter frame: the contentGrouping frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func contentGrouping(frame: ID3FrameWithStringContent) -> Self {\n        frames[.contentGrouping] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":86,"to":108}}}}],["6ee25e94-af31-470f-ad69-be2f98808cef",{"pageContent":"/**\n      Set the copyright frame to be written by ID3TagEditor.\n     \n      - parameter frame: the copyright frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func copyright(frame: ID3FrameWithStringContent) -> Self {\n        frames[.copyright] = frame\n        return self\n    }\n\n    /**\n      Set the encoded by frame to be written by ID3TagEditor.\n     \n      - parameter frame: the encodedBy frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func encodedBy(frame: ID3FrameWithStringContent) -> Self {\n        frames[.encodedBy] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":110,"to":132}}}}],["f46f10d1-d778-4d24-99b7-cd2fb9c84bfe",{"pageContent":"/**\n      Set the encoder settings frame to be written by ID3TagEditor.\n     \n      - parameter frame: the encoderSettings frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func encoderSettings(frame: ID3FrameWithStringContent) -> Self {\n        frames[.encoderSettings] = frame\n        return self\n    }\n\n    /**\n      Set the lyricist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the lyricist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func lyricist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.lyricist] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":134,"to":156}}}}],["1998646f-7b80-46c8-a231-7c84ecc370b9",{"pageContent":"/**\n      Set the mix artist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the mixArtist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func mixArtist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.mixArtist] = frame\n        return self\n    }\n\n    /**\n      Set the publisher frame to be written by ID3TagEditor.\n     \n      - parameter frame: the publisher frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func publisher(frame: ID3FrameWithStringContent) -> Self {\n        frames[.publisher] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":158,"to":180}}}}],["d2d46f78-844c-48e4-b304-bebe79d8acdb",{"pageContent":"/**\n      Set the subtitle frame to be written by ID3TagEditor.\n     \n      - parameter frame: the subtitle frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func subtitle(frame: ID3FrameWithStringContent) -> Self {\n        frames[.subtitle] = frame\n        return self\n    }\n\n    /**\n      Set the beats per minute frame to be written by ID3TagEditor.\n     \n      - parameter frame: the beats per minute frame as a ID3FrameWithIntegerContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func beatsPerMinute(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.beatsPerMinute] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":182,"to":204}}}}],["0b0e6dc5-5b07-4e56-806f-f58b5df6fc6d",{"pageContent":"/**\n      Set the original filename frame to be written by ID3TagEditor.\n     \n      - parameter frame: the original filename frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func originalFilename(frame: ID3FrameWithStringContent) -> Self {\n        frames[.originalFilename] = frame\n        return self\n    }\n\n    /**\n      Set the length in milliseconds frame to be written by ID3TagEditor.\n     \n      - parameter frame: the length in milliseconds  frame as a ID3FrameWithIntegerContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func lengthInMilliseconds(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.lengthInMilliseconds] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":206,"to":228}}}}],["4b864d2c-69e6-4021-b88e-c93c0cc0ec5d",{"pageContent":"/**\n      Set the size in bytes frame to be written by ID3TagEditor.\n     \n      - parameter frame: the size in byes  frame as a ID3FrameWithIntegerContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func sizeInBytes(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.sizeInBytes] = frame\n        return self\n    }\n\n    /**\n      Set the genre frame to be written by ID3TagEditor.\n     \n      - parameter frame: the genre frame as a ID3FrameGenre instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func genre(frame: ID3FrameGenre) -> Self {\n        frames[.genre] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":230,"to":252}}}}],["c081ab27-7640-4e95-8827-607608a1970a",{"pageContent":"/**\n      Set the disc position frame to be written by ID3TagEditor.\n     \n      - parameter frame: the discPosition frame as a ID3FramePartOfTotal instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func discPosition(frame: ID3FramePartOfTotal) -> Self {\n        frames[.discPosition] = frame\n        return self\n    }\n\n    /**\n      Set the track position frame to be written by ID3TagEditor.\n     \n      - parameter frame: the trackPosition frame as a ID3FramePartOfTotal instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func trackPosition(frame: ID3FramePartOfTotal) -> Self {\n        frames[.trackPosition] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":254,"to":276}}}}],["a1ac29bc-8cbf-4483-b411-bc44bca3846f",{"pageContent":"/**\n     Set an attached picture frame to be written by ID3TagEditor. You can set multiple\n     attached picture frames per tag, one for each of the picture types contained in ID3PictureType.\n     \n      - parameter pictureType: the ID3PictureType associated to the attachedPicture frame to be set.\n      - parameter frame: the attachedPicture frame as a ID3FrameAttachedPicture instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func attachedPicture(pictureType: ID3PictureType, frame: ID3FrameAttachedPicture) -> Self {\n        frames[.attachedPicture(pictureType)] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":278,"to":290}}}}],["a3aad392-f7fc-424f-8c47-aca5cc74b86c",{"pageContent":"/**\n     Set an unsynchronised lyrics frame to be written by ID3TagEditor. You can set multiple\n     unsynchronised lyrics frames per tag, one for each of the languages contained in ID3FrameContentLanguage.\n     \n      - parameter language: the ID3FrameContentLanguage associated to the unsynchronisedLyrics frame to be set.\n      - parameter frame: the unsynchronisedLyrics frame as a ID3FrameWithLocalizedContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func unsynchronisedLyrics(language: ID3FrameContentLanguage,\n                                     frame: ID3FrameWithLocalizedContent) -> Self {\n        frames[.unsynchronizedLyrics(language)] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":292,"to":305}}}}],["fb545557-471a-4973-81cc-9e968a0695ac",{"pageContent":"/**\n     Set a comment frame to be written by ID3TagEditor. You can set multiple\n     comment frames per tag, one for each of the languages contained in ID3FrameContentLanguage.\n     \n      - parameter language: the ID3FrameContentLanguage associated to the comment frame to be set.\n      - parameter frame: the comment frame as a ID3FrameWithLocalizedContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func comment(language: ID3FrameContentLanguage,\n                        frame: ID3FrameWithLocalizedContent) -> Self {\n        frames[.comment(language)] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":307,"to":320}}}}],["d6282905-f6db-4a9f-94e5-3beeded4b154",{"pageContent":"/**\n      Set the recording day and month frame to be written by ID3TagEditor.\n     \n      - parameter frame: the recordingDayMonth frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func recordingDayMonth(frame: ID3FrameRecordingDayMonth) -> Self {\n        frames[.recordingDayMonth] = frame\n        return self\n    }\n\n    /**\n      Set the recording  hour minute frame to be written by ID3TagEditor.\n     \n      - parameter frame: the recordingHourMinute frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func recordingHourMinute(frame: ID3FrameRecordingHourMinute) -> Self {\n        frames[.recordingHourMinute] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":322,"to":344}}}}],["ff27875b-31f3-4ec3-ac83-373eba0bd099",{"pageContent":"/**\n      Set the recording year frame to be written by ID3TagEditor.\n     \n      - parameter frame: the recordingYear frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func recordingYear(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.recordingYear] = frame\n        return self\n    }\n\n    /**\n      Set the iTunesGrouping frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesGrouping frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesGrouping(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesGrouping] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":346,"to":368}}}}],["f1d9d813-c807-4301-a3bd-c78c15a150f0",{"pageContent":"/**\n      Set the iTunesGrouping frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesMovementName frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesMovementName(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesMovementName] = frame\n        return self\n    }\n\n    /**\n      Set the iTunesMovementIndex frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesMovementIndex frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesMovementIndex(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.iTunesMovementIndex] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":370,"to":392}}}}],["ff3b4718-eac4-45a6-be61-f3557fae7c6e",{"pageContent":"/**\n      Set the iTunesMovementCount frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesMovementCount frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesMovementCount(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.iTunesMovementCount] = frame\n        return self\n    }\n\n    /**\n      Set the iTunesPodcastCategory frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesPodcastCategory frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesPodcastCategory(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesPodcastCategory] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":394,"to":416}}}}],["ae258eb4-2085-4350-8279-695fcb606c21",{"pageContent":"/**\n      Set the iTunesPodcastDescription frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesPodcastDescription frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesPodcastDescription(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesPodcastDescription] = frame\n        return self\n    }\n\n    /**\n      Set the iTunesPodcastID frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesPodcastID frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesPodcastID(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesPodcastID] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":418,"to":440}}}}],["e39122db-cec7-4be7-9878-38dc09f5ed1b",{"pageContent":"/**\n      Set the iTunesPodcastKeywords frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesPodcastKeywords frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesPodcastKeywords(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesPodcastKeywords] = frame\n        return self\n    }\n\n    /**\n      Set the fileOwner frame to be written by ID3TagEditor.\n     \n      - parameter frame: the fileOwner frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func fileOwner(frame: ID3FrameWithStringContent) -> Self {\n        frames[.fileOwner] = frame\n        return self\n    }\n\n    /**\n     Build and ID3Tag version 3.\n     \n      - returns: an ID3Tag version 3 instance to use with the write function of ID3TagEditor.\n     */\n    public func build() -> ID3Tag {\n        return ID3Tag(version: .version3, frames: frames)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v3TagBuilder.swift","loc":{"lines":{"from":442,"to":474}}}}],["96e4968c-3a18-43bd-8517-f48babdb61a8",{"pageContent":"//\n//  ID32v4TagBuilder.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 24.10.20.\n//  2020 Fabrizio Duroni.\n//\n\n// swiftlint:disable file_length\n\nimport Foundation\n\n/**\n Builder used to create a ID32v4 tag.\n It let the user set all the frames included in ID32TagCommonStringFramesBuilder, ID32TagCommonCompositeFramesBuilder,\n RecordingDateTimeFrameBuilder, FileOwnerFrameBuilder and ITunesFramesBuilder.\n */\npublic class ID32v4TagBuilder: TagBuilder {\n    var frames: [FrameName: ID3Frame] = [:]\n\n    /**\n     Init a ID32v4TagBuilder instance.\n     */\n    public init() {}\n\n    /**\n      Set the title frame to be written by ID3TagEditor.\n     \n      - parameter frame: the title frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func title(frame: ID3FrameWithStringContent) -> Self {\n        frames[.title] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":1,"to":36}}}}],["d94d102e-1161-410b-a7f8-97e9e0c1b8c8",{"pageContent":"/**\n      Set the album frame to be written by ID3TagEditor.\n     \n      - parameter frame: the album frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func album(frame: ID3FrameWithStringContent) -> Self {\n        frames[.album] = frame\n        return self\n    }\n\n    /**\n      Set the albumArtist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the albumArtist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func albumArtist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.albumArtist] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":38,"to":60}}}}],["a3908c1b-78a1-4c43-8463-b2445054cba9",{"pageContent":"/**\n      Set the artist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the artist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func artist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.artist] = frame\n        return self\n    }\n\n    /**\n      Set the composer frame to be written by ID3TagEditor.\n     \n      - parameter frame: the composer frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func composer(frame: ID3FrameWithStringContent) -> Self {\n        frames[.composer] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":62,"to":84}}}}],["923aef31-2a1a-4826-8289-f308a62c90e9",{"pageContent":"/**\n      Set the conductor frame to be written by ID3TagEditor.\n     \n      - parameter frame: the conductor frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func conductor(frame: ID3FrameWithStringContent) -> Self {\n        frames[.conductor] = frame\n        return self\n    }\n\n    /**\n      Set the content grouping frame to be written by ID3TagEditor.\n     \n      - parameter frame: the contentGrouping frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func contentGrouping(frame: ID3FrameWithStringContent) -> Self {\n        frames[.contentGrouping] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":86,"to":108}}}}],["aa5523c4-240d-47f1-a405-999ea3518576",{"pageContent":"/**\n      Set the copyright frame to be written by ID3TagEditor.\n     \n      - parameter frame: the copyright frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func copyright(frame: ID3FrameWithStringContent) -> Self {\n        frames[.copyright] = frame\n        return self\n    }\n\n    /**\n      Set the encoded by frame to be written by ID3TagEditor.\n     \n      - parameter frame: the encodedBy frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func encodedBy(frame: ID3FrameWithStringContent) -> Self {\n        frames[.encodedBy] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":110,"to":132}}}}],["9e6589b9-3b59-4181-a98f-bce05557539c",{"pageContent":"/**\n      Set the encoder settings frame to be written by ID3TagEditor.\n     \n      - parameter frame: the encoderSettings frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func encoderSettings(frame: ID3FrameWithStringContent) -> Self {\n        frames[.encoderSettings] = frame\n        return self\n    }\n\n    /**\n      Set the lyricist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the lyricist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func lyricist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.lyricist] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":134,"to":156}}}}],["25c55b88-2055-40b7-a401-7866f447888e",{"pageContent":"/**\n      Set the mix artist frame to be written by ID3TagEditor.\n     \n      - parameter frame: the mixArtist frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func mixArtist(frame: ID3FrameWithStringContent) -> Self {\n        frames[.mixArtist] = frame\n        return self\n    }\n\n    /**\n      Set the publisher frame to be written by ID3TagEditor.\n     \n      - parameter frame: the publisher frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func publisher(frame: ID3FrameWithStringContent) -> Self {\n        frames[.publisher] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":158,"to":180}}}}],["72a4bbf3-eca6-4b8b-8068-231fd9f21fcc",{"pageContent":"/**\n      Set the subtitle frame to be written by ID3TagEditor.\n     \n      - parameter frame: the subtitle frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func subtitle(frame: ID3FrameWithStringContent) -> Self {\n        frames[.subtitle] = frame\n        return self\n    }\n\n    /**\n      Set the beats per minute frame to be written by ID3TagEditor.\n     \n      - parameter frame: the beats per minute frame as a ID3FrameWithIntegerContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func beatsPerMinute(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.beatsPerMinute] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":182,"to":204}}}}],["2f42c537-64f0-4647-983d-cf1bd9de54e8",{"pageContent":"/**\n      Set the original filename frame to be written by ID3TagEditor.\n     \n      - parameter frame: the original filename frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func originalFilename(frame: ID3FrameWithStringContent) -> Self {\n        frames[.originalFilename] = frame\n        return self\n    }\n\n    /**\n      Set the length in milliseconds frame to be written by ID3TagEditor.\n     \n      - parameter frame: the length in milliseconds  frame as a ID3FrameWithIntegerContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func lengthInMilliseconds(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.lengthInMilliseconds] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":206,"to":228}}}}],["e81857c3-65b5-4912-a864-b56923ac92ae",{"pageContent":"/**\n      Set the genre frame to be written by ID3TagEditor.\n     \n      - parameter frame: the genre frame as a ID3FrameGenre instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func genre(frame: ID3FrameGenre) -> Self {\n        frames[.genre] = frame\n        return self\n    }\n\n    /**\n      Set the disc position frame to be written by ID3TagEditor.\n     \n      - parameter frame: the discPosition frame as a ID3FramePartOfTotal instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func discPosition(frame: ID3FramePartOfTotal) -> Self {\n        frames[.discPosition] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":230,"to":252}}}}],["6d278e19-55bf-4849-b7aa-f480c74aa166",{"pageContent":"/**\n      Set the track position frame to be written by ID3TagEditor.\n     \n      - parameter frame: the trackPosition frame as a ID3FramePartOfTotal instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func trackPosition(frame: ID3FramePartOfTotal) -> Self {\n        frames[.trackPosition] = frame\n        return self\n    }\n\n    /**\n     Set an attached picture frame to be written by ID3TagEditor. You can set multiple\n     attached picture frames per tag, one for each of the picture types contained in ID3PictureType.\n     \n      - parameter pictureType: the ID3PictureType associated to the attachedPicture frame to be set.\n      - parameter frame: the attachedPicture frame as a ID3FrameAttachedPicture instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func attachedPicture(pictureType: ID3PictureType, frame: ID3FrameAttachedPicture) -> Self {\n        frames[.attachedPicture(pictureType)] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":254,"to":278}}}}],["50af3d87-d97d-4587-b4fa-3f2b9260027e",{"pageContent":"/**\n     Set an unsynchronised lyrics frame to be written by ID3TagEditor. You can set multiple\n     unsynchronised lyrics frames per tag, one for each of the languages contained in ID3FrameContentLanguage.\n     \n      - parameter language: the ID3FrameContentLanguage associated to the unsynchronisedLyrics frame to be set.\n      - parameter frame: the unsynchronisedLyrics frame as a ID3FrameWithLocalizedContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func unsynchronisedLyrics(language: ID3FrameContentLanguage,\n                                     frame: ID3FrameWithLocalizedContent) -> Self {\n        frames[.unsynchronizedLyrics(language)] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":280,"to":293}}}}],["f615202c-5221-4e0b-9887-2ed1ed072b01",{"pageContent":"/**\n     Set a comment frame to be written by ID3TagEditor. You can set multiple\n     comment frames per tag, one for each of the languages contained in ID3FrameContentLanguage.\n     \n      - parameter language: the ID3FrameContentLanguage associated to the comment frame to be set.\n      - parameter frame: the comment frame as a ID3FrameWithLocalizedContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func comment(language: ID3FrameContentLanguage,\n                        frame: ID3FrameWithLocalizedContent) -> Self {\n        frames[.comment(language)] = frame\n        return self\n    }\n\n    /**\n      Set the recordingDateTime frame to be written by ID3TagEditor.\n     \n      - parameter frame: the recordingDateTime frame as a ID3FrameRecordingDateTime instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func recordingDateTime(frame: ID3FrameRecordingDateTime) -> Self {\n        frames[.recordingDateTime] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":295,"to":320}}}}],["5c998598-d2bb-4d81-8a06-ae25fff379ca",{"pageContent":"/**\n      Set the iTunesGrouping frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesGrouping frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesGrouping(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesGrouping] = frame\n        return self\n    }\n\n    /**\n      Set the iTunesGrouping frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesMovementName frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesMovementName(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesMovementName] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":322,"to":344}}}}],["ab8523da-7099-4bbc-abe9-04f8936d45ee",{"pageContent":"/**\n      Set the iTunesMovementIndex frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesMovementIndex frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesMovementIndex(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.iTunesMovementIndex] = frame\n        return self\n    }\n\n    /**\n      Set the iTunesMovementCount frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesMovementCount frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesMovementCount(frame: ID3FrameWithIntegerContent) -> Self {\n        frames[.iTunesMovementCount] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":346,"to":368}}}}],["64acf13a-14d9-4187-9ce3-dd58ad849b64",{"pageContent":"/**\n      Set the iTunesPodcastCategory frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesPodcastCategory frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesPodcastCategory(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesPodcastCategory] = frame\n        return self\n    }\n\n    /**\n      Set the iTunesPodcastDescription frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesPodcastDescription frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesPodcastDescription(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesPodcastDescription] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":370,"to":392}}}}],["fda2564e-74c5-42c3-957f-2efae907b0d0",{"pageContent":"/**\n      Set the iTunesPodcastID frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesPodcastID frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesPodcastID(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesPodcastID] = frame\n        return self\n    }\n\n    /**\n      Set the iTunesPodcastKeywords frame to be written by ID3TagEditor.\n     \n      - parameter frame: the iTunesPodcastKeywords frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func iTunesPodcastKeywords(frame: ID3FrameWithStringContent) -> Self {\n        frames[.iTunesPodcastKeywords] = frame\n        return self\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":394,"to":416}}}}],["13dd6c8d-7abf-4825-a5fe-a837a10809a3",{"pageContent":"/**\n      Set the fileOwner frame to be written by ID3TagEditor.\n     \n      - parameter frame: the fileOwner frame as a ID3FrameWithStringContent instance.\n     \n      - returns: the instance of the builder.\n     */\n    public func fileOwner(frame: ID3FrameWithStringContent) -> Self {\n        frames[.fileOwner] = frame\n        return self\n    }\n\n    /**\n     Build and ID3Tag version 4.\n     \n      - returns: an ID3Tag version 4 instance to use with the write function of ID3TagEditor.\n     */\n    public func build() -> ID3Tag {\n        return ID3Tag(version: .version4, frames: frames)\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID32v4TagBuilder.swift","loc":{"lines":{"from":418,"to":438}}}}],["24dbb358-8f02-45d1-bed7-727a7bac0598",{"pageContent":"//\n//  ID3Tag.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A class used to represent an ID3 tag.\n */\npublic class ID3Tag: CustomDebugStringConvertible {\n    /// The properties of the tag. The public available property to the user of the frmaework is the versions property.\n    public var properties: ID3TagProperties\n    /// Dictionary that contains the frames extracted or to be added to the id3 tag for an mp3 file.\n    public lazy var frames: [FrameName: ID3Frame] = {\n        return [:]\n    }()\n    /// ID3Tag description, useful for debug.\n    public var debugDescription: String {\n        return ID3TagToStringAdapter().adapt(id3Tag: self)\n    }\n\n    init(version: ID3Version, frames: [FrameName: ID3Frame]) {\n        self.properties = ID3TagProperties(version: version, size: 0)\n        self.frames = frames\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3Tag.swift","loc":{"lines":{"from":1,"to":29}}}}],["cf3f3ff0-d48f-4673-8a8a-52ea3cd2bd54",{"pageContent":"//\n//  ID3TagConfiguration.swift\n//\n//  Created by Fabrizio Duroni on 20/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3TagConfiguration {\n    private let headers: [ID3Version: [UInt8]] = [\n        .version2: [UInt8](\"ID3\".utf8) + [0x02, 0x00],\n        .version3: [UInt8](\"ID3\".utf8) + [0x03, 0x00],\n        .version4: [UInt8](\"ID3\".utf8) + [0x04, 0x00]\n    ]\n    private let tagHeaderSizeInBytes = 10\n\n    func headerSize() -> Int {\n        return tagHeaderSizeInBytes\n    }\n\n    func headerFor(version: ID3Version) -> [UInt8] {\n        return headers[version]!\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagConfiguration.swift","loc":{"lines":{"from":1,"to":25}}}}],["cf4f647d-ef9a-4f34-be2b-b3df2189364a",{"pageContent":"//\n//  ID3TagFramesReader.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 02.02.22.\n//  Copyright © 2022 Fabrizio Duroni. All rights reserved.\n//\n\nimport Foundation\n\n// swiftlint:disable file_length\n\n/**\n A struct to represent a simplified version of the genre frame and its content.\n Used only as return type inside `ID3TagContentReader`.\n */\npublic struct Genre: Equatable {\n    /// The genre identifier as reported in the ID3 standard.\n    public let identifier: ID3Genre?\n    /// The genre description.\n    public let description: String?\n}\n\n/**\n A struct to represent a simplified version frames that contain a position (disc position, record position etc.).\n Used only as return type inside `ID3TagContentReader`.\n */\npublic struct PartOfTotal: Equatable {\n    /// The position of the element in the total.\n    public let position: Int\n    /// The number of elements.\n    public let total: Int?\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":1,"to":33}}}}],["0c20c47d-aba8-49bf-8124-fc65d6370ebf",{"pageContent":"/**\n A struct to represent a simplified version of same frames that contain day and month data.\n Used only as return type inside `ID3TagContentReader`.\n */\npublic struct DayMonth: Equatable {\n    /// Day of the month as number.\n    public let day: Int?\n    /// Month as number.\n    public let month: Int?\n}\n\n/**\n A struct to represent a simplified version of same frames that contain hour and minute data.\n Used only as return type inside `ID3TagContentReader`.\n */\npublic struct HourMinute: Equatable {\n    /// Hour as number.\n    public let hour: Int?\n    /// Minute as number.\n    public let minute: Int?\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":35,"to":55}}}}],["07a580ac-2d8e-49e4-a811-2c5da75918c7",{"pageContent":"/**\n A struct to represent a simplified version of the attached picture frame and its content.\n Used only as return type inside `ID3TagContentReader`.\n */\npublic struct AttachedPicture: Equatable {\n    /// The image bytes as `Data`.\n    public let picture: Data\n    /// The image format.\n    public let format: ID3PictureFormat\n    /// The image type as reported in the ID3 tag standard.\n    public let type: ID3PictureType\n}\n\n/**\n A struct to represent a simplified version of frames that contain localized content.\n Used only as return type inside `ID3TagContentReader`.\n */\npublic struct LocalizedContent: Equatable {\n    /// The language of the localized content.\n    public let language: ID3FrameContentLanguage\n    /// A short description of the localized content.\n    public let contentDescription: String\n    /// The content localized.\n    public let content: String\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":57,"to":81}}}}],["a3754769-1d68-4357-b843-bdd1c80588e3",{"pageContent":"/**\n A struct to represent a simplified version of same frames that contain datetime data.\n Used only as return type inside `ID3TagContentReader`.\n */\npublic struct DateTime: Equatable {\n    /// Day value.\n    public var day: Int?\n    /// Month value.\n    public var month: Int?\n    /// Year value.\n    public var year: Int?\n    /// Hour value.\n    public var hour: Int?\n    /// Minute value.\n    public var minute: Int?\n}\n\n/**\n Class that \"makes your life easier\" when it comes to read data from the ID3 tag.\n Create an instance of this class by passing to it a `ID3Tag` instance\n (obtained from the read methods of `ID3TagEditor`).\n In this way you will now have access to all the data contained in the ID3 tag by using the methods of this class.\n */\npublic class ID3TagContentReader {\n    private let id3Tag: ID3Tag\n\n    /**\n     Init the ID3TagContentReader.\n     \n     - parameter id3Tag: the tag to be read.\n     */\n    public init(id3Tag: ID3Tag) {\n        self.id3Tag = id3Tag\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":83,"to":116}}}}],["dbb19a2b-e39b-4c39-b0ff-42c34e49ef03",{"pageContent":"/**\n      Read the title frame content.\n     \n      - returns: the title, or null.\n     */\n    public func title() -> String? {\n        return (id3Tag.frames[.title] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the album frame content.\n     \n      - returns: the album, or null.\n     */\n    public func album() -> String? {\n        return (id3Tag.frames[.album] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the album artist frame content.\n     \n      - returns: the album artist, or null.\n     */\n    public func albumArtist() -> String? {\n        return (id3Tag.frames[.albumArtist] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the artist frame content.\n     \n      - returns: the artist, or null.\n     */\n    public func artist() -> String? {\n        return (id3Tag.frames[.artist] as? ID3FrameWithStringContent)?.content\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":118,"to":152}}}}],["deec5239-2537-4b8c-b194-930516595708",{"pageContent":"/**\n      Read the composer frame content.\n     \n      - returns: the composer, or null.\n     */\n    public func composer() -> String? {\n        return (id3Tag.frames[.composer] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the conductor frame content.\n     \n      - returns: the conductor, or null.\n     */\n    public func conductor() -> String? {\n        return (id3Tag.frames[.conductor] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the content grouping frame content.\n     \n      - returns: the content grouping, or null.\n     */\n    public func contentGrouping() -> String? {\n        return (id3Tag.frames[.contentGrouping] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the copyright frame content.\n     \n      - returns: the copyright, or null.\n     */\n    public func copyright() -> String? {\n        return (id3Tag.frames[.copyright] as? ID3FrameWithStringContent)?.content\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":154,"to":188}}}}],["8ddafbe6-3792-4400-8186-e226403dce90",{"pageContent":"/**\n      Read the encoded by frame content.\n     \n      - returns: the encoded by, or null.\n     */\n    public func encodedBy() -> String? {\n        return (id3Tag.frames[.encodedBy] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the encoder settings frame content.\n     \n      - returns: the encoder settings, or null.\n     */\n    public func encoderSettings() -> String? {\n        return (id3Tag.frames[.encoderSettings] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the lyricist frame content.\n     \n      - returns: the lyricist, or null.\n     */\n    public func lyricist() -> String? {\n        return (id3Tag.frames[.lyricist] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the mix artist frame content.\n     \n      - returns: the mix artist, or null.\n     */\n    public func mixArtist() -> String? {\n        return (id3Tag.frames[.mixArtist] as? ID3FrameWithStringContent)?.content\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":190,"to":224}}}}],["0528c983-efc0-4eac-aa2f-8525aacc0db1",{"pageContent":"/**\n      Read the publisher frame content.\n     \n      - returns: the publisher, or null.\n     */\n    public func publisher() -> String? {\n        return (id3Tag.frames[.publisher] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the subtitle frame content.\n     \n      - returns: the subtitle, or null.\n     */\n    public func subtitle() -> String? {\n        return (id3Tag.frames[.subtitle] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the beats per minute frame content.\n     \n      - returns: the beats per minute, or null.\n     */\n    public func beatsPerMinute() -> Int? {\n        return (id3Tag.frames[.beatsPerMinute] as? ID3FrameWithIntegerContent)?.value\n    }\n\n    /**\n      Read the original filename frame content.\n     \n      - returns: the original filename, or null.\n     */\n    public func originalFilename() -> String? {\n        return (id3Tag.frames[.originalFilename] as? ID3FrameWithStringContent)?.content\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":226,"to":260}}}}],["0bf66584-3703-4e50-987c-1c223dafa56f",{"pageContent":"/**\n      Read the lenght in milliseconds frame content.\n     \n      - returns: the lenght in milliseconds, or null.\n     */\n    public func lengthInMilliseconds() -> Int? {\n        return (id3Tag.frames[.lengthInMilliseconds] as? ID3FrameWithIntegerContent)?.value\n    }\n\n    /**\n      Read the size in bytes frame content.\n     \n      - returns: the size in bytes, or null.\n     */\n    public func sizeInBytes() -> Int? {\n        return (id3Tag.frames[.sizeInBytes] as? ID3FrameWithIntegerContent)?.value\n    }\n\n    /**\n      Read the genre frame content.\n     \n      - returns: the `Genre`, or null.\n     */\n    public func genre() -> Genre? {\n        guard let genreFrame = (id3Tag.frames[.genre] as? ID3FrameGenre) else {\n            return nil\n        }\n\n        return Genre(identifier: genreFrame.identifier, description: genreFrame.description)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":262,"to":291}}}}],["520d9ce8-3b1e-41b7-9c54-17d1898ea437",{"pageContent":"return Genre(identifier: genreFrame.identifier, description: genreFrame.description)\n    }\n\n    /**\n      Read the disc position frame content.\n     \n      - returns: the disc position as `PartOfTotal`, or null.\n     */\n    public func discPosition() -> PartOfTotal? {\n        guard let discPositionFrame = (id3Tag.frames[.discPosition] as? ID3FramePartOfTotal) else {\n            return nil\n        }\n\n        return PartOfTotal(position: discPositionFrame.part, total: discPositionFrame.total)\n    }\n\n    /**\n      Read the track position frame content.\n     \n      - returns: the track position as `PartOfTotal`, or null.\n     */\n    public func trackPosition() -> PartOfTotal? {\n        guard let trackPositionFrame = (id3Tag.frames[.trackPosition] as? ID3FramePartOfTotal) else {\n            return nil\n        }\n\n        return PartOfTotal(position: trackPositionFrame.part, total: trackPositionFrame.total)\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":290,"to":317}}}}],["9f0df673-addf-4367-b8f0-0df8ff885d8c",{"pageContent":"return PartOfTotal(position: trackPositionFrame.part, total: trackPositionFrame.total)\n    }\n\n    /**\n      Read the recording day month frame content.\n     \n      - returns: the recording day month as `DayMonth`, or null.\n     */\n    public func recordingDayMonth() -> DayMonth? {\n        guard let recordingDayMonthFrame = (id3Tag.frames[.recordingDayMonth] as? ID3FrameRecordingDayMonth) else {\n            return nil\n        }\n\n        return DayMonth(day: recordingDayMonthFrame.day, month: recordingDayMonthFrame.month)\n    }\n\n    /**\n      Read the recording year frame content.\n     \n      - returns: the recording year, or null.\n     */\n    public func recordingYear() -> Int? {\n        return (id3Tag.frames[.recordingYear] as? ID3FrameWithIntegerContent)?.value\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":316,"to":339}}}}],["5b6e9090-c565-4c23-9bce-cb682880cd07",{"pageContent":"/**\n      Read the recording hour minute frame content.\n     \n      - returns: the recording hour minute as `HourMinute`, or null.\n     */\n    public func recordingHourMinute() -> HourMinute? {\n        guard let recordingHourMinuteFrame\n                = (id3Tag.frames[.recordingHourMinute] as? ID3FrameRecordingHourMinute) else {\n            return nil\n        }\n\n        return HourMinute(hour: recordingHourMinuteFrame.hour, minute: recordingHourMinuteFrame.minute)\n    }\n\n    /**\n      Read the recording date time frame content.\n     \n      - returns: the recording date time as `DateTime`, or null.\n     */\n    public func recordingDateTime() -> DateTime? {\n        guard let recordingDateTime\n                = (id3Tag.frames[.recordingDateTime] as? ID3FrameRecordingDateTime) else {\n            return nil\n        }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":341,"to":364}}}}],["55709d06-8532-4a59-8113-df4ea26363a6",{"pageContent":"return DateTime(\n            day: recordingDateTime.recordingDateTime.date?.day,\n            month: recordingDateTime.recordingDateTime.date?.month,\n            year: recordingDateTime.recordingDateTime.date?.year,\n            hour: recordingDateTime.recordingDateTime.time?.hour,\n            minute: recordingDateTime.recordingDateTime.time?.minute\n        )\n    }\n\n    /**\n      Read the attached pictues frames content.\n     \n      - returns: the attached picture list as `[AttachedPicture]`, or null.\n     */\n    public func attachedPictures() -> [AttachedPicture] {\n        var pictures: [AttachedPicture] = []\n        for type in ID3PictureType.allCases {\n            if let picture = (id3Tag.frames[.attachedPicture(type)] as? ID3FrameAttachedPicture) {\n                pictures.append(AttachedPicture(picture: picture.picture, format: picture.format, type: picture.type))\n            }\n        }\n        return pictures\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":366,"to":388}}}}],["8df77296-099c-4219-bcf3-59cc0f29d721",{"pageContent":"/**\n      Read the unsynchronized lyrics frames content.\n     \n      - returns: the unsynchronized lyric  list as `[LocalizedContent]`, or null.\n     */\n    public func unsynchronizedLyrics() -> [LocalizedContent] {\n        return localizedContent { language in\n            id3Tag.frames[.unsynchronizedLyrics(language)] as? ID3FrameWithLocalizedContent\n        }\n    }\n\n    /**\n      Read the comment frames content.\n     \n      - returns: the comment  list as `[LocalizedContent]`, or null.\n     */\n    public func comments() -> [LocalizedContent] {\n        return localizedContent { language in\n            id3Tag.frames[.comment(language)] as? ID3FrameWithLocalizedContent\n        }\n    }\n\n    /**\n      Read the file owner frame content.\n     \n      - returns: the file owner minute as `String`, or null.\n     */\n    public func fileOwner() -> String? {\n        return (id3Tag.frames[.fileOwner] as? ID3FrameWithStringContent)?.content\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":390,"to":419}}}}],["3cf6602d-64bf-4d54-8808-b6fce4ce04a0",{"pageContent":"/**\n      Read the itunes grouping frame content.\n     \n      - returns: the itunes grouping as `String`, or null.\n     */\n    public func iTunesGrouping() -> String? {\n        return (id3Tag.frames[.iTunesGrouping] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the itunes movement name frame content.\n     \n      - returns: the itunes movement name as `String`, or null.\n     */\n    public func iTunesMovementName() -> String? {\n        return (id3Tag.frames[.iTunesMovementName] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the itunes movement index frame content.\n     \n      - returns: the itunes movement index as `String`, or null.\n     */\n    public func iTunesMovementIndex() -> Int? {\n        return (id3Tag.frames[.iTunesMovementIndex] as? ID3FrameWithIntegerContent)?.value\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":421,"to":446}}}}],["85b4a740-b15f-497b-a12e-1f1f0dfdb60d",{"pageContent":"/**\n      Read the itunes movement count frame content.\n     \n      - returns: the itunes movement count as `String`, or null.\n     */\n    public func iTunesMovementCount() -> Int? {\n        return (id3Tag.frames[.iTunesMovementCount] as? ID3FrameWithIntegerContent)?.value\n    }\n\n    /**\n      Read the itunes podcast category frame content.\n     \n      - returns: the itunes podcast category as `String`, or null.\n     */\n    public func iTunesPodcastCategory() -> String? {\n        return (id3Tag.frames[.iTunesPodcastCategory] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the itunes podcast description frame content.\n     \n      - returns: the itunes podcast description as `String`, or null.\n     */\n    public func iTunesPodcastDescription() -> String? {\n        return (id3Tag.frames[.iTunesPodcastDescription] as? ID3FrameWithStringContent)?.content\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":448,"to":473}}}}],["c4741dcf-5e42-41db-bb68-4269cbe4afca",{"pageContent":"/**\n      Read the itunes podcast id frame content.\n     \n      - returns: the itunes podcast id as `String`, or null.\n     */\n    public func iTunesPodcastID() -> String? {\n        return (id3Tag.frames[.iTunesPodcastID] as? ID3FrameWithStringContent)?.content\n    }\n\n    /**\n      Read the itunes podcast keywords frame content.\n     \n      - returns: the itunes podcast keywords as `String`, or null.\n     */\n    public func iTunesPodcastKeywords() -> String? {\n        return (id3Tag.frames[.iTunesPodcastKeywords] as? ID3FrameWithStringContent)?.content\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":475,"to":491}}}}],["894ef78f-3ce7-4bf1-b06f-6e692a0ceba8",{"pageContent":"private func localizedContent(\n        getFrame: ((ID3FrameContentLanguage) -> ID3FrameWithLocalizedContent?)\n    ) -> [LocalizedContent] {\n        var contents: [LocalizedContent] = []\n        for language in ID3FrameContentLanguage.allCases {\n            if let content = getFrame(language) {\n                contents.append(\n                    LocalizedContent(\n                        language: content.language,\n                        contentDescription: content.contentDescription,\n                        content: content.content\n                    )\n                )\n            }\n        }\n        return contents\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagContentReader.swift","loc":{"lines":{"from":493,"to":510}}}}],["6ef49adc-549a-4d10-bcef-4fcfab413678",{"pageContent":"//\n//  ID3TagPresence.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nclass ID3TagPresence: TagPresence {\n    private var id3TagConfiguration: ID3TagConfiguration\n\n    init(id3TagConfiguration: ID3TagConfiguration) {\n        self.id3TagConfiguration = id3TagConfiguration\n    }\n\n    func isTagPresentIn(mp3: Data, version: ID3Version) -> Bool {\n        if mp3SizeIsTooSmall(mp3: mp3) {\n            return false\n        }\n        let header = [UInt8](mp3.subdata(in: 0..<5))\n        return header.elementsEqual(id3TagConfiguration.headerFor(version: version))\n    }\n\n    private func mp3SizeIsTooSmall(mp3: Data) -> Bool {\n        return mp3.count < 5\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagPresence.swift","loc":{"lines":{"from":1,"to":28}}}}],["d268b705-ee1b-4306-be27-b4fec823d999",{"pageContent":"//\n//  ID3TagProperties.swift\n//\n//  Created by Fabrizio Duroni on 13/03/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\n/**\n A struct that describes the properties of a tag.\n */\npublic struct ID3TagProperties {\n    /// The size of the tag.\n    var size: UInt32\n    /// The version of the tag (see `ID3Version`).\n    public var version: ID3Version\n\n    init(version: ID3Version) {\n        self.version = version\n        self.size = 0\n    }\n\n    init(version: ID3Version, size: UInt32) {\n        self.version = version\n        self.size = size\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagProperties.swift","loc":{"lines":{"from":1,"to":28}}}}],["1971f0a2-9417-4ca8-80ec-47ec005359f2",{"pageContent":"//\n//  ID3TagToStringAdapter.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 29.10.20.\n//  2020 Fabrizio Duroni.\n//\n\n// swiftlint:disable line_length\n// swiftlint:disable function_body_length\n\nimport Foundation","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagToStringAdapter.swift","loc":{"lines":{"from":1,"to":12}}}}],["aabffb74-b4f8-4acb-bedf-7c1dca69bfe8",{"pageContent":"class ID3TagToStringAdapter {\n    func adapt(id3Tag: ID3Tag) -> String {\n        return \"\"\"\n        ID3Tag:\n        - size: \\(id3Tag.properties.size)\n        - version: \\(id3Tag.properties.version)\n        - artist: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .artist))\n        - composer: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .composer))\n        - conductor: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .conductor))\n        - contentGrouping: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .contentGrouping))\n        - copyright: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .copyright))\n        - encodedBy: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .encodedBy))\n        - encoderSettings: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .encoderSettings))\n        - fileOwner: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .fileOwner))","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagToStringAdapter.swift","loc":{"lines":{"from":14,"to":27}}}}],["aaa14937-0a43-4d37-b886-77a9303a1fa7",{"pageContent":"- fileOwner: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .fileOwner))\n        - lyricist: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .lyricist))\n        - mixArtist: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .mixArtist))\n        - publisher: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .publisher))\n        - subtitle: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .subtitle))\n        - albumArtist: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .albumArtist))\n        - title: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .title))\n        - trackPosition: \\((id3Tag.frames[.trackPosition] as? ID3FramePartOfTotal)?.debugDescription ?? \"-\")\n        - discPosition: \\((id3Tag.frames[.discPosition] as? ID3FramePartOfTotal)?.debugDescription ?? \"-\")\n        - album: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .album))\n        - recordingDateTime: \\(","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagToStringAdapter.swift","loc":{"lines":{"from":27,"to":37}}}}],["8d4813ff-2fa8-4e80-b200-eecc512caa19",{"pageContent":"- album: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .album))\n        - recordingDateTime: \\(\n            (id3Tag.frames[.recordingDateTime] as? ID3FrameRecordingDateTime)?.recordingDateTime.debugDescription ?? \"-\"\n        )\n        - recordingYear: \\((id3Tag.frames[.recordingYear] as? ID3FrameWithIntegerContent)?.debugDescription ?? \"-\")\n        - recordingDayMonth: \\((id3Tag.frames[.recordingDayMonth] as? ID3FrameRecordingDayMonth)?.debugDescription ?? \"-\")\n        - recordingHourMinute: \\((id3Tag.frames[.recordingHourMinute] as? ID3FrameRecordingHourMinute)?.debugDescription ?? \"-\")\n        - genre: \\((id3Tag.frames[.genre] as? ID3FrameGenre)?.debugDescription ?? \"-\")\n        - attachedPicture:\\(ID3PictureType.allCases.reduce(\"\", { (accumulator: String, current: ID3PictureType) in\n            if let frameDescription = (id3Tag.frames[.attachedPicture(current)] as? ID3FrameAttachedPicture)?.debugDescription {\n                return accumulator + \"\\n\" + frameDescription + \"\\n\"","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagToStringAdapter.swift","loc":{"lines":{"from":36,"to":46}}}}],["0e015d8b-5e2d-448e-b198-73f0c9988e76",{"pageContent":"return accumulator + \"\\n\" + frameDescription + \"\\n\"\n            }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagToStringAdapter.swift","loc":{"lines":{"from":46,"to":47}}}}],["1fb2c86f-4812-4003-8f4e-0d18bd84975e",{"pageContent":"return accumulator\n        }))\n        - unsynchronisedLyrics:\\(adaptFrameWithLocalizedContent(id3Tag: id3Tag, frameName: FrameName.unsynchronizedLyrics))\n        - comments:\\(adaptFrameWithLocalizedContent(id3Tag: id3Tag, frameName: FrameName.comment))\n        - iTunesGrouping: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .iTunesGrouping))\n        - iTunesMovementIndex: \\((id3Tag.frames[.iTunesMovementIndex] as? ID3FrameWithIntegerContent)?.debugDescription ?? \"-\")\n        - iTunesMovementCount: \\((id3Tag.frames[.iTunesMovementCount] as? ID3FrameWithIntegerContent)?.debugDescription ?? \"-\")\n        - iTunesMovementName: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .iTunesMovementName))\n        - iTunesPodcastCategory: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .iTunesPodcastCategory))\n        - iTunesPodcastDescription: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .iTunesPodcastDescription))","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagToStringAdapter.swift","loc":{"lines":{"from":49,"to":58}}}}],["0b08bc75-b41f-4b6e-bfc4-9c867fb1e2d8",{"pageContent":"- iTunesPodcastDescription: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .iTunesPodcastDescription))\n        - iTunesPodcastID: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .iTunesPodcastID))\n        - iTunesPodcastKeywords: \\(adaptFrameWithStringContentFrom(id3Tag: id3Tag, frameName: .iTunesPodcastKeywords))\n        \"\"\"\n    }","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagToStringAdapter.swift","loc":{"lines":{"from":58,"to":62}}}}],["d6793d4b-1478-4b18-834b-bab443f0ccda",{"pageContent":"private func adaptFrameWithStringContentFrom(id3Tag: ID3Tag, frameName: FrameName) -> String {\n        return (id3Tag.frames[frameName] as? ID3FrameWithStringContent)?.content ?? \"-\"\n    }\n\n    private func adaptFrameWithLocalizedContent(id3Tag: ID3Tag, frameName: (ID3FrameContentLanguage) -> FrameName) -> String {\n        return ID3FrameContentLanguage.allCases.reduce(\"\", { (accumulator: String, current: ID3FrameContentLanguage) in\n            if let frameDescription = (id3Tag.frames[frameName(current)] as? ID3FrameWithLocalizedContent)?.debugDescription {\n                return accumulator + \"\\n\" + frameDescription + \"\\n\"\n            }\n\n            return accumulator\n        })\n    }\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/ID3TagToStringAdapter.swift","loc":{"lines":{"from":64,"to":77}}}}],["98744308-66e9-4abd-8172-45b1deedd08d",{"pageContent":"//\n//  TagBuilder.swift\n//  ID3TagEditor\n//\n//  Created by Fabrizio Duroni on 24.10.20.\n//  2020 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol TagBuilder: AnyObject {\n    func build() -> ID3Tag\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/TagBuilder.swift","loc":{"lines":{"from":1,"to":13}}}}],["0ce02689-688a-477d-be3a-1ea1ff410d21",{"pageContent":"//\n//  TagPresence.swift\n//\n//  Created by Fabrizio Duroni on 26/02/2018.\n//  2018 Fabrizio Duroni.\n//\n\nimport Foundation\n\nprotocol TagPresence {\n    func isTagPresentIn(mp3: Data, version: ID3Version) -> Bool\n}","metadata":{"source":"/Users/chicio/Documents/Work/ID3TagEditor/Source/Tag/TagPresence.swift","loc":{"lines":{"from":1,"to":12}}}}]],{"0":"0ba2450d-fca1-4194-b278-f0fcd06e7d03","1":"2329cf8a-fcdc-4c7f-88e2-5c2cda432059","2":"8e303790-9b9f-4172-a489-b577d292bac4","3":"260a5713-8773-43b3-a27d-7a4ed1928e5f","4":"c5cebdc1-72eb-45e5-acf4-d71f2f3c62ba","5":"f30c2509-95c1-4e3b-a873-3ec791cfd2c4","6":"9d3e0624-29a2-442a-a4fe-b8fe2ccf40ab","7":"882817e0-717c-42f0-a537-2ca40920b76b","8":"a7316f5f-1489-4aff-ad68-7294829e0060","9":"cfc97da5-dd68-4510-92db-ce139debf66c","10":"1829513b-118a-4b5d-8353-b36e9e0b1f34","11":"c9d5598e-d4b0-4fd4-a8c5-2dd3cf27e891","12":"1dd8d013-3f8b-4380-a175-d3bbddc18254","13":"fe4d0bbb-ad1e-413f-93c7-1b8e2bd6fa4e","14":"d1de7435-cb9d-4fd1-abfe-e6d663ebd985","15":"1b204199-3b5c-4ec4-b755-c9cc4d1337dc","16":"0a62330d-1ab6-4256-ac3b-5ec82998dd30","17":"4fa976a5-a65c-4cfa-81d9-74483f241052","18":"6932428b-6822-406b-baf6-d923ed4df87c","19":"9918aa1a-3327-4f92-8935-d597ad84de68","20":"5b8693d0-0523-4f4c-a3b3-b9a3fd8a356c","21":"ee904150-1b12-4352-99a3-64d79f12f638","22":"c7d5394e-a1e2-4daf-87f4-b720620c7d8a","23":"d943c8dd-3e59-430c-98b4-74e6efb07f40","24":"a9b32286-d5cd-4e78-9e96-c57abcf92454","25":"f56f21b8-e7a1-4561-ac4b-25927bc3ba8c","26":"be2d58c1-6172-4fe9-94d5-26a02718ad52","27":"fc6aab9a-ff2d-4c9d-b3cf-cc376b6bfd81","28":"f43fd7ee-0f56-413d-9dce-5aca4bd2027a","29":"c2d23681-e140-4946-833d-616afde18584","30":"a70c50a6-a078-4854-9383-abf3dd1b0097","31":"ff46c88d-ff3e-47c8-9b5b-9f5cc2d13924","32":"62febd34-f229-4a9b-92ae-94364a7f8fbe","33":"1bb4aabb-73a8-4f5b-804b-3651670b5523","34":"6c4725db-91c4-421f-bf7f-b791b4c46f27","35":"30a93076-1caa-47a5-b72c-eae599a710cb","36":"b34c16f6-8cf0-44e5-9a2d-d49e74c6fb54","37":"b81d437f-3c59-4577-8b69-dde47957c5a7","38":"3bd604b1-8e9b-48e4-ad08-9f25a109609b","39":"0be213b5-7aca-4f45-9ce1-cdd53168a631","40":"8f7828db-dc89-41d7-b966-7d1dfabab266","41":"66082854-1aae-480f-8b06-d5b2ac492814","42":"f749d131-56a0-4c75-a1d4-64b0b8b14443","43":"4341e925-af54-4b92-a72a-dc2306ff034f","44":"21f0856c-da57-46d9-839e-7507665f7894","45":"54479258-d0b4-46be-bb54-5e408e682386","46":"dfba8771-f48f-4327-9391-16426f0e0a61","47":"306fa539-34b8-4feb-a60c-3def3a6ef91d","48":"c114d2df-c14e-43dd-8f25-5dc46fe5593c","49":"430a5c27-cb78-4ed0-a8ab-ff4fe1392816","50":"40387cfe-e6b4-4a0b-bd06-4f98d186f887","51":"0b1be98b-1c9b-4552-a575-f02fb3b9d128","52":"dbeca3b4-c5e6-4bb6-b68c-d0a036693ac2","53":"25bf29e2-c251-4ef8-bd19-9111113c03b9","54":"2e7a9cdf-0fa0-47eb-850c-58dea8347d07","55":"1f43b52a-6ebe-427c-8521-dab6432ce39c","56":"b717841f-d01d-4166-9bec-dc8b61a3496d","57":"02596dc9-c45e-41eb-bdf7-e3d25bbe46b6","58":"0698efbf-adb3-4f94-a46c-03fe79099a28","59":"79d0b2ec-99d8-4458-af9e-3a0abb923015","60":"75bf3737-01f5-4d14-8bcb-12fe3ad0ad8d","61":"fc18ba19-2de3-457d-adf5-2385116856ca","62":"e95cf649-bff7-46d5-8c06-612726da986c","63":"7dc5d051-2cdb-4201-bd20-6e0f75eb0f95","64":"0c9447c5-3b7a-48c1-8bd8-9e5bb929f1d4","65":"93786d57-9ae3-42bf-9877-28454f272742","66":"cf7d88ec-874e-4b76-aae5-9ba79cc9d3e1","67":"26908bf4-1b3e-488f-99d3-02a9654bbb05","68":"e48a0cf1-8e6a-4008-aafe-b3bbe15965a6","69":"f7d52b0c-cc28-4482-8d0c-767e04e40ef0","70":"80435aaf-235b-4614-b383-d46475e79f48","71":"8934fa9e-a7f7-405b-988e-838719a70aee","72":"ff9ff470-dde5-4fda-b602-2c86eaeca38e","73":"32461f53-59df-470f-86be-53343e8f3012","74":"f06d8317-4e55-477b-a953-ac8bfa16439b","75":"57f4d5d3-bdc8-4ac3-a608-19a9c61fdaac","76":"6bf3914a-06a7-4dab-a07a-840a9160dcb6","77":"73494cda-a641-4436-9ee7-2d9725681c03","78":"08bba9a0-2ad9-42b3-9158-db460bdfdb81","79":"5fd4ecbb-e438-4a26-99dd-5015cf68d9e1","80":"6312b98e-f7c9-4237-905a-7880a94565aa","81":"31f81103-42a2-49f2-a150-adc1fb71fec7","82":"72eb9b65-c7f2-4b87-9180-b1ffeb57975c","83":"ee321473-e37f-4e0e-b4a0-ea1fa85fc8c2","84":"59be1954-e0e7-41ec-a476-84a96ca15708","85":"7207ce60-3ba7-433a-8a69-55540ebfb0e3","86":"d4e44d04-0e0e-4a71-8f5d-3199f0401bf8","87":"ce95407d-4d6f-4e97-a602-64c728bd8e0f","88":"532a46c4-c83e-4728-81c3-74d84f8b684f","89":"81aad39b-1233-428a-8fa4-100f39e0ebdc","90":"df519fcd-1086-4c52-b8db-bb95084c8994","91":"1c556bc1-6fd6-433f-b534-cd6407257065","92":"8276f3da-a9ed-4040-baf1-791b3de017b3","93":"419c174b-cb5c-42f5-8168-ecb04214d1bd","94":"2e1e55cf-a6f5-4bee-98cf-0b05837b2c6a","95":"09b2509b-0762-4576-a9a7-0be260c05968","96":"d5f0118e-0f55-4020-a326-511df88d992c","97":"5e4878e4-5d89-406d-8590-6bb601f9bf0c","98":"d272a43b-665c-4081-89a9-e129bf8bdbeb","99":"d46196e4-aff2-4188-b7c4-beaf2ee2409d","100":"ef0fdcb7-f746-442e-9e0e-aeb219a5c986","101":"2f8e31b9-9321-40aa-ad13-6dc27c9cda86","102":"987f9135-fa7b-4680-b28f-265c63cfbf99","103":"356581c1-fc83-42e1-ab14-40430c3391fd","104":"e489a55d-73cf-47e7-b4ad-b2b35456179f","105":"3a92013d-7a09-4dee-845d-864c7defa1da","106":"994061ad-f9f5-4bd7-9a55-89ab0c21e2f0","107":"cc59c45b-d392-4164-85e6-4e4bd3b000cc","108":"1e987e9e-d49b-4901-804e-7edffc31a519","109":"d00ee2a4-584a-43db-a97a-aa0fda5d6db5","110":"2e95335f-9b3d-4c94-9c3c-28ab031832d2","111":"d4b3e52b-c9c6-4846-8e7e-601d4272ddc2","112":"b607da85-6288-43e6-b83b-c83c608e3ffe","113":"22cb2eee-71ee-496a-b885-5a43c025aae2","114":"f5efce72-b3a0-428a-a6d6-c878bb00e680","115":"7d095acd-6fe3-4d9e-b771-06eb13d70a64","116":"e35878cf-e0a0-4dad-a36f-63777181f967","117":"2d3e9485-0d3e-4fae-8c2a-3bcc04283dbb","118":"dffeec34-bca6-48b0-9d70-0829ddb57a0b","119":"f8d46444-0b8a-4357-8889-76bc328d2630","120":"aab36029-f216-454e-9fef-c0b2ecafb675","121":"1a37e33c-77e0-43b9-af13-239554aa9189","122":"9d32ab23-feb1-4bb5-9518-3afd7d6e0781","123":"8c6edd5c-2fe6-484a-94f8-37a981a1543b","124":"e7e2205a-63d9-40f7-ab46-ae0945429bf0","125":"4b9d2003-0248-4b4f-a3d3-8e549b4cee6e","126":"3ef50559-2d3a-4c6f-8395-442cfd5e50e3","127":"2fe6ddd1-09b3-4fa3-85a6-6759ed0db4a5","128":"f72f4722-455d-4c27-8528-503cbbc6c509","129":"bdd69200-1337-4971-b586-327dc68aacf2","130":"53ba7c00-ec80-4dd0-bc13-6de588d1eb73","131":"89411026-4680-4ee4-95eb-9e9b8aa8585e","132":"932c3e83-bc55-4d23-83a2-720f41045c8f","133":"b76d70a1-24c7-4b4b-be87-4879b76e6ae6","134":"b4efdc15-acfe-4477-992c-42670363742e","135":"32b304b2-c02c-4f24-adbb-d381df8a7109","136":"70880731-7ed6-43a7-8b74-381aaad42433","137":"f96cd126-9b72-4835-b860-f7abf7b31de6","138":"862443bb-092b-4f44-9d23-b980e09a71cc","139":"315304d5-47ab-4d52-98e4-a8996b4c83b8","140":"649f6252-18b1-4ce8-a72e-9458c3cf97ce","141":"6829d198-4132-4f09-b1b9-9693515e3eb9","142":"f7f7654d-48e1-4c20-959b-0bf8f03926d0","143":"cf5dc0b2-eeba-44eb-b372-866d8775d41f","144":"72e38d0f-b0b2-4057-86e6-47149ea1725b","145":"03d42b62-dcc5-4ade-99a1-61fd16c8fa16","146":"09ddfea3-5b77-47e5-b9f5-845e50cf8748","147":"8bfde33a-5660-40d4-8951-0eb44ba49aec","148":"317664e5-d815-4647-960a-48d492c93fdc","149":"f50ebd74-380b-4d31-9a57-0c3dbc4c1add","150":"4ff4edb1-5d2c-4ee9-b9b4-9d265b7ac9ae","151":"831a78a9-86a6-4734-9e7d-144553359b65","152":"c14fd3e7-7549-46b8-92de-6a5c30b744a5","153":"81634183-0315-42ff-8a3c-6daefa27214b","154":"51dfea4c-fb06-4239-86dd-be2652d6f2fb","155":"c36d3b77-1ec0-49da-b67a-bd2114a43763","156":"7e2c7169-41a9-4c15-a76f-efb1abf0e890","157":"43da7db4-227e-44a5-adee-ad789a4ed9e5","158":"f6bc26cd-81c4-4314-8666-fa4f64aa3471","159":"ed28ac03-e6e2-4210-ac06-ecb9ce466c4f","160":"bbb986fa-3701-4c89-a177-a27a2547fa42","161":"ab364f7f-9509-40ab-9b51-270318ff9c7a","162":"58ccca65-5e15-4870-a1c5-1831f588924a","163":"9c2576b9-c2d3-4636-befd-d097f1758500","164":"a70f6562-c72d-482e-b5df-c154215d4807","165":"8bed4476-1b3f-4c82-8ef4-2724cc79c938","166":"324204a8-198a-4d6a-a4fa-ec1b2bc7e874","167":"13e3deaa-2e98-46d2-bec8-cc676ebd8c35","168":"448eb028-9901-48c7-a1f2-1cc18afa1479","169":"9d40f417-b527-42e1-be42-ad76d5ec2176","170":"000289c3-368a-451e-994a-9382fdddf99a","171":"24109187-e3d5-40fa-8480-0ebb1c0b660d","172":"9809dfbb-c252-4349-b757-a7c92b1700f2","173":"27ca128b-bc7f-45c9-a3f5-c92cd313e551","174":"884e2314-2be6-4da3-8792-ab1150b64ca2","175":"fced4d77-dcb8-42a5-b53d-007934e19356","176":"2810f9d2-e4a9-4e1a-8acc-667c98861d5b","177":"3be1da6d-fbf8-4cc8-af15-d094fcf0f655","178":"4b94234f-5682-4c45-ac25-b8f0ac14f737","179":"9c59c523-7589-4f49-bb86-5025d6e5b3ef","180":"6de6c177-591b-452b-9eec-c8cc02ad166a","181":"7d5a7396-bf64-47df-9931-5941d8088194","182":"c0ef92f9-ff4b-4012-bc98-f58f1a5765b0","183":"7457398c-7dbb-49db-87e1-433861e9c55c","184":"453bd01f-0d31-42b7-9df0-10302d467a79","185":"d1e24501-aba2-4798-b291-5948dd41c4af","186":"49d1cc6e-65bb-4a42-8417-263b51ce2d63","187":"8c0b6141-a315-4911-a7bb-75b65f3d71dd","188":"09503939-e1d9-46ab-9202-6ad576009ce8","189":"059bcae3-00ca-495a-b5d8-ed02273c3db1","190":"43b2dafe-f117-4f8e-a99e-3f7e24c938e4","191":"9091a1cb-935f-4cd2-bccd-1070938b6207","192":"c241a900-07ee-4d9a-89ab-b876509a7556","193":"c5d6421a-1191-4c63-a24e-a6d5687806ec","194":"15e96c50-ca98-4c4d-8e8e-18f015b92e2a","195":"e9e40de6-3a1b-4cfa-b81d-43cf5d8c36ea","196":"0321ae71-9250-4454-8031-c9470add333e","197":"5f4e0116-b467-451c-a993-2d4bb5ddc274","198":"22dc70e0-a68d-4530-ae42-d89643d347d7","199":"21e8a172-c0d7-4e6a-a8d3-83491cae26e6","200":"a256a490-c613-4f59-ab0c-c93bd579bf09","201":"35da8e27-f96c-4d54-b999-0856325f7f26","202":"4be3bd26-7d57-4ea9-809c-63c27d2b7f3b","203":"61527cc7-a59f-4880-ae59-b6e57bcb987a","204":"e70883cd-27c3-49d7-99e0-773968f3ed3b","205":"ce555104-1d0e-44ae-bf53-b4efeb60d19e","206":"241a4a14-66eb-464f-9121-8f85b53b7d44","207":"4212963e-d5dc-4203-918a-f8ad5e0dc8dd","208":"2db932bc-783b-484f-9dbc-bf945db85029","209":"21ca7bdf-a806-4ee0-8b0a-24574c764ebc","210":"aceed1b2-e2fb-413a-814d-869cfcd9499d","211":"81773f86-a03e-4a22-8b1a-183d27337419","212":"6d797368-544c-4fe7-a2f5-9b0de7bc3d11","213":"f48ff79a-d208-4720-b786-ea70d7e3d312","214":"c98da04b-0e2c-4801-ade9-da2f3d3768fa","215":"241ec75a-b34b-4528-b701-54951fab8b4b","216":"ce14fe90-6760-4009-bc1a-930f5d48fa29","217":"758b9aba-f0e7-44b7-8231-d11ec8c7ac6a","218":"fa6b4eda-deb3-4d40-82c0-c60eba964cec","219":"0dd5b96d-fd47-40f7-91cd-0d099272ab8c","220":"28f5a083-e048-477d-b635-71b1ac698914","221":"1595b766-0372-4b25-abf7-49e4ab99e0bb","222":"2a7ee390-0ebc-4197-9c0e-e8cc351cd11d","223":"e2e994f7-b407-49e6-b3f3-5863b534f644","224":"56e78783-d5fe-41be-9f31-2a2cca6a1a39","225":"e8886d46-7aa0-4c7c-8ebe-c167307d8da1","226":"3e97101d-176b-40c9-b5c1-3814de655deb","227":"eb382b63-2782-47f4-ab58-6435ee6f84f2","228":"72c85aec-e1c1-462d-a43c-11bc8bd944b1","229":"56fcf63b-8e25-4be0-a7ed-74912bc6ed61","230":"1e1ce874-1e28-4e0b-aeca-da46e0f8a27d","231":"7e6a1471-d4f0-4765-94c9-983891ef158f","232":"77353e8d-c0f5-4b97-9c0f-e8d1a8612a70","233":"94a27210-c051-4267-a080-ff2e5b34fb23","234":"2e43fe24-b698-4f0e-8142-711e248936c2","235":"2a202ecb-e340-4c77-9fb5-94ea4b1d0162","236":"3d75073d-e5e8-4bd3-b776-272f12697237","237":"1980b232-f60a-463d-b158-6e55bc85d993","238":"726cee4d-5fbb-4008-8eb5-138a7a72a0c7","239":"6ee25e94-af31-470f-ad69-be2f98808cef","240":"f46f10d1-d778-4d24-99b7-cd2fb9c84bfe","241":"1998646f-7b80-46c8-a231-7c84ecc370b9","242":"d2d46f78-844c-48e4-b304-bebe79d8acdb","243":"0b0e6dc5-5b07-4e56-806f-f58b5df6fc6d","244":"4b864d2c-69e6-4021-b88e-c93c0cc0ec5d","245":"c081ab27-7640-4e95-8827-607608a1970a","246":"a1ac29bc-8cbf-4483-b411-bc44bca3846f","247":"a3aad392-f7fc-424f-8c47-aca5cc74b86c","248":"fb545557-471a-4973-81cc-9e968a0695ac","249":"d6282905-f6db-4a9f-94e5-3beeded4b154","250":"ff27875b-31f3-4ec3-ac83-373eba0bd099","251":"f1d9d813-c807-4301-a3bd-c78c15a150f0","252":"ff3b4718-eac4-45a6-be61-f3557fae7c6e","253":"ae258eb4-2085-4350-8279-695fcb606c21","254":"e39122db-cec7-4be7-9878-38dc09f5ed1b","255":"96e4968c-3a18-43bd-8517-f48babdb61a8","256":"d94d102e-1161-410b-a7f8-97e9e0c1b8c8","257":"a3908c1b-78a1-4c43-8463-b2445054cba9","258":"923aef31-2a1a-4826-8289-f308a62c90e9","259":"aa5523c4-240d-47f1-a405-999ea3518576","260":"9e6589b9-3b59-4181-a98f-bce05557539c","261":"25c55b88-2055-40b7-a401-7866f447888e","262":"72a4bbf3-eca6-4b8b-8068-231fd9f21fcc","263":"2f42c537-64f0-4647-983d-cf1bd9de54e8","264":"e81857c3-65b5-4912-a864-b56923ac92ae","265":"6d278e19-55bf-4849-b7aa-f480c74aa166","266":"50af3d87-d97d-4587-b4fa-3f2b9260027e","267":"f615202c-5221-4e0b-9887-2ed1ed072b01","268":"5c998598-d2bb-4d81-8a06-ae25fff379ca","269":"ab8523da-7099-4bbc-abe9-04f8936d45ee","270":"64acf13a-14d9-4187-9ce3-dd58ad849b64","271":"fda2564e-74c5-42c3-957f-2efae907b0d0","272":"13dd6c8d-7abf-4825-a5fe-a837a10809a3","273":"24dbb358-8f02-45d1-bed7-727a7bac0598","274":"cf3f3ff0-d48f-4673-8a8a-52ea3cd2bd54","275":"cf4f647d-ef9a-4f34-be2b-b3df2189364a","276":"0c20c47d-aba8-49bf-8124-fc65d6370ebf","277":"07a580ac-2d8e-49e4-a811-2c5da75918c7","278":"a3754769-1d68-4357-b843-bdd1c80588e3","279":"dbb19a2b-e39b-4c39-b0ff-42c34e49ef03","280":"deec5239-2537-4b8c-b194-930516595708","281":"8ddafbe6-3792-4400-8186-e226403dce90","282":"0528c983-efc0-4eac-aa2f-8525aacc0db1","283":"0bf66584-3703-4e50-987c-1c223dafa56f","284":"520d9ce8-3b1e-41b7-9c54-17d1898ea437","285":"9f0df673-addf-4367-b8f0-0df8ff885d8c","286":"5b6e9090-c565-4c23-9bce-cb682880cd07","287":"55709d06-8532-4a59-8113-df4ea26363a6","288":"8df77296-099c-4219-bcf3-59cc0f29d721","289":"3cf6602d-64bf-4d54-8808-b6fce4ce04a0","290":"85b4a740-b15f-497b-a12e-1f1f0dfdb60d","291":"c4741dcf-5e42-41db-bb68-4269cbe4afca","292":"894ef78f-3ce7-4bf1-b06f-6e692a0ceba8","293":"6ef49adc-549a-4d10-bcef-4fcfab413678","294":"d268b705-ee1b-4306-be27-b4fec823d999","295":"1971f0a2-9417-4ca8-80ec-47ec005359f2","296":"aabffb74-b4f8-4acb-bedf-7c1dca69bfe8","297":"aaa14937-0a43-4d37-b886-77a9303a1fa7","298":"8d4813ff-2fa8-4e80-b200-eecc512caa19","299":"0e015d8b-5e2d-448e-b198-73f0c9988e76","300":"1fb2c86f-4812-4003-8f4e-0d18bd84975e","301":"0b08bc75-b41f-4b6e-bfc4-9c867fb1e2d8","302":"d6793d4b-1478-4b18-834b-bab443f0ccda","303":"98744308-66e9-4abd-8172-45b1deedd08d","304":"0ce02689-688a-477d-be3a-1ea1ff410d21"}]